
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 05 19:56:34 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;
import java.util.List;
import java.util.Stack;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 05 19:56:34 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\077\004\000\002\005" +
    "\004\000\002\005\006\000\002\005\002\000\002\013\003" +
    "\000\002\013\005\000\002\006\003\000\002\006\002\000" +
    "\002\053\003\000\002\061\003\000\002\057\005\000\002" +
    "\060\003\000\002\060\007\000\002\054\005\000\002\055" +
    "\003\000\002\055\007\000\002\007\005\000\002\010\003" +
    "\000\002\010\007\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\014" +
    "\010\000\002\015\010\000\002\015\011\000\002\015\011" +
    "\000\002\022\015\000\002\022\010\000\002\023\010\000" +
    "\002\023\006\000\002\023\010\000\002\024\015\000\002" +
    "\024\013\000\002\024\015\000\002\024\010\000\002\024" +
    "\015\000\002\025\003\000\002\026\003\000\002\026\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\020\006\000\002\035\003\000\002\035\004\000\002" +
    "\036\010\000\002\036\005\000\002\036\006\000\002\037" +
    "\003\000\002\037\004\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\047\004\000\002\047\002\000" +
    "\002\050\004\000\002\050\003\000\002\052\003\000\002" +
    "\052\004\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\040\013\000\002\040\012\000\002\040\012" +
    "\000\002\040\013\000\002\042\003\000\002\042\005\000" +
    "\002\042\004\000\002\044\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\073\006\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\076\003\000\002\076\004\000\002\062\004\000" +
    "\002\062\005\000\002\065\003\000\002\065\005\000\002" +
    "\065\005\000\002\066\003\000\002\066\005\000\002\066" +
    "\005\000\002\067\003\000\002\067\004\000\002\067\003" +
    "\000\002\067\005\000\002\075\003\000\002\075\005\000" +
    "\002\075\005\000\002\075\005\000\002\075\005\000\002" +
    "\074\003\000\002\074\005\000\002\074\005\000\002\074" +
    "\005\000\002\074\005\000\002\074\005\000\002\074\005" +
    "\000\002\074\004\000\002\074\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\005\000\002\072\003\000\002\072" +
    "\003\000\002\070\003\000\002\070\003\000\002\071\003" +
    "\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\010\034\ufffd\035\004\036\007\001\002\000" +
    "\004\107\013\001\002\000\004\002\363\001\002\000\004" +
    "\034\016\001\002\000\004\107\010\001\002\000\004\035" +
    "\011\001\002\000\004\107\013\001\002\000\006\034\ufffe" +
    "\071\014\001\002\000\006\034\ufffc\071\ufffc\001\002\000" +
    "\004\107\015\001\002\000\006\034\ufffb\071\ufffb\001\002" +
    "\000\006\003\022\107\023\001\002\000\006\002\000\034" +
    "\016\001\002\000\006\002\uffd0\034\uffd0\001\002\000\006" +
    "\002\uffcf\034\uffcf\001\002\000\004\073\362\001\002\000" +
    "\004\073\024\001\002\000\006\003\025\052\026\001\002" +
    "\000\006\002\uffcc\034\uffcc\001\002\000\016\013\041\016" +
    "\032\017\027\030\044\105\033\107\045\001\002\000\024" +
    "\003\350\011\056\055\075\103\063\107\057\110\102\111" +
    "\067\114\060\115\077\001\002\000\024\005\uffe6\013\uffe6" +
    "\016\uffe6\017\uffe6\030\uffe6\031\uffe6\053\uffe6\105\uffe6\107" +
    "\uffe6\001\002\000\024\005\uffe8\013\uffe8\016\uffe8\017\uffe8" +
    "\030\uffe8\031\uffe8\053\uffe8\105\uffe8\107\uffe8\001\002\000" +
    "\006\003\320\107\321\001\002\000\036\011\056\055\075" +
    "\103\063\107\057\110\102\111\067\112\065\113\076\114" +
    "\060\115\077\116\064\117\061\120\053\121\104\001\002" +
    "\000\020\013\uffcb\016\uffcb\017\uffcb\030\uffcb\053\uffcb\105" +
    "\uffcb\107\uffcb\001\002\000\020\013\uffc8\016\uffc8\017\uffc8" +
    "\030\uffc8\053\uffc8\105\uffc8\107\uffc8\001\002\000\024\005" +
    "\uffe7\013\uffe7\016\uffe7\017\uffe7\030\uffe7\031\uffe7\053\uffe7" +
    "\105\uffe7\107\uffe7\001\002\000\022\013\ufff8\016\ufff8\017" +
    "\ufff8\030\ufff8\053\ufff8\074\266\105\ufff8\107\ufff8\001\002" +
    "\000\020\013\uffc7\016\uffc7\017\uffc7\030\uffc7\053\uffc7\105" +
    "\uffc7\107\uffc7\001\002\000\022\011\056\055\075\103\063" +
    "\107\057\110\102\111\067\114\060\115\077\001\002\000" +
    "\022\013\ufff2\016\ufff2\017\ufff2\030\ufff2\053\ufff2\074\ufff2" +
    "\105\ufff2\107\ufff2\001\002\000\020\013\uffc9\016\uffc9\017" +
    "\uffc9\030\uffc9\053\uffc9\105\uffc9\107\uffc9\001\002\000\004" +
    "\107\176\001\002\000\004\061\052\001\002\000\020\013" +
    "\041\016\032\017\027\030\044\053\050\105\033\107\045" +
    "\001\002\000\024\005\uffe9\013\uffe9\016\uffe9\017\uffe9\030" +
    "\uffe9\031\uffe9\053\uffe9\105\uffe9\107\uffe9\001\002\000\006" +
    "\002\uffce\034\uffce\001\002\000\020\013\uffca\016\uffca\017" +
    "\uffca\030\uffca\053\uffca\105\uffca\107\uffca\001\002\000\036" +
    "\011\056\055\075\103\063\107\057\110\102\111\067\112" +
    "\065\113\076\114\060\115\077\116\064\117\061\120\053" +
    "\121\104\001\002\000\004\103\uffaf\001\002\000\030\005" +
    "\uffeb\013\uffeb\016\uffeb\017\uffeb\030\uffeb\031\uffeb\053\uffeb" +
    "\073\uffeb\074\uffeb\105\uffeb\107\uffeb\001\002\000\062\005" +
    "\uffa1\007\uffa1\010\uffa1\013\uffa1\016\uffa1\017\uffa1\030\uffa1" +
    "\031\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\073\uffa1" +
    "\074\uffa1\104\uffa1\105\uffa1\107\uffa1\001\002\000\022\011" +
    "\056\055\075\103\063\107\057\110\102\111\067\114\060" +
    "\115\077\001\002\000\064\005\uffad\007\uffad\010\uffad\013" +
    "\uffad\016\uffad\017\uffad\030\uffad\031\uffad\053\uffad\054\uffad" +
    "\055\uffad\057\uffad\060\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\073\uffad\074\uffad\103\164\104\uffad" +
    "\105\uffad\107\uffad\001\002\000\036\005\uff87\007\uff87\010" +
    "\uff87\013\uff87\016\uff87\017\uff87\030\uff87\031\uff87\053\uff87" +
    "\073\uff87\074\uff87\104\uff87\105\uff87\107\uff87\001\002\000" +
    "\004\103\uffb0\001\002\000\036\005\uff9a\007\uff9a\010\uff9a" +
    "\013\uff9a\016\uff9a\017\uff9a\030\uff9a\031\uff9a\053\uff9a\073" +
    "\uff9a\074\uff9a\104\uff9a\105\uff9a\107\uff9a\001\002\000\022" +
    "\011\056\055\075\103\063\107\057\110\102\111\067\114" +
    "\060\115\077\001\002\000\004\103\uffb1\001\002\000\032" +
    "\005\uff89\013\uff89\016\uff89\017\uff89\030\uff89\031\uff89\053" +
    "\uff89\073\uff89\074\uff89\104\uff89\105\uff89\107\uff89\001\002" +
    "\000\022\013\ufff3\016\ufff3\017\ufff3\030\ufff3\053\ufff3\074" +
    "\ufff3\105\ufff3\107\ufff3\001\002\000\062\005\uff8a\007\uff8a" +
    "\010\uff8a\013\uff8a\016\uff8a\017\uff8a\030\uff8a\031\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\057\uff8a\060\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\073\uff8a\074\uff8a\104" +
    "\uff8a\105\uff8a\107\uff8a\001\002\000\062\005\uffa6\007\uffa6" +
    "\010\uffa6\013\uffa6\016\uffa6\017\uffa6\030\uffa6\031\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\073\uffa6\074\uffa6\104" +
    "\uffa6\105\uffa6\107\uffa6\001\002\000\062\005\uffa9\007\uffa9" +
    "\010\uffa9\013\uffa9\016\uffa9\017\uffa9\030\uffa9\031\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\057\133\060\132\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\073\uffa9\074\uffa9\104" +
    "\uffa9\105\uffa9\107\uffa9\001\002\000\030\005\uffea\013\uffea" +
    "\016\uffea\017\uffea\030\uffea\031\uffea\053\uffea\073\uffea\074" +
    "\uffea\105\uffea\107\uffea\001\002\000\034\005\uffec\007\147" +
    "\010\150\013\uffec\016\uffec\017\uffec\030\uffec\031\uffec\053" +
    "\uffec\073\uffec\074\uffec\105\uffec\107\uffec\001\002\000\062" +
    "\005\uffa3\007\uffa3\010\uffa3\013\uffa3\016\uffa3\017\uffa3\030" +
    "\uffa3\031\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\073" +
    "\uffa3\074\uffa3\104\uffa3\105\uffa3\107\uffa3\001\002\000\014" +
    "\055\075\103\124\107\057\110\102\111\067\001\002\000" +
    "\032\005\uff88\013\uff88\016\uff88\017\uff88\030\uff88\031\uff88" +
    "\053\uff88\073\uff88\074\uff88\104\uff88\105\uff88\107\uff88\001" +
    "\002\000\036\005\uff86\007\uff86\010\uff86\013\uff86\016\uff86" +
    "\017\uff86\030\uff86\031\uff86\053\uff86\073\uff86\074\uff86\104" +
    "\uff86\105\uff86\107\uff86\001\002\000\036\005\uff9f\007\uff9f" +
    "\010\uff9f\013\uff9f\016\uff9f\017\uff9f\030\uff9f\031\uff9f\053" +
    "\uff9f\073\uff9f\074\uff9f\104\uff9f\105\uff9f\107\uff9f\001\002" +
    "\000\050\005\uffed\013\uffed\016\uffed\017\uffed\030\uffed\031" +
    "\uffed\053\uffed\054\114\055\117\062\120\063\112\064\113" +
    "\065\116\066\121\067\115\073\uffed\074\uffed\105\uffed\107" +
    "\uffed\001\002\000\062\005\uff8b\007\uff8b\010\uff8b\013\uff8b" +
    "\016\uff8b\017\uff8b\030\uff8b\031\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\057\uff8b\060\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\073\uff8b\074\uff8b\104\uff8b\105\uff8b\107" +
    "\uff8b\001\002\000\004\103\105\001\002\000\004\103\uffae" +
    "\001\002\000\032\011\056\055\075\103\063\107\057\110" +
    "\102\111\067\114\060\115\077\116\064\117\061\120\053" +
    "\121\104\001\002\000\004\104\156\001\002\000\006\053" +
    "\uffb3\104\uffb3\001\002\000\012\007\147\010\150\053\uffb4" +
    "\104\uffb4\001\002\000\026\053\uffb5\054\114\055\117\062" +
    "\120\063\112\064\113\065\116\066\121\067\115\104\uffb5" +
    "\001\002\000\016\003\145\055\075\103\124\107\057\110" +
    "\102\111\067\001\002\000\016\003\143\055\075\103\124" +
    "\107\057\110\102\111\067\001\002\000\014\055\075\103" +
    "\124\107\057\110\102\111\067\001\002\000\016\003\140" +
    "\055\075\103\124\107\057\110\102\111\067\001\002\000" +
    "\016\003\136\055\075\103\124\107\057\110\102\111\067" +
    "\001\002\000\014\055\075\103\124\107\057\110\102\111" +
    "\067\001\002\000\016\003\127\055\075\103\124\107\057" +
    "\110\102\111\067\001\002\000\016\003\122\055\075\103" +
    "\124\107\057\110\102\111\067\001\002\000\036\005\uff8c" +
    "\007\uff8c\010\uff8c\013\uff8c\016\uff8c\017\uff8c\030\uff8c\031" +
    "\uff8c\053\uff8c\073\uff8c\074\uff8c\104\uff8c\105\uff8c\107\uff8c" +
    "\001\002\000\042\005\uff94\007\uff94\010\uff94\013\uff94\016" +
    "\uff94\017\uff94\030\uff94\031\uff94\053\uff94\054\114\055\117" +
    "\073\uff94\074\uff94\104\uff94\105\uff94\107\uff94\001\002\000" +
    "\014\055\075\103\124\107\057\110\102\111\067\001\002" +
    "\000\010\054\114\055\117\104\126\001\002\000\062\005" +
    "\uffa0\007\uffa0\010\uffa0\013\uffa0\016\uffa0\017\uffa0\030\uffa0" +
    "\031\uffa0\053\uffa0\054\uffa0\055\uffa0\057\uffa0\060\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\073\uffa0" +
    "\074\uffa0\104\uffa0\105\uffa0\107\uffa0\001\002\000\036\005" +
    "\uff91\007\uff91\010\uff91\013\uff91\016\uff91\017\uff91\030\uff91" +
    "\031\uff91\053\uff91\073\uff91\074\uff91\104\uff91\105\uff91\107" +
    "\uff91\001\002\000\042\005\uff99\007\uff99\010\uff99\013\uff99" +
    "\016\uff99\017\uff99\030\uff99\031\uff99\053\uff99\054\114\055" +
    "\117\073\uff99\074\uff99\104\uff99\105\uff99\107\uff99\001\002" +
    "\000\062\005\uffa7\007\uffa7\010\uffa7\013\uffa7\016\uffa7\017" +
    "\uffa7\030\uffa7\031\uffa7\053\uffa7\054\uffa7\055\uffa7\057\133" +
    "\060\132\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\073\uffa7\074\uffa7\104\uffa7\105\uffa7\107\uffa7\001\002" +
    "\000\014\055\075\103\124\107\057\110\102\111\067\001" +
    "\002\000\014\055\075\103\124\107\057\110\102\111\067" +
    "\001\002\000\062\005\uffa5\007\uffa5\010\uffa5\013\uffa5\016" +
    "\uffa5\017\uffa5\030\uffa5\031\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\057\uffa5\060\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\073\uffa5\074\uffa5\104\uffa5\105\uffa5\107\uffa5" +
    "\001\002\000\062\005\uffa4\007\uffa4\010\uffa4\013\uffa4\016" +
    "\uffa4\017\uffa4\030\uffa4\031\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\057\uffa4\060\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\073\uffa4\074\uffa4\104\uffa4\105\uffa4\107\uffa4" +
    "\001\002\000\036\005\uff8f\007\uff8f\010\uff8f\013\uff8f\016" +
    "\uff8f\017\uff8f\030\uff8f\031\uff8f\053\uff8f\073\uff8f\074\uff8f" +
    "\104\uff8f\105\uff8f\107\uff8f\001\002\000\042\005\uff97\007" +
    "\uff97\010\uff97\013\uff97\016\uff97\017\uff97\030\uff97\031\uff97" +
    "\053\uff97\054\114\055\117\073\uff97\074\uff97\104\uff97\105" +
    "\uff97\107\uff97\001\002\000\036\005\uff8d\007\uff8d\010\uff8d" +
    "\013\uff8d\016\uff8d\017\uff8d\030\uff8d\031\uff8d\053\uff8d\073" +
    "\uff8d\074\uff8d\104\uff8d\105\uff8d\107\uff8d\001\002\000\042" +
    "\005\uff95\007\uff95\010\uff95\013\uff95\016\uff95\017\uff95\030" +
    "\uff95\031\uff95\053\uff95\054\114\055\117\073\uff95\074\uff95" +
    "\104\uff95\105\uff95\107\uff95\001\002\000\062\005\uffa8\007" +
    "\uffa8\010\uffa8\013\uffa8\016\uffa8\017\uffa8\030\uffa8\031\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\057\133\060\132\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\073\uffa8\074\uffa8" +
    "\104\uffa8\105\uffa8\107\uffa8\001\002\000\036\005\uff8e\007" +
    "\uff8e\010\uff8e\013\uff8e\016\uff8e\017\uff8e\030\uff8e\031\uff8e" +
    "\053\uff8e\073\uff8e\074\uff8e\104\uff8e\105\uff8e\107\uff8e\001" +
    "\002\000\042\005\uff96\007\uff96\010\uff96\013\uff96\016\uff96" +
    "\017\uff96\030\uff96\031\uff96\053\uff96\054\114\055\117\073" +
    "\uff96\074\uff96\104\uff96\105\uff96\107\uff96\001\002\000\036" +
    "\005\uff90\007\uff90\010\uff90\013\uff90\016\uff90\017\uff90\030" +
    "\uff90\031\uff90\053\uff90\073\uff90\074\uff90\104\uff90\105\uff90" +
    "\107\uff90\001\002\000\042\005\uff98\007\uff98\010\uff98\013" +
    "\uff98\016\uff98\017\uff98\030\uff98\031\uff98\053\uff98\054\114" +
    "\055\117\073\uff98\074\uff98\104\uff98\105\uff98\107\uff98\001" +
    "\002\000\024\003\155\011\056\055\075\103\063\107\057" +
    "\110\102\111\067\114\060\115\077\001\002\000\024\003" +
    "\152\011\056\055\075\103\063\107\057\110\102\111\067" +
    "\114\060\115\077\001\002\000\036\005\uff9d\007\uff9d\010" +
    "\uff9d\013\uff9d\016\uff9d\017\uff9d\030\uff9d\031\uff9d\053\uff9d" +
    "\073\uff9d\074\uff9d\104\uff9d\105\uff9d\107\uff9d\001\002\000" +
    "\036\005\uff9b\007\uff9b\010\uff9b\013\uff9b\016\uff9b\017\uff9b" +
    "\030\uff9b\031\uff9b\053\uff9b\073\uff9b\074\uff9b\104\uff9b\105" +
    "\uff9b\107\uff9b\001\002\000\022\054\114\055\117\062\120" +
    "\063\112\064\113\065\116\066\121\067\115\001\002\000" +
    "\036\005\uff9e\007\uff9e\010\uff9e\013\uff9e\016\uff9e\017\uff9e" +
    "\030\uff9e\031\uff9e\053\uff9e\073\uff9e\074\uff9e\104\uff9e\105" +
    "\uff9e\107\uff9e\001\002\000\036\005\uff9c\007\uff9c\010\uff9c" +
    "\013\uff9c\016\uff9c\017\uff9c\030\uff9c\031\uff9c\053\uff9c\073" +
    "\uff9c\074\uff9c\104\uff9c\105\uff9c\107\uff9c\001\002\000\032" +
    "\005\uffb2\013\uffb2\016\uffb2\017\uffb2\030\uffb2\031\uffb2\053" +
    "\uffb2\073\uffb2\074\uffb2\104\uffb2\105\uffb2\107\uffb2\001\002" +
    "\000\062\005\uffa2\007\uffa2\010\uffa2\013\uffa2\016\uffa2\017" +
    "\uffa2\030\uffa2\031\uffa2\053\uffa2\054\uffa2\055\uffa2\057\uffa2" +
    "\060\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\073\uffa2\074\uffa2\104\uffa2\105\uffa2\107\uffa2\001\002" +
    "\000\010\007\147\010\150\104\162\001\002\000\024\054" +
    "\114\055\117\062\120\063\112\064\113\065\116\066\121" +
    "\067\115\104\126\001\002\000\036\005\uff92\007\uff92\010" +
    "\uff92\013\uff92\016\uff92\017\uff92\030\uff92\031\uff92\053\uff92" +
    "\073\uff92\074\uff92\104\uff92\105\uff92\107\uff92\001\002\000" +
    "\062\005\uffac\007\uffac\010\uffac\013\uffac\016\uffac\017\uffac" +
    "\030\uffac\031\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\073\uffac\074\uffac\104\uffac\105\uffac\107\uffac\001\002\000" +
    "\006\104\165\107\170\001\002\000\062\005\uffab\007\uffab" +
    "\010\uffab\013\uffab\016\uffab\017\uffab\030\uffab\031\uffab\053" +
    "\uffab\054\uffab\055\uffab\057\uffab\060\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\073\uffab\074\uffab\104" +
    "\uffab\105\uffab\107\uffab\001\002\000\010\003\173\074\171" +
    "\104\172\001\002\000\010\003\uffb9\074\uffb9\104\uffb9\001" +
    "\002\000\010\003\uffb6\074\uffb6\104\uffb6\001\002\000\004" +
    "\107\170\001\002\000\062\005\uffaa\007\uffaa\010\uffaa\013" +
    "\uffaa\016\uffaa\017\uffaa\030\uffaa\031\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\073\uffaa\074\uffaa\104\uffaa\105\uffaa" +
    "\107\uffaa\001\002\000\010\003\uffb7\074\uffb7\104\uffb7\001" +
    "\002\000\010\003\uffb8\074\uffb8\104\uffb8\001\002\000\036" +
    "\005\uff93\007\uff93\010\uff93\013\uff93\016\uff93\017\uff93\030" +
    "\uff93\031\uff93\053\uff93\073\uff93\074\uff93\104\uff93\105\uff93" +
    "\107\uff93\001\002\000\004\103\177\001\002\000\006\104" +
    "\200\107\170\001\002\000\004\073\240\001\002\000\010" +
    "\003\173\074\171\104\202\001\002\000\004\073\203\001" +
    "\002\000\004\052\204\001\002\000\024\005\216\013\041" +
    "\016\032\017\027\022\212\031\210\053\uffc5\105\033\107" +
    "\211\001\002\000\022\005\uffbf\013\uffbf\016\uffbf\017\uffbf" +
    "\031\uffbf\053\uffbf\105\uffbf\107\uffbf\001\002\000\024\005" +
    "\ufff5\013\ufff5\016\ufff5\017\ufff5\031\ufff5\053\ufff5\074\ufff5" +
    "\105\ufff5\107\ufff5\001\002\000\022\005\uffc2\013\uffc2\016" +
    "\uffc2\017\uffc2\031\uffc2\053\uffc2\105\uffc2\107\uffc2\001\002" +
    "\000\032\011\056\055\075\103\063\107\057\110\102\111" +
    "\067\114\060\115\077\116\064\117\061\120\053\121\104" +
    "\001\002\000\004\061\235\001\002\000\004\053\234\001" +
    "\002\000\004\053\233\001\002\000\024\005\ufff7\013\ufff7" +
    "\016\ufff7\017\ufff7\031\ufff7\053\ufff7\074\227\105\ufff7\107" +
    "\ufff7\001\002\000\022\005\uffbe\013\uffbe\016\uffbe\017\uffbe" +
    "\031\uffbe\053\uffbe\105\uffbe\107\uffbe\001\002\000\004\103" +
    "\224\001\002\000\022\005\uffc0\013\uffc0\016\uffc0\017\uffc0" +
    "\031\uffc0\053\uffc0\105\uffc0\107\uffc0\001\002\000\004\053" +
    "\uffc3\001\002\000\022\005\216\013\041\016\032\017\027" +
    "\031\210\053\uffc5\105\033\107\211\001\002\000\022\005" +
    "\uffc1\013\uffc1\016\uffc1\017\uffc1\031\uffc1\053\uffc1\105\uffc1" +
    "\107\uffc1\001\002\000\004\053\uffc4\001\002\000\006\112" +
    "\065\113\076\001\002\000\004\104\226\001\002\000\022" +
    "\005\uffd1\013\uffd1\016\uffd1\017\uffd1\031\uffd1\053\uffd1\105" +
    "\uffd1\107\uffd1\001\002\000\004\107\230\001\002\000\004" +
    "\061\231\001\002\000\036\011\056\055\075\103\063\107" +
    "\057\110\102\111\067\112\065\113\076\114\060\115\077" +
    "\116\064\117\061\120\053\121\104\001\002\000\024\005" +
    "\ufff4\013\ufff4\016\ufff4\017\ufff4\031\ufff4\053\ufff4\074\ufff4" +
    "\105\ufff4\107\ufff4\001\002\000\020\013\uffbd\016\uffbd\017" +
    "\uffbd\030\uffbd\053\uffbd\105\uffbd\107\uffbd\001\002\000\020" +
    "\013\uffba\016\uffba\017\uffba\030\uffba\053\uffba\105\uffba\107" +
    "\uffba\001\002\000\036\011\056\055\075\103\063\107\057" +
    "\110\102\111\067\112\065\113\076\114\060\115\077\116" +
    "\064\117\061\120\053\121\104\001\002\000\024\005\ufff6" +
    "\013\ufff6\016\ufff6\017\ufff6\031\ufff6\053\ufff6\074\ufff6\105" +
    "\ufff6\107\ufff6\001\002\000\004\053\uffc6\001\002\000\004" +
    "\052\241\001\002\000\024\005\216\013\041\016\032\017" +
    "\027\022\242\031\210\053\uffc5\105\033\107\211\001\002" +
    "\000\004\053\245\001\002\000\004\053\244\001\002\000" +
    "\020\013\uffbc\016\uffbc\017\uffbc\030\uffbc\053\uffbc\105\uffbc" +
    "\107\uffbc\001\002\000\020\013\uffbb\016\uffbb\017\uffbb\030" +
    "\uffbb\053\uffbb\105\uffbb\107\uffbb\001\002\000\010\007\147" +
    "\010\150\073\247\001\002\000\004\052\250\001\002\000" +
    "\016\005\216\013\041\016\032\017\027\105\033\107\211" +
    "\001\002\000\020\005\uffd3\013\uffd3\016\uffd3\017\uffd3\053" +
    "\uffd3\105\uffd3\107\uffd3\001\002\000\020\005\216\013\041" +
    "\016\032\017\027\053\uffd7\105\033\107\211\001\002\000" +
    "\004\053\257\001\002\000\020\005\uffd6\013\uffd6\016\uffd6" +
    "\017\uffd6\053\uffd6\105\uffd6\107\uffd6\001\002\000\020\005" +
    "\uffd2\013\uffd2\016\uffd2\017\uffd2\053\uffd2\105\uffd2\107\uffd2" +
    "\001\002\000\020\005\uffd4\013\uffd4\016\uffd4\017\uffd4\053" +
    "\uffd4\105\uffd4\107\uffd4\001\002\000\026\005\uffe0\013\uffe0" +
    "\014\260\016\uffe0\017\uffe0\030\uffe0\031\uffe0\053\uffe0\105" +
    "\uffe0\107\uffe0\001\002\000\004\073\261\001\002\000\004" +
    "\052\262\001\002\000\016\005\216\013\041\016\032\017" +
    "\027\105\033\107\211\001\002\000\004\053\264\001\002" +
    "\000\024\005\uffe1\013\uffe1\016\uffe1\017\uffe1\030\uffe1\031" +
    "\uffe1\053\uffe1\105\uffe1\107\uffe1\001\002\000\020\005\uffd5" +
    "\013\uffd5\016\uffd5\017\uffd5\053\uffd5\105\uffd5\107\uffd5\001" +
    "\002\000\004\107\267\001\002\000\004\061\270\001\002" +
    "\000\036\011\056\055\075\103\063\107\057\110\102\111" +
    "\067\112\065\113\076\114\060\115\077\116\064\117\061" +
    "\120\053\121\104\001\002\000\022\013\ufff1\016\ufff1\017" +
    "\ufff1\030\ufff1\053\ufff1\074\ufff1\105\ufff1\107\ufff1\001\002" +
    "\000\004\073\273\001\002\000\004\052\274\001\002\000" +
    "\004\106\275\001\002\000\036\011\056\055\075\103\063" +
    "\107\057\110\102\111\067\112\065\113\076\114\060\115" +
    "\077\116\064\117\061\120\053\121\104\001\002\000\006" +
    "\053\277\106\300\001\002\000\024\005\uffe5\013\uffe5\016" +
    "\uffe5\017\uffe5\030\uffe5\031\uffe5\053\uffe5\105\uffe5\107\uffe5" +
    "\001\002\000\040\011\056\055\075\103\063\107\057\110" +
    "\102\111\067\112\065\113\076\114\060\115\077\116\064" +
    "\117\061\120\053\121\104\125\302\001\002\000\004\073" +
    "\307\001\002\000\004\073\303\001\002\000\004\052\304" +
    "\001\002\000\016\005\216\013\041\016\032\017\027\105" +
    "\033\107\211\001\002\000\004\053\306\001\002\000\006" +
    "\053\uffe3\106\uffe3\001\002\000\004\052\310\001\002\000" +
    "\016\005\216\013\041\016\032\017\027\105\033\107\211" +
    "\001\002\000\004\053\312\001\002\000\006\053\uffe2\106" +
    "\uffe2\001\002\000\004\073\314\001\002\000\004\052\315" +
    "\001\002\000\016\005\216\013\041\016\032\017\027\105" +
    "\033\107\211\001\002\000\004\053\317\001\002\000\006" +
    "\053\uffe4\106\uffe4\001\002\000\004\073\336\001\002\000" +
    "\004\050\322\001\002\000\004\051\323\001\002\000\004" +
    "\103\324\001\002\000\006\110\102\111\067\001\002\000" +
    "\004\104\326\001\002\000\004\073\327\001\002\000\006" +
    "\003\330\052\331\001\002\000\024\005\uffdb\013\uffdb\016" +
    "\uffdb\017\uffdb\030\uffdb\031\uffdb\053\uffdb\105\uffdb\107\uffdb" +
    "\001\002\000\020\003\333\005\216\013\041\016\032\017" +
    "\027\105\033\107\211\001\002\000\004\053\335\001\002" +
    "\000\004\053\334\001\002\000\024\005\uffda\013\uffda\016" +
    "\uffda\017\uffda\030\uffda\031\uffda\053\uffda\105\uffda\107\uffda" +
    "\001\002\000\024\005\uffdc\013\uffdc\016\uffdc\017\uffdc\030" +
    "\uffdc\031\uffdc\053\uffdc\105\uffdc\107\uffdc\001\002\000\004" +
    "\052\337\001\002\000\016\005\216\013\041\016\032\017" +
    "\027\105\033\107\211\001\002\000\004\053\341\001\002" +
    "\000\026\005\uffd9\013\uffd9\014\342\016\uffd9\017\uffd9\030" +
    "\uffd9\031\uffd9\053\uffd9\105\uffd9\107\uffd9\001\002\000\004" +
    "\073\343\001\002\000\004\052\344\001\002\000\016\005" +
    "\216\013\041\016\032\017\027\105\033\107\211\001\002" +
    "\000\004\053\346\001\002\000\024\005\uffd8\013\uffd8\016" +
    "\uffd8\017\uffd8\030\uffd8\031\uffd8\053\uffd8\105\uffd8\107\uffd8" +
    "\001\002\000\010\007\147\010\150\073\355\001\002\000" +
    "\004\073\351\001\002\000\004\052\352\001\002\000\016" +
    "\005\216\013\041\016\032\017\027\105\033\107\211\001" +
    "\002\000\004\053\354\001\002\000\024\005\uffdd\013\uffdd" +
    "\016\uffdd\017\uffdd\030\uffdd\031\uffdd\053\uffdd\105\uffdd\107" +
    "\uffdd\001\002\000\006\003\356\052\357\001\002\000\024" +
    "\005\uffde\013\uffde\016\uffde\017\uffde\030\uffde\031\uffde\053" +
    "\uffde\105\uffde\107\uffde\001\002\000\016\005\216\013\041" +
    "\016\032\017\027\105\033\107\211\001\002\000\004\053" +
    "\361\001\002\000\024\005\uffdf\013\uffdf\016\uffdf\017\uffdf" +
    "\030\uffdf\031\uffdf\053\uffdf\105\uffdf\107\uffdf\001\002\000" +
    "\006\002\uffcd\034\uffcd\001\002\000\004\002\001\001\002" +
    "\000\006\034\uffff\071\014\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\006\005\005\077\004\001\001\000\004\013" +
    "\363\001\001\000\002\001\001\000\006\035\016\036\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\027\021\037\022\046\023\030\024\035" +
    "\037\045\040\034\045\033\053\042\054\041\055\036\001" +
    "\001\000\022\065\152\066\070\067\067\071\061\072\054" +
    "\074\077\075\346\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\046\102\063\271" +
    "\065\100\066\070\067\067\070\053\071\061\072\054\073" +
    "\071\074\077\075\072\076\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\065\152\066\070\067\067\071\061" +
    "\072\054\074\077\075\245\076\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\027\021\037\022\046\023\030\024\035\040" +
    "\034\045\050\053\042\054\041\055\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\046" +
    "\102\063\065\065\100\066\070\067\067\070\053\071\061" +
    "\072\054\073\071\074\077\075\072\076\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\065\152\066\070\067\067\071\061\072\054\074\174\076" +
    "\073\001\001\000\004\062\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\065\160\066" +
    "\070\067\067\071\061\072\054\074\077\075\157\076\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\067\156\072\054\076\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\046\102\064\105\065\110\066\070\067\067\071\061\072" +
    "\054\073\106\074\077\075\107\076\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\065\145\066\070\067\067\072\054\076\073" +
    "\001\001\000\014\065\143\066\070\067\067\072\054\076" +
    "\073\001\001\000\012\066\141\067\067\072\054\076\073" +
    "\001\001\000\014\065\140\066\070\067\067\072\054\076" +
    "\073\001\001\000\014\065\136\066\070\067\067\072\054" +
    "\076\073\001\001\000\012\066\130\067\067\072\054\076" +
    "\073\001\001\000\014\065\127\066\070\067\067\072\054" +
    "\076\073\001\001\000\014\065\122\066\070\067\067\072" +
    "\054\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\065\124\066\070\067\067\072\054\076\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\067\134\072" +
    "\054\076\073\001\001\000\010\067\133\072\054\076\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\065\152\066\070" +
    "\067\067\071\061\072\054\074\153\076\073\001\001\000" +
    "\020\065\152\066\070\067\067\071\061\072\054\074\150" +
    "\076\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\165" +
    "\044\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\200\044\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\027\020\214\021\204" +
    "\022\046\023\030\024\035\047\217\050\212\051\206\052" +
    "\220\057\205\060\213\061\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\046\102\064" +
    "\236\065\110\066\070\067\067\071\061\072\054\073\106" +
    "\074\077\075\107\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\027\020\214\021\204\022\046\023\030" +
    "\024\035\047\222\051\221\057\205\060\213\061\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\046\102\063\231\065\100" +
    "\066\070\067\067\070\053\071\061\072\054\073\071\074" +
    "\077\075\072\076\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\046\102\063\235\065" +
    "\100\066\070\067\067\070\053\071\061\072\054\073\071" +
    "\074\077\075\072\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\027\020\214" +
    "\021\204\022\046\023\030\024\035\047\217\050\242\051" +
    "\206\052\220\057\205\060\213\061\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\027" +
    "\020\254\021\250\022\046\023\030\024\035\025\252\026" +
    "\251\027\253\057\205\060\213\061\255\001\001\000\002" +
    "\001\001\000\026\014\027\020\254\021\250\022\046\023" +
    "\030\024\035\027\264\057\205\060\213\061\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\027\020\254\021\250\022\046\023" +
    "\030\024\035\025\262\026\251\027\253\057\205\060\213" +
    "\061\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\046\102\063\270\065\100\066\070\067\067\070\053\071" +
    "\061\072\054\073\071\074\077\075\072\076\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\275\001\001\000\032\046\102\063\312\065\100" +
    "\066\070\067\067\070\053\071\061\072\054\073\071\074" +
    "\077\075\072\076\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\046\102\063\300\065\100\066\070\067" +
    "\067\070\053\071\061\072\054\073\071\074\077\075\072" +
    "\076\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\027\020\254\021\250\022\046" +
    "\023\030\024\035\025\304\026\251\027\253\057\205\060" +
    "\213\061\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\014\027\020\254\021\250\022" +
    "\046\023\030\024\035\025\310\026\251\027\253\057\205" +
    "\060\213\061\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\027" +
    "\020\254\021\250\022\046\023\030\024\035\025\315\026" +
    "\251\027\253\057\205\060\213\061\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\027\020\254\021\250" +
    "\022\046\023\030\024\035\025\331\026\251\027\253\057" +
    "\205\060\213\061\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\014\027\020\254\021\250\022\046\023\030" +
    "\024\035\025\337\026\251\027\253\057\205\060\213\061" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\014\027\020\254\021" +
    "\250\022\046\023\030\024\035\025\344\026\251\027\253" +
    "\057\205\060\213\061\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\027\020\254\021\250\022\046\023" +
    "\030\024\035\025\352\026\251\027\253\057\205\060\213" +
    "\061\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\014\027\020\254" +
    "\021\250\022\046\023\030\024\035\025\357\026\251\027" +
    "\253\057\205\060\213\061\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Generador generador = new Generador();
    public static EscribirTXT txtWriter = new EscribirTXT();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

    public void agregarMetodo(String nombreMetodo, String parametrosStr, String tipoRetorno, String contexto) {
        final String RESET = "\033[0m";
        final String ROJO = "\033[31m";
        final String VERDE = "\033[32m";
        final String AMARILLO = "\033[33m";
        final String CIAN = "\033[36m";

        // Crear el símbolo para el método
        Simbolo simboloMetodo = new Simbolo(nombreMetodo, tipoRetorno, "0", contexto);

        // Llamar al método de TablaSimbolos
        if (tabla.agregarMetodo(nombreMetodo, parametrosStr, simboloMetodo)) {
            // Obtener número de parámetros para el mensaje
            int numParams = tabla.obtenerNumeroParametros(nombreMetodo);

            /*System.out.println(VERDE + "--------Método agregado--------> " +
                             "Nombre: " + nombreMetodo +
                             ", Tipo retorno: " + tipoRetorno +
                             ", Parámetros: " + numParams +
                             " (" + parametrosStr + ")" + RESET);*/

            // Mostrar los parámetros individualmente
            if (numParams > 0) {
                //System.out.println(CIAN + "Parámetros del método " + nombreMetodo + ":");
                List<String> params = tabla.obtenerParametrosMetodo(nombreMetodo);
                for (String param : params) {
                    //System.out.println("  - " + param + " (parámetro)");
                }
                System.out.print(RESET);
            }
        } else {
            //System.out.println(ROJO + "-------Método NO agregado-------> " +
            //                 nombreMetodo + " ya existe" + RESET);
        }
    }
    public void agregarVariable(String id, String tipo, String valor, String contexto) {
        final String RESET = "\033[0m";
        final String ROJO = "\033[31m";
        final String VERDE = "\033[32m";
        final String AMARILLO = "\033[33m";

        if (tipo.equals("variable")) {
            Simbolo variable_simbolo = tabla.obtenerSimbolo(valor);
            if (variable_simbolo != null) {
                tipo = variable_simbolo.getTipo();
                valor = variable_simbolo.getValor();
                Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
                if (tabla.agregar(id, simbolo)) {
                    //System.out.println(VERDE + "--------Variable agregada con referencia--------> "  + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
                    ////System.out.println(tabla.mostrar());
                    return;
                }
            } else {
                //System.out.println(ROJO + "-------Variable NO agregada, no se encuentra la variable referenciada-------> " + id + RESET);
                return;
            }
        }

        Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
        if (tabla.agregar(id, simbolo)) {
            //System.out.println(VERDE + "--------Variable agregada--------> " + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
            ////System.out.println(tabla.mostrar());
        } else {
            //System.out.println(ROJO + "-------Variable NO agregada-------> " + id + RESET);
        }
    }
    public String[] realizarCasting(String tipoCast, String[] valor) {
        if (valor == null || valor.length < 2) {
            return new String[]{"", ""};
        }

        String tipoOriginal = valor[0];
        String val = valor[1].toString().replaceAll("^['\"]|['\"]$", "");

        try {
            switch (tipoCast) {
                case "int":
                    if (tipoOriginal.equals("int")) {
                        return valor; // No need to cast
                    } else if (tipoOriginal.equals("float")) {
                        return new String[]{"int", String.valueOf((int)Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        // Try to parse string as number
                        return new String[]{"int", String.valueOf(Integer.parseInt(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"int", val.equals("true") ? "1" : "0"};
                    }
                    break;

                case "float":
                    if (tipoOriginal.equals("float")) {
                        return valor;
                    } else if (tipoOriginal.equals("int")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"float", val.equals("true") ? "1.0" : "0.0"};
                    }
                    break;

                case "str":
                    return new String[]{"string", val};


                case "bool":
                    if (tipoOriginal.equals("boolean")) {
                        return valor;
                    } else if (tipoOriginal.equals("int") || tipoOriginal.equals("float")) {
                        boolean isNonZero = tipoOriginal.equals("int") ?
                            Integer.parseInt(val) != 0 : Float.parseFloat(val) != 0.0f;
                        return new String[]{"boolean", String.valueOf(isNonZero)};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"boolean", String.valueOf(!val.isEmpty())};
                    }
                    break;
            }
        } catch (NumberFormatException e) {
            System.err.println("Error de casting: no se puede convertir " + val + " a " + tipoCast);
        }

        return new String[]{"", ""};
    }

     public String[] handleComparison(String[] e1, String[] e2, String operator) {
            if (e1 == null || e2 == null || e1.length < 2 || e2.length < 2) {
                return new String[]{"", ""};
            }

            switch (operator) {
                case "==":
                case "!=":
                    if (e1[0].equals(e2[0])) {
                        boolean result = operator.equals("==") ?
                            e1[1].equals(e2[1]) : !e1[1].equals(e2[1]);
                        //System.out.println("Comparación de " + (operator.equals("==") ? "igualdad" : "desigualdad") +
                        //                 " entre tipos compatibles: " + e1[0]);
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;

                case ">":
                case "<":
                case ">=":
                case "<=":
                    if ((e1[0].equals("int") || e1[0].equals("float")) &&
                        (e2[0].equals("int") || e2[0].equals("float"))) {
                        float val1 = Float.parseFloat(e1[1]);
                        float val2 = Float.parseFloat(e2[1]);
                        boolean result = false;

                        switch (operator) {
                            case ">": result = val1 > val2; break;
                            case "<": result = val1 < val2; break;
                            case ">=": result = val1 >= val2; break;
                            case "<=": result = val1 <= val2; break;
                        }

                        //System.out.println("Comparacion " + operator + " entre numeros");
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;
            }

            //System.out.println("\033[31mError: No se pueden comparar " + e1[0] + " con " + e2[0] +
            //                 " usando " + operator + "\033[0m");
            return new String[]{"", ""};
        }

        public String[] handleNotOperation(String[] tl) {
            if (tl != null && tl.length >= 2 && tl[0].equals("boolean")) {
                return new String[]{"boolean", String.valueOf(!Boolean.parseBoolean(tl[1]))};
            }
            //System.out.println("\033[31mError: Operador NOT requiere un operando booleano\033[0m");
            return new String[]{"", ""};
        }

         public String[] handleLogicalOperation(String[] el, String[] tl, String operator) {
             if (el == null || tl == null || el.length < 2 || tl.length < 2) {
                 return new String[]{"", ""};
             }

             if (!el[0].equals("boolean") || !tl[0].equals("boolean")) {
                 //System.out.println("\033[31mError: Operador " + operator + " requiere operandos booleanos\033[0m");
                 return new String[]{"", ""};
             }

             boolean val1 = Boolean.parseBoolean(el[1]);
             boolean val2 = Boolean.parseBoolean(tl[1]);
             boolean result = false;

             switch (operator) {
                 case "AND":
                     result = val1 && val2;
                     //System.out.println("Operacion logica AND entre " + val1 + " y " + val2);
                     break;
                 case "OR":
                     result = val1 || val2;
                     //System.out.println("Operacion logica OR entre " + val1 + " y " + val2);
                     break;
             }

             return new String[]{"boolean", String.valueOf(result)};
         }

         public void handleLogicalError(String operator) {
             //System.out.println("\033[31mExpresion logica(" + operator + "), ERROR: Se esperaba un termino logico\033[0m");
         }

    public String[] handleArithmeticOperation(String[] e, String[] t, String operator) {
        if (e == null || t == null || e.length < 2 || t.length < 2) {
            return new String[]{"", ""};
        }

        // Checar si ambos son numeros
        boolean eIsNumber = e[0].equals("int") || e[0].equals("float");
        boolean tIsNumber = t[0].equals("int") || t[0].equals("float");

        if (!eIsNumber || !tIsNumber) {
            //System.out.println("\033[31mError: Operador " + operator + " requiere operandos numericos\033[0m");
            return new String[]{"", ""};
        }

        // Para division siempre hacer float
        if (operator.equals("/")) {
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            if (val2 == 0) {
                System.out.println("\033[31mError: Division por cero\033[0m");
                return new String[]{"error", "error"};
            }
            return new String[]{"float", String.valueOf(val1 / val2)};
        }

        if (e[0].equals(t[0])) {
            if (e[0].equals("int")) {
                int val1 = Integer.parseInt(e[1]);
                int val2 = Integer.parseInt(t[1]);
                switch (operator) {
                    case "+": return new String[]{"int", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"int", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"int", String.valueOf(val1 * val2)};
                }
            } else { // float
                float val1 = Float.parseFloat(e[1]);
                float val2 = Float.parseFloat(t[1]);
                switch (operator) {
                    case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"float", String.valueOf(val1 * val2)};
                }
            }
        } else {
            // tipos mezclados int y float convertir a float
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            switch (operator) {
                case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                case "*": return new String[]{"float", String.valueOf(val1 * val2)};
            }
        }

        return new String[]{"", ""};
    }

    public void logArithmeticOperation(String operator, String[] e, String[] t, String[] result) {
        if (result != null && result.length >= 2 && !result[0].isEmpty()) {
            /*System.out.println("Operacion " + operator + " entre " +
                             e[0] + "(" + e[1] + ") y " +
                             t[0] + "(" + t[1] + ") = " +
                             result[0] + "(" + result[1] + ")");
            */
        }
    }
        public void handlePrint(String text){
            final String RESET = "\033[0m";
            final String MORADO =  "\033[1;35m";
            String formateado = text.toString().replaceAll("^['\"]|['\"]$", "");
            //System.out.println(MORADO+formateado+RESET);
        }

        // Variables para manejar los casos del switch
        public ArrayList<String> arr_case = new ArrayList<>();
        public ArrayList<String> etiquetasCasos = new ArrayList<>();
        public String etiquetaDefault = "";
        public ArrayList<Object> bloquesCasos = new ArrayList<>();
        public Object bloqueDefault = null;

        // Método para procesar los casos
        public void procesarCasos(String etiquetaSalida) {
            // Procesar casos normales
            for(int i = 0; i < etiquetasCasos.size(); i++) {
                System.out.println(etiquetasCasos.get(i) + ":");
                // Ejecutar el código del bloque del caso
                // Aquí iría la generación de código para bloquesCasos.get(i)
                System.out.println("goto " + etiquetaSalida);
            }

            // Procesar default si existe
            if(etiquetaDefault != null && !etiquetaDefault.isEmpty()) {
                System.out.println(etiquetaDefault + ":");
                System.out.println("goto " + etiquetaSalida);
                // Ejecutar el código del bloque default
                // Aquí iría la generación de código para bloqueDefault
            }
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // booleano ::= FALSE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                //System.out.println("Tipo: Booleano False");
                RESULT = new String[]{"boolean",str.toString()};
            
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",55, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // booleano ::= TRUE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                //System.out.println("Tipo: Booleano True");
                RESULT = new String[]{"boolean",str.toString()};
             
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",55, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cadena ::= STRING_SIMPLE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           //System.out.println("Tipo: cadena simple");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",54, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cadena ::= STRING 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           //System.out.println("Tipo: cadena");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",54, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // numero ::= FLOAT 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("Tipo: float");
        RESULT = new String[]{"float",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",56, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // numero ::= INTEGER 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("Tipo: entero");
        RESULT = new String[]{"int",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",56, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              String[] RESULT =null;
		 //System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // termino_logico ::= LPAREN expresion_logica RPAREN 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = el; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // termino_logico ::= NOT termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleNotOperation(tl); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "!="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "=="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // termino_logico ::= booleano 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = b; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",58, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion_logica ::= expresion_logica OR error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("OR"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",59, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion_logica ::= expresion_logica AND error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("AND"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",59, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        RESULT = parser.handleLogicalOperation(el, tl, "OR");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",59, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        RESULT = parser.handleLogicalOperation(el, tl, "AND");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",59, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_logica ::= termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = tl; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",59, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= numero 
            {
              String[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] n = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= MINUS factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        boolean isInt = f instanceof String[] && ((String[])f)[0].equals("int");
        boolean isFloat = f instanceof String[] && ((String[])f)[0].equals("float");
       if (isInt || isFloat) {
           try {
                if (isInt){
                    int val = Integer.parseInt(((String[])f)[1]);
                    RESULT = new String[]{"int", String.valueOf(-val)};
                }else{
                    float val = Float.parseFloat(((String[])f)[1]);
                    RESULT = new String[]{"float", String.valueOf(-val)};
                }
           } catch (NumberFormatException e) {
               RESULT = new String[]{"error", "Invalid number format"};
           }
       } else {
           //System.out.println("Error: Cannot apply unary minus to non-numeric value");
           //RESULT = new String[]{"error", "Invalid operand for unary minus"};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= acceso_variable 
            {
              String[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] v = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = v; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termino ::= termino DIVIDE factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      String[] res = parser.handleArithmeticOperation(e, t, "/");
      String temp = parser.generador.nuevaVariableTemporal();
      System.out.println(temp + " = " + e[1] + " / " + t[1]);
      RESULT = new String[]{res[0], res[1]};
      parser.logArithmeticOperation("division", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",52, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termino ::= termino MULTIPLY factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      String[] res = parser.handleArithmeticOperation(e, t, "*");
      String temp = parser.generador.nuevaVariableTemporal();
      System.out.println(temp + " = " + e[1] + " * " + t[1]);
      RESULT = new String[]{res[0], res[1]};
      parser.logArithmeticOperation("multiplicacion", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",52, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino ::= factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",52, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      String[] res = parser.handleArithmeticOperation(e, t, "-");
      String temp = parser.generador.nuevaVariableTemporal();
      System.out.println(temp + " = " + e[1] + " - " + t[1]);
      RESULT = new String[]{res[0], res[1]};
      parser.logArithmeticOperation("resta", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",51, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      String[] res = parser.handleArithmeticOperation(e, t, "+");
      String temp = parser.generador.nuevaVariableTemporal();
      System.out.println(temp + " = " + e[1] + " + " + t[1]);
      RESULT = new String[]{res[0], res[1]};
      parser.logArithmeticOperation("suma", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",51, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_aritmetica ::= termino 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",51, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // metodo_paren ::= LPAREN parametros RPAREN 
            {
              String[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = new String[]{"param", p.toString()};
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("metodo_paren",48, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // metodo_paren ::= LPAREN RPAREN 
            {
              String[] RESULT =null;
		 RESULT = new String[]{"param", "vacio"};
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("metodo_paren",48, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // acceso_variable ::= IDENTIFIER metodo_paren 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] params = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
               if(parser.tabla.verificar(id)) {
                   Simbolo s = parser.tabla.obtenerSimbolo(id);
                   int num_params_meth = parser.tabla.obtenerNumeroParametros(id);
                   String[] parametros = params[1].split(",");
                   int num_params_meth_call= parametros.length;
                   if(num_params_meth!=num_params_meth_call){
                        RESULT = new String[]{s.getTipo(), s.getValor()}; // PROBLEMA: WILL LEAD TO ERRORS
                        //System.out.println("\033[31mERROR: NUMERO DE PARAMETROS NO COINCIDE CON METODO");
                   }
                   //System.out.println("\033[36mMetodo " +id+ " agregado a variable\033[0m");
                   RESULT = new String[]{s.getTipo(), s.getValor()};
               } else {
                   //System.out.println("Error: Variable '"+id+"' no definida");
                   RESULT = new String[]{"", ""};
               }
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("acceso_variable",60, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // acceso_variable ::= IDENTIFIER 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
            if(parser.tabla.verificar(id)) {
                Simbolo s = parser.tabla.obtenerSimbolo(id);
                RESULT = new String[]{s.getTipo(), s.getValor()};
            } else {
                //System.out.println("Error: Variable '"+id+"' no definida");
                RESULT = new String[]{"", ""};
            }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("acceso_variable",60, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casting_funcion ::= CAST_BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // casting_funcion ::= CAST_STR 
            {
              Object RESULT =null;
		 RESULT = "str"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // casting_funcion ::= CAST_FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casting_funcion ::= CAST_INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamada_funcion ::= casting_funcion LPAREN expresion RPAREN 
            {
              String[] RESULT =null;
		int castTypeleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).left;
		int castTyperight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).right;
		Object castType = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] exp = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
       if (exp != null) {
           String[] resultado = parser.realizarCasting((String)castType, (String[])exp);
           if (resultado[0].isEmpty()) {
               //System.out.println("\033[31m"+"Error: No se pudo realizar el casting de " + exp[1] + " a " + castType + "\033[0m");
           } else {
               //System.out.println("Casting realizado: " + exp[1] + " -> " + resultado[1] + " (" + resultado[0] + ")");
           }
           RESULT = resultado;
       } else {
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("llamada_funcion",57, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		RESULT = f; //System.out.println("Es una expresion que llama una FUNCION"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion_logica 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = el; //System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] ea = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = ea; //System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = new String(param); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros ::= parametros error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 //System.out.println("ERROR: DEFINICION DE METODO: Se esperaban parametros y se obtuvo"+e); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        RESULT = params + "," + param;
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros ::= parametro 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = (String) param; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).value;
		
    //System.out.println("=============DEFINICION DE METODO VACIO=============");
    parser.agregarMetodo(func.toString(), param.toString(), "int", "metodo");
    //System.out.println("\033[1;35mMetodo:"+func.toString()+" Parametros:"+param.toString()+"\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).value;
		
    parser.agregarVariable(func.toString(), "int", "1", "dec_metodo");
    parser.agregarMetodo(func.toString(), "", "int", "metodo");
    //System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO=============");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque_metodo DEDENT 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).value;
		
    //System.out.println("=============DEFINICION DE METODO SIN PARAMETROS=============");
    parser.agregarMetodo(func.toString(), "", "int", "metodo");
    //System.out.println("\033[1;35mMetodo:"+func.toString()+"\033[0");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque_metodo DEDENT 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).value;
		
     //System.out.println("\033[1;35mMetodo:"+func.toString()+" Parametros:"+param.toString()+"\033[0m");
     parser.agregarMetodo(func.toString(), param.toString(), "int", "metodo");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia_metodo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_metodo",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_metodo ::= estructura_control 
            {
              Object RESULT =null;
		 //System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_metodo",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_metodo ::= dec_variables_metodo 
            {
              Object RESULT =null;
		 //System.out.println("Sentencia de declaracion en metodo"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_metodo",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencias_metodo ::= sentencias_metodo sentencia_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencias_metodo",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencias_metodo ::= sentencia_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencias_metodo",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_metodo ::= retorno 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_metodo",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_metodo ::= sentencias_metodo retorno 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_metodo",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // retorno ::= 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("retorno",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // retorno ::= RETURN expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("\u001B[1;35mRetorno de metodo"+"\u001B[0m");
        RESULT = e; // Pasar el tipo y valor de retorno
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("retorno",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_cuerpo_clase ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_cuerpo_clase ::= dec_variables_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 //System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 //System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 //System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",27, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",27, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // impresion ::= PRINT LPAREN cadena RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] c = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 parser.handlePrint(c[1]); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("impresion",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 //System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= dec_variables_metodo 
            {
              Object RESULT =null;
		 //System.out.println("Sentencia de declaracion en metodo"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 //System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_for ::= FOR error COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba una estructura válida para FOR-ELSE\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_for ::= FOR error COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba una estructura válida para FOR\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT error DEDENT 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba un bloque válido después de FOR\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba un INDENT después de FOR\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).right;
		String[] n = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)).value;
		int for_bloqueleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int for_bloqueright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object for_bloque = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Generación de código intermedio para for
        String tempCond = parser.generador.nuevaVariableTemporal();
        String etiquetaInicio = parser.generador.nuevaEtiqueta();
        String etiquetaCuerpo = parser.generador.nuevaEtiqueta();
        String etiquetaSalida = parser.generador.nuevaEtiqueta();

        // Inicialización de la variable de control
        System.out.println(va + " = 0  "); // # Inicialización del bucle for

        // Etiqueta de inicio del bucle
        System.out.println(etiquetaInicio + ":  "); // # Inicio del bucle for

        // Evaluación de condición
        System.out.println(tempCond + " = " + va + " < " + n[1] + " "); //  # Condición del for
        System.out.println("if " + tempCond + " goto " + etiquetaCuerpo);
        System.out.println("goto " + etiquetaSalida);

        // Cuerpo del for
        System.out.println(etiquetaCuerpo + ":  "); // # Cuerpo del bucle for
        // Aquí iría el código del bloque for (for_bloque)

        // Incremento
        System.out.println(va + " = " + va + " + 1 "); //  # Incremento de la variable de control

        // Volver a evaluar la condición
        System.out.println("goto " + etiquetaInicio);

        // Salida del bucle
        System.out.println(etiquetaSalida + ": "); //  # Fin del bucle for
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_while ::= WHILE error COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba una expresión lógica después de WHILE\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_while ::= WHILE expresion_logica COLON error 
            {
              Object RESULT =null;
		
        System.out.println("\033[1;31mERROR: Se esperaba un INDENT después de WHILE\033[0m");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_while ::= WHILE expresion_logica COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).value;
		int while_bloqueleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int while_bloqueright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object while_bloque = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Generación de código intermedio para while
        String temp = parser.generador.nuevaVariableTemporal();
        String etiquetaInicio = parser.generador.nuevaEtiqueta();
        String etiquetaCuerpo = parser.generador.nuevaEtiqueta();
        String etiquetaSalida = parser.generador.nuevaEtiqueta();

        // Etiqueta de inicio del bucle
        System.out.println(etiquetaInicio + ":  "); //# Etiqueta de inicio del bucle while

        // Evaluar condición
        System.out.println(temp + " = " + el[1] + "  "); //# Evaluación de condición del while
        System.out.println("if " + temp + " goto " + etiquetaCuerpo);
        System.out.println("goto " + etiquetaSalida);

        // Cuerpo del while
        System.out.println(etiquetaCuerpo + ":  "); //# Inicio del cuerpo del while
        // Aquí iría el código del bloque while (while_bloque)

        // Volver a evaluar la condición
        System.out.println("goto " + etiquetaInicio);

        // Salida del bucle
        System.out.println(etiquetaSalida + ":  "); // # Fin del bucle while
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_if ::= IF expresion_logica COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).value;
		int if_bloqueleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int if_bloqueright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object if_bloque = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Generación de código intermedio para if sin else
        String temp = parser.generador.nuevaVariableTemporal();
        String etiquetaTrue = parser.generador.nuevaEtiqueta();
        String etiquetaSalida = parser.generador.nuevaEtiqueta();

        System.out.println(temp + " = " + el[1]);
        System.out.println("if " + temp + " goto " + etiquetaTrue);
        System.out.println("goto " + etiquetaSalida);

        // Bloque if
        System.out.println(etiquetaTrue + ":");
        // Aquí iría el código del bloque if (if_bloque)

        System.out.println(etiquetaSalida + ":");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_if ::= IF expresion_logica COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-9)).value;
		int if_bloqueleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).left;
		int if_bloqueright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).right;
		Object if_bloque = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)).value;
		int else_bloqueleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int else_bloqueright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object else_bloque = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Generación de código intermedio para if-else
        String temp = parser.generador.nuevaVariableTemporal();
        String etiquetaTrue = parser.generador.nuevaEtiqueta();
        String etiquetaFalse = parser.generador.nuevaEtiqueta();
        String etiquetaSalida = parser.generador.nuevaEtiqueta();

        // Generar comparación
        System.out.println(temp + " = " + el[1]); // # Evaluación de condición
        System.out.println("if " + temp + " goto " + etiquetaTrue);
        System.out.println("goto " + etiquetaFalse);

        // Bloque if
        System.out.println(etiquetaTrue + ":");
        // Aquí iría el código del bloque if (if_bloque)

        System.out.println("goto " + etiquetaSalida);

        // Bloque else
        System.out.println(etiquetaFalse + ":");
        // Aquí iría el código del bloque else (else_bloque)

        System.out.println(etiquetaSalida + ":");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_case ::= sentencia_case CASE valor_asignacion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).value;
		int bloque_casoleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int bloque_casoright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object bloque_caso = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        if(e != null){
            // Registrar el caso y su bloque
            parser.arr_case.add(e[1]);
        } else {
            System.out.println("Sentencia CASE no válida");
        }
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_case",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_case ::= sentencia_case CASE DEFAULT COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int bloque_defaultleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int bloque_defaultright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object bloque_default = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Registrar el caso default (_)
        parser.arr_case.add("_");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_case",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_case ::= CASE valor_asignacion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).value;
		int bloque_casoleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int bloque_casoright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object bloque_caso = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        if(e != null){
            // Registrar el caso y su bloque
            parser.arr_case.add(e[1]);
        } else {
            System.out.println("Sentencia CASE no válida");
        }
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_case",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_switch ::= MATCH valor_asignacion COLON INDENT sentencia_case DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
        // Generación de código intermedio para switch
        String temp = parser.generador.nuevaVariableTemporal();
        String etiquetaSalida = parser.generador.nuevaEtiqueta();

        // Almacenar el valor a comparar en temporal
        System.out.println(temp + " = " + e[1] ); //  # Almacenar valor de switch

        // Primero generar todos los casos normales (no default)
        boolean tieneDefault = false;
        for(int i = 0; i < parser.arr_case.size(); i++) {
            String caso = parser.arr_case.get(i);
            if(!caso.equals("_")) {  // "_" representa el caso default
                String etiquetaCaso = parser.generador.nuevaEtiqueta();
                parser.etiquetasCasos.add(etiquetaCaso);
                System.out.println("if " + temp + " == " + caso + " goto " + etiquetaCaso);
            } else {
                tieneDefault = true;
                parser.etiquetaDefault = parser.generador.nuevaEtiqueta();
            }
        }

        // Manejar el caso default
        if(tieneDefault) {
            System.out.println("goto " + parser.etiquetaDefault);
        } else {
            System.out.println("goto " + etiquetaSalida);
        }

        // Procesar las etiquetas generadas para los casos
        parser.procesarCasos(etiquetaSalida);

        // Etiqueta de salida
        System.out.println(etiquetaSalida + ":");

        // Limpiar variables para el próximo switch
        parser.arr_case.clear();
        parser.etiquetasCasos.clear();
        parser.etiquetaDefault = "";
        parser.bloquesCasos.clear();
        parser.bloqueDefault = null;
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_switch",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_control ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor_asignacion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_asignacion ::= cadena 
            {
              String[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] c = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_asignacion ::= expresion_logica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_asignacion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_var_multiple ::= dec_var_multiple COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "global");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_var_multiple ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_var_individual ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    //System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "global");
    } else {
        //System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_var_multiple_clase ::= dec_var_multiple_clase COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
        String temp = parser.generador.nuevaVariableTemporal();
        String asignacion_temp = temp + " = " + valor[1];
        String asignacion_var = id + " = " + temp;
        parser.txtWriter.append(asignacion_temp+"\n"+asignacion_var);
        System.out.println(asignacion_temp);  // Codigo intermedio
        System.out.println(asignacion_var);        // Asignación a variable
        //System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "clase");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_clase",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_var_multiple_clase ::= dec_var_individual_clase 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_clase",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_var_individual_clase ::= IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    //System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
    String temp = parser.generador.nuevaVariableTemporal();
    String asignacion_temp = temp + " = " + valor[1];
    String asignacion_var = id + " = " + temp;
    parser.txtWriter.append(asignacion_temp+"\n"+asignacion_var);
    System.out.println(asignacion_temp);  // Codigo intermedio
    System.out.println(asignacion_var);        // Asignación a variable
    //System.out.println("Varriable temporal "+ temp);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "clase");
    } else {
        //System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual_clase",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_var_multiple_metodo ::= dec_var_multiple_metodo COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        //System.out.println("Asignacion detectada en metodo: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_metodo",46, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_var_multiple_metodo ::= dec_var_individual_metodo 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_metodo",46, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_var_individual_metodo ::= IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    //System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
    String temp = parser.generador.nuevaVariableTemporal();
    String asignacion_temp = temp + " = " + valor[1];
    String asignacion_var = id + " = " + temp;
    parser.txtWriter.append(asignacion_temp+"\n"+asignacion_var);
    System.out.println(asignacion_temp);  // Codigo intermedio
    System.out.println(asignacion_var);        // Asignación a variable
    //System.out.println("Varriable temporal "+ temp);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    } else {
        //System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual_metodo",45, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_variables_metodo ::= dec_var_multiple_metodo 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables_metodo",47, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_variables_clase ::= dec_var_multiple_clase 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables_clase",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_variables ::= 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_variables ::= dec_var_multiple 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_importaciones ::= 
            {
              Object RESULT =null;
		 //System.out.println("!!!!!!!!!!!!!!!DECLARACION DE IMPORTACION VACIA!!!!!!!!!!!!!!!"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= FROM IDENTIFIER IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 //System.out.println("Es una declaracion de importacion FROM"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 //System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= dec_importaciones bloque_clases 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("programa",61, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

