
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 06 14:29:27 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 06 14:29:27 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\066\005\000\002\005" +
    "\004\000\002\005\006\000\002\005\002\000\002\013\005" +
    "\000\002\013\003\000\002\006\003\000\002\006\002\000" +
    "\002\042\003\000\002\050\003\000\002\046\005\000\002" +
    "\047\003\000\002\047\007\000\002\043\005\000\002\044" +
    "\003\000\002\044\007\000\002\007\005\000\002\010\003" +
    "\000\002\010\007\000\002\011\005\000\002\011\005\000" +
    "\002\012\005\000\002\012\005\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\061" +
    "\003\000\002\061\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\015\000\002" +
    "\016\010\000\002\017\010\000\002\017\006\000\002\020" +
    "\015\000\002\020\013\000\002\021\003\000\002\022\003" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\031\003\000\002\031\004\000\002" +
    "\032\010\000\002\032\005\000\002\032\006\000\002\033" +
    "\003\000\002\033\004\000\002\041\003\000\002\041\003" +
    "\000\002\034\013\000\002\034\012\000\002\034\012\000" +
    "\002\034\013\000\002\034\007\000\002\036\003\000\002" +
    "\036\005\000\002\036\004\000\002\040\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\062\006" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\065\003\000\002\054\003\000\002" +
    "\054\005\000\002\054\005\000\002\055\003\000\002\055" +
    "\005\000\002\055\005\000\002\056\003\000\002\056\004" +
    "\000\002\056\003\000\002\056\005\000\002\064\003\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\063\003\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\004\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\012\032\ufffd\033\004\034\007\104\ufffd\001" +
    "\002\000\004\104\013\001\002\000\004\002\302\001\002" +
    "\000\006\032\ufff9\104\020\001\002\000\004\104\010\001" +
    "\002\000\004\033\011\001\002\000\004\104\013\001\002" +
    "\000\010\032\ufffe\067\014\104\ufffe\001\002\000\010\032" +
    "\ufffb\067\ufffb\104\ufffb\001\002\000\004\104\015\001\002" +
    "\000\010\032\ufffc\067\ufffc\104\ufffc\001\002\000\006\032" +
    "\uffef\072\uffef\001\002\000\006\032\ufffa\072\276\001\002" +
    "\000\004\057\274\001\002\000\004\032\022\001\002\000" +
    "\006\003\026\104\027\001\002\000\006\002\000\032\022" +
    "\001\002\000\006\002\uffd0\032\uffd0\001\002\000\006\002" +
    "\uffcf\032\uffcf\001\002\000\004\071\273\001\002\000\004" +
    "\071\030\001\002\000\006\003\031\050\032\001\002\000" +
    "\006\002\uffcc\032\uffcc\001\002\000\006\026\036\104\041" +
    "\001\002\000\012\026\ufff2\051\ufff2\072\ufff2\104\ufff2\001" +
    "\002\000\010\026\uffc9\051\uffc9\104\uffc9\001\002\000\010" +
    "\026\uffcb\051\uffcb\104\uffcb\001\002\000\004\104\163\001" +
    "\002\000\012\026\ufff8\051\ufff8\072\157\104\ufff8\001\002" +
    "\000\010\026\uffc8\051\uffc8\104\uffc8\001\002\000\004\057" +
    "\045\001\002\000\010\026\036\051\043\104\041\001\002" +
    "\000\006\002\uffce\032\uffce\001\002\000\010\026\uffca\051" +
    "\uffca\104\uffca\001\002\000\036\007\051\053\072\101\056" +
    "\104\052\105\075\106\062\107\060\110\070\111\055\112" +
    "\071\113\057\114\053\115\046\116\077\001\002\000\004" +
    "\101\uffb8\001\002\000\050\007\uffe7\011\uffe7\014\uffe7\015" +
    "\uffe7\026\uffe7\032\uffe7\051\uffe7\053\uffe7\072\uffe7\101\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\111\uffe7\112\uffe7\113\uffe7\114" +
    "\uffe7\115\uffe7\116\uffe7\001\002\000\102\005\uffad\006\uffad" +
    "\007\uffad\011\uffad\014\uffad\015\uffad\026\uffad\032\uffad\051" +
    "\uffad\052\uffad\053\uffad\055\uffad\056\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\071\uffad\072\uffad\101" +
    "\uffad\102\uffad\104\uffad\105\uffad\106\uffad\111\uffad\112\uffad" +
    "\113\uffad\114\uffad\115\uffad\116\uffad\001\002\000\022\007" +
    "\051\053\072\101\056\104\052\105\075\106\062\111\055" +
    "\112\071\001\002\000\102\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\014\uffb6\015\uffb6\026\uffb6\032\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\071\uffb6\072\uffb6\101\uffb6\102\uffb6" +
    "\104\uffb6\105\uffb6\106\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\116\uffb6\001\002\000\004\101\uffb9\001\002" +
    "\000\060\005\uffa6\006\uffa6\007\uffa6\011\uffa6\014\uffa6\015" +
    "\uffa6\026\uffa6\032\uffa6\051\uffa6\053\uffa6\071\uffa6\072\uffa6" +
    "\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\111\uffa6\112" +
    "\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\001\002\000\060" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\014\uffe1\015\uffe1\026" +
    "\uffe1\032\uffe1\051\uffe1\053\uffe1\071\uffe1\072\uffe1\101\uffe1" +
    "\102\uffe1\104\uffe1\105\uffe1\106\uffe1\111\uffe1\112\uffe1\113" +
    "\uffe1\114\uffe1\115\uffe1\116\uffe1\001\002\000\022\007\051" +
    "\053\072\101\056\104\052\105\075\106\062\111\055\112" +
    "\071\001\002\000\004\101\uffba\001\002\000\050\007\uffe3" +
    "\011\uffe3\014\uffe3\015\uffe3\026\uffe3\032\uffe3\051\uffe3\053" +
    "\uffe3\072\uffe3\101\uffe3\104\uffe3\105\uffe3\106\uffe3\111\uffe3" +
    "\112\uffe3\113\uffe3\114\uffe3\115\uffe3\116\uffe3\001\002\000" +
    "\012\026\ufff3\051\ufff3\072\ufff3\104\ufff3\001\002\000\102" +
    "\005\uffe4\006\uffe4\007\uffe4\011\uffe4\014\uffe4\015\uffe4\026" +
    "\uffe4\032\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\071" +
    "\uffe4\072\uffe4\101\uffe4\102\uffe4\104\uffe4\105\uffe4\106\uffe4" +
    "\111\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\001" +
    "\002\000\102\005\uffb5\006\uffb5\007\uffb5\011\uffb5\014\uffb5" +
    "\015\uffb5\026\uffb5\032\uffb5\051\uffb5\052\uffb5\053\uffb5\055" +
    "\126\056\125\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\071\uffb5\072\uffb5\101\uffb5\102\uffb5\104\uffb5\105" +
    "\uffb5\106\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5" +
    "\116\uffb5\001\002\000\102\005\uffb2\006\uffb2\007\uffb2\011" +
    "\uffb2\014\uffb2\015\uffb2\026\uffb2\032\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\071\uffb2\072\uffb2\101\uffb2\102\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\111\uffb2\112\uffb2\113\uffb2\114" +
    "\uffb2\115\uffb2\116\uffb2\001\002\000\050\007\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\026\uffe6\032\uffe6\051\uffe6\053\uffe6\072" +
    "\uffe6\101\uffe6\104\uffe6\105\uffe6\106\uffe6\111\uffe6\112\uffe6" +
    "\113\uffe6\114\uffe6\115\uffe6\116\uffe6\001\002\000\054\005" +
    "\142\006\143\007\uffe8\011\uffe8\014\uffe8\015\uffe8\026\uffe8" +
    "\032\uffe8\051\uffe8\053\uffe8\072\uffe8\101\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\001\002\000\102\005\uffaf\006\uffaf\007\uffaf\011" +
    "\uffaf\014\uffaf\015\uffaf\026\uffaf\032\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\071\uffaf\072\uffaf\101\uffaf\102\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\111\uffaf\112\uffaf\113\uffaf\114" +
    "\uffaf\115\uffaf\116\uffaf\001\002\000\050\007\uffe2\011\uffe2" +
    "\014\uffe2\015\uffe2\026\uffe2\032\uffe2\051\uffe2\053\uffe2\072" +
    "\uffe2\101\uffe2\104\uffe2\105\uffe2\106\uffe2\111\uffe2\112\uffe2" +
    "\113\uffe2\114\uffe2\115\uffe2\116\uffe2\001\002\000\060\005" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\014\uffe0\015\uffe0\026\uffe0" +
    "\032\uffe0\051\uffe0\053\uffe0\071\uffe0\072\uffe0\101\uffe0\102" +
    "\uffe0\104\uffe0\105\uffe0\106\uffe0\111\uffe0\112\uffe0\113\uffe0" +
    "\114\uffe0\115\uffe0\116\uffe0\001\002\000\014\053\072\101" +
    "\117\104\052\105\075\106\062\001\002\000\060\005\uffab" +
    "\006\uffab\007\uffab\011\uffab\014\uffab\015\uffab\026\uffab\032" +
    "\uffab\051\uffab\053\uffab\071\uffab\072\uffab\101\uffab\102\uffab" +
    "\104\uffab\105\uffab\106\uffab\111\uffab\112\uffab\113\uffab\114" +
    "\uffab\115\uffab\116\uffab\001\002\000\066\007\uffe9\011\uffe9" +
    "\014\uffe9\015\uffe9\026\uffe9\032\uffe9\051\uffe9\052\111\053" +
    "\112\060\114\061\105\062\106\063\110\064\113\065\107" +
    "\072\uffe9\101\uffe9\104\uffe9\105\uffe9\106\uffe9\111\uffe9\112" +
    "\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\001\002\000\102" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\014\uffe5\015\uffe5\026" +
    "\uffe5\032\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\071" +
    "\uffe5\072\uffe5\101\uffe5\102\uffe5\104\uffe5\105\uffe5\106\uffe5" +
    "\111\uffe5\112\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5\001" +
    "\002\000\004\101\100\001\002\000\004\101\uffb7\001\002" +
    "\000\032\007\051\053\072\101\056\104\052\105\075\106" +
    "\062\111\055\112\071\113\057\114\053\115\046\116\077" +
    "\001\002\000\004\102\151\001\002\000\046\007\uffbc\011" +
    "\uffbc\014\uffbc\015\uffbc\051\uffbc\053\uffbc\071\uffbc\101\uffbc" +
    "\102\uffbc\104\uffbc\105\uffbc\106\uffbc\111\uffbc\112\uffbc\113" +
    "\uffbc\114\uffbc\115\uffbc\116\uffbc\001\002\000\052\005\142" +
    "\006\143\007\uffbd\011\uffbd\014\uffbd\015\uffbd\051\uffbd\053" +
    "\uffbd\071\uffbd\101\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\001" +
    "\002\000\064\007\uffbe\011\uffbe\014\uffbe\015\uffbe\051\uffbe" +
    "\052\111\053\112\060\114\061\105\062\106\063\110\064" +
    "\113\065\107\071\uffbe\101\uffbe\102\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\116" +
    "\uffbe\001\002\000\016\003\140\053\072\101\117\104\052" +
    "\105\075\106\062\001\002\000\016\003\136\053\072\101" +
    "\117\104\052\105\075\106\062\001\002\000\016\003\134" +
    "\053\072\101\117\104\052\105\075\106\062\001\002\000" +
    "\016\003\132\053\072\101\117\104\052\105\075\106\062" +
    "\001\002\000\014\053\072\101\117\104\052\105\075\106" +
    "\062\001\002\000\014\053\072\101\117\104\052\105\075" +
    "\106\062\001\002\000\016\003\122\053\072\101\117\104" +
    "\052\105\075\106\062\001\002\000\016\003\115\053\072" +
    "\101\117\104\052\105\075\106\062\001\002\000\060\005" +
    "\uff9d\006\uff9d\007\uff9d\011\uff9d\014\uff9d\015\uff9d\026\uff9d" +
    "\032\uff9d\051\uff9d\053\uff9d\071\uff9d\072\uff9d\101\uff9d\102" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\111\uff9d\112\uff9d\113\uff9d" +
    "\114\uff9d\115\uff9d\116\uff9d\001\002\000\062\005\uffa5\006" +
    "\uffa5\007\uffa5\011\uffa5\014\uffa5\015\uffa5\026\uffa5\032\uffa5" +
    "\051\uffa5\052\111\053\112\071\uffa5\072\uffa5\101\uffa5\102" +
    "\uffa5\104\uffa5\105\uffa5\106\uffa5\111\uffa5\112\uffa5\113\uffa5" +
    "\114\uffa5\115\uffa5\116\uffa5\001\002\000\014\053\072\101" +
    "\117\104\052\105\075\106\062\001\002\000\010\052\111" +
    "\053\112\102\121\001\002\000\102\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\014\uffac\015\uffac\026\uffac\032\uffac\051\uffac" +
    "\052\uffac\053\uffac\055\uffac\056\uffac\060\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\065\uffac\071\uffac\072\uffac\101\uffac" +
    "\102\uffac\104\uffac\105\uffac\106\uffac\111\uffac\112\uffac\113" +
    "\uffac\114\uffac\115\uffac\116\uffac\001\002\000\060\005\uff98" +
    "\006\uff98\007\uff98\011\uff98\014\uff98\015\uff98\026\uff98\032" +
    "\uff98\051\uff98\053\uff98\071\uff98\072\uff98\101\uff98\102\uff98" +
    "\104\uff98\105\uff98\106\uff98\111\uff98\112\uff98\113\uff98\114" +
    "\uff98\115\uff98\116\uff98\001\002\000\062\005\uffa0\006\uffa0" +
    "\007\uffa0\011\uffa0\014\uffa0\015\uffa0\026\uffa0\032\uffa0\051" +
    "\uffa0\052\111\053\112\071\uffa0\072\uffa0\101\uffa0\102\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\111\uffa0\112\uffa0\113\uffa0\114" +
    "\uffa0\115\uffa0\116\uffa0\001\002\000\102\005\uffb3\006\uffb3" +
    "\007\uffb3\011\uffb3\014\uffb3\015\uffb3\026\uffb3\032\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\055\126\056\125\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\071\uffb3\072\uffb3\101" +
    "\uffb3\102\uffb3\104\uffb3\105\uffb3\106\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\114\uffb3\115\uffb3\116\uffb3\001\002\000\014\053" +
    "\072\101\117\104\052\105\075\106\062\001\002\000\014" +
    "\053\072\101\117\104\052\105\075\106\062\001\002\000" +
    "\102\005\uffb1\006\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1" +
    "\026\uffb1\032\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\071\uffb1\072\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1" +
    "\001\002\000\102\005\uffb0\006\uffb0\007\uffb0\011\uffb0\014" +
    "\uffb0\015\uffb0\026\uffb0\032\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\071\uffb0\072\uffb0\101\uffb0\102\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115" +
    "\uffb0\116\uffb0\001\002\000\102\005\uffb4\006\uffb4\007\uffb4" +
    "\011\uffb4\014\uffb4\015\uffb4\026\uffb4\032\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\055\126\056\125\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\071\uffb4\072\uffb4\101\uffb4\102" +
    "\uffb4\104\uffb4\105\uffb4\106\uffb4\111\uffb4\112\uffb4\113\uffb4" +
    "\114\uffb4\115\uffb4\116\uffb4\001\002\000\060\005\uff9b\006" +
    "\uff9b\007\uff9b\011\uff9b\014\uff9b\015\uff9b\026\uff9b\032\uff9b" +
    "\051\uff9b\053\uff9b\071\uff9b\072\uff9b\101\uff9b\102\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b" +
    "\115\uff9b\116\uff9b\001\002\000\062\005\uffa3\006\uffa3\007" +
    "\uffa3\011\uffa3\014\uffa3\015\uffa3\026\uffa3\032\uffa3\051\uffa3" +
    "\052\111\053\112\071\uffa3\072\uffa3\101\uffa3\102\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3" +
    "\115\uffa3\116\uffa3\001\002\000\060\005\uff99\006\uff99\007" +
    "\uff99\011\uff99\014\uff99\015\uff99\026\uff99\032\uff99\051\uff99" +
    "\053\uff99\071\uff99\072\uff99\101\uff99\102\uff99\104\uff99\105" +
    "\uff99\106\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99" +
    "\116\uff99\001\002\000\062\005\uffa1\006\uffa1\007\uffa1\011" +
    "\uffa1\014\uffa1\015\uffa1\026\uffa1\032\uffa1\051\uffa1\052\111" +
    "\053\112\071\uffa1\072\uffa1\101\uffa1\102\uffa1\104\uffa1\105" +
    "\uffa1\106\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1" +
    "\116\uffa1\001\002\000\060\005\uff9a\006\uff9a\007\uff9a\011" +
    "\uff9a\014\uff9a\015\uff9a\026\uff9a\032\uff9a\051\uff9a\053\uff9a" +
    "\071\uff9a\072\uff9a\101\uff9a\102\uff9a\104\uff9a\105\uff9a\106" +
    "\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a" +
    "\001\002\000\062\005\uffa2\006\uffa2\007\uffa2\011\uffa2\014" +
    "\uffa2\015\uffa2\026\uffa2\032\uffa2\051\uffa2\052\111\053\112" +
    "\071\uffa2\072\uffa2\101\uffa2\102\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2" +
    "\001\002\000\060\005\uff9c\006\uff9c\007\uff9c\011\uff9c\014" +
    "\uff9c\015\uff9c\026\uff9c\032\uff9c\051\uff9c\053\uff9c\071\uff9c" +
    "\072\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c\111" +
    "\uff9c\112\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c\001\002" +
    "\000\062\005\uffa4\006\uffa4\007\uffa4\011\uffa4\014\uffa4\015" +
    "\uffa4\026\uffa4\032\uffa4\051\uffa4\052\111\053\112\071\uffa4" +
    "\072\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\111" +
    "\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\001\002" +
    "\000\024\003\150\007\051\053\072\101\056\104\052\105" +
    "\075\106\062\111\055\112\071\001\002\000\024\003\145" +
    "\007\051\053\072\101\056\104\052\105\075\106\062\111" +
    "\055\112\071\001\002\000\060\005\uffa9\006\uffa9\007\uffa9" +
    "\011\uffa9\014\uffa9\015\uffa9\026\uffa9\032\uffa9\051\uffa9\053" +
    "\uffa9\071\uffa9\072\uffa9\101\uffa9\102\uffa9\104\uffa9\105\uffa9" +
    "\106\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116" +
    "\uffa9\001\002\000\060\005\uffa7\006\uffa7\007\uffa7\011\uffa7" +
    "\014\uffa7\015\uffa7\026\uffa7\032\uffa7\051\uffa7\053\uffa7\071" +
    "\uffa7\072\uffa7\101\uffa7\102\uffa7\104\uffa7\105\uffa7\106\uffa7" +
    "\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7\001" +
    "\002\000\022\052\111\053\112\060\114\061\105\062\106" +
    "\063\110\064\113\065\107\001\002\000\060\005\uffaa\006" +
    "\uffaa\007\uffaa\011\uffaa\014\uffaa\015\uffaa\026\uffaa\032\uffaa" +
    "\051\uffaa\053\uffaa\071\uffaa\072\uffaa\101\uffaa\102\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa" +
    "\115\uffaa\116\uffaa\001\002\000\060\005\uffa8\006\uffa8\007" +
    "\uffa8\011\uffa8\014\uffa8\015\uffa8\026\uffa8\032\uffa8\051\uffa8" +
    "\053\uffa8\071\uffa8\072\uffa8\101\uffa8\102\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8" +
    "\116\uffa8\001\002\000\054\007\uffbb\011\uffbb\014\uffbb\015" +
    "\uffbb\026\uffbb\032\uffbb\051\uffbb\053\uffbb\071\uffbb\072\uffbb" +
    "\101\uffbb\102\uffbb\104\uffbb\105\uffbb\106\uffbb\111\uffbb\112" +
    "\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb\001\002\000\102" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\014\uffae\015\uffae\026" +
    "\uffae\032\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\071" +
    "\uffae\072\uffae\101\uffae\102\uffae\104\uffae\105\uffae\106\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\001" +
    "\002\000\010\005\142\006\143\102\155\001\002\000\024" +
    "\052\111\053\112\060\114\061\105\062\106\063\110\064" +
    "\113\065\107\102\121\001\002\000\060\005\uff9e\006\uff9e" +
    "\007\uff9e\011\uff9e\014\uff9e\015\uff9e\026\uff9e\032\uff9e\051" +
    "\uff9e\053\uff9e\071\uff9e\072\uff9e\101\uff9e\102\uff9e\104\uff9e" +
    "\105\uff9e\106\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115" +
    "\uff9e\116\uff9e\001\002\000\060\005\uff9f\006\uff9f\007\uff9f" +
    "\011\uff9f\014\uff9f\015\uff9f\026\uff9f\032\uff9f\051\uff9f\053" +
    "\uff9f\071\uff9f\072\uff9f\101\uff9f\102\uff9f\104\uff9f\105\uff9f" +
    "\106\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\116" +
    "\uff9f\001\002\000\004\104\160\001\002\000\004\057\161" +
    "\001\002\000\036\007\051\053\072\101\056\104\052\105" +
    "\075\106\062\107\060\110\070\111\055\112\071\113\057" +
    "\114\053\115\046\116\077\001\002\000\012\026\ufff1\051" +
    "\ufff1\072\ufff1\104\ufff1\001\002\000\004\101\164\001\002" +
    "\000\010\003\167\102\165\104\171\001\002\000\004\071" +
    "\265\001\002\000\010\003\175\072\173\102\174\001\002" +
    "\000\004\102\172\001\002\000\010\003\uffc2\072\uffc2\102" +
    "\uffc2\001\002\000\010\003\uffbf\072\uffbf\102\uffbf\001\002" +
    "\000\010\026\uffc3\051\uffc3\104\uffc3\001\002\000\004\104" +
    "\171\001\002\000\004\071\176\001\002\000\010\003\uffc0" +
    "\072\uffc0\102\uffc0\001\002\000\004\050\177\001\002\000" +
    "\042\007\051\011\211\014\202\015\214\020\206\053\072" +
    "\101\056\104\217\105\075\106\062\111\055\112\071\113" +
    "\057\114\053\115\046\116\077\001\002\000\044\007\ufff7" +
    "\011\ufff7\014\ufff7\015\ufff7\051\ufff7\053\ufff7\072\260\101" +
    "\ufff7\104\ufff7\105\ufff7\106\ufff7\111\ufff7\112\ufff7\113\ufff7" +
    "\114\ufff7\115\ufff7\116\ufff7\001\002\000\042\007\uffd1\011" +
    "\uffd1\014\uffd1\015\uffd1\051\uffd1\053\uffd1\101\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115" +
    "\uffd1\116\uffd1\001\002\000\004\104\245\001\002\000\004" +
    "\051\244\001\002\000\042\007\uffd2\011\uffd2\014\uffd2\015" +
    "\uffd2\051\uffd2\053\uffd2\101\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\114\uffd2\115\uffd2\116\uffd2\001" +
    "\002\000\042\007\uffdf\011\uffdf\014\uffdf\015\uffdf\051\uffdf" +
    "\053\uffdf\101\uffdf\104\uffdf\105\uffdf\106\uffdf\111\uffdf\112" +
    "\uffdf\113\uffdf\114\uffdf\115\uffdf\116\uffdf\001\002\000\004" +
    "\051\243\001\002\000\044\007\ufff5\011\ufff5\014\ufff5\015" +
    "\ufff5\051\ufff5\053\ufff5\072\ufff5\101\ufff5\104\ufff5\105\ufff5" +
    "\106\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\115\ufff5\116" +
    "\ufff5\001\002\000\042\007\051\011\211\014\202\015\214" +
    "\051\uffd6\053\072\101\056\104\217\105\075\106\062\111" +
    "\055\112\071\113\057\114\053\115\046\116\077\001\002" +
    "\000\032\007\051\053\072\101\056\104\052\105\075\106" +
    "\062\111\055\112\071\113\057\114\053\115\046\116\077" +
    "\001\002\000\042\007\uffdd\011\uffdd\014\uffdd\015\uffdd\051" +
    "\uffdd\053\uffdd\101\uffdd\104\uffdd\105\uffdd\106\uffdd\111\uffdd" +
    "\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116\uffdd\001\002\000" +
    "\042\007\uffd3\011\uffd3\014\uffd3\015\uffd3\051\uffd3\053\uffd3" +
    "\101\uffd3\104\uffd3\105\uffd3\106\uffd3\111\uffd3\112\uffd3\113" +
    "\uffd3\114\uffd3\115\uffd3\116\uffd3\001\002\000\032\007\051" +
    "\053\072\101\056\104\052\105\075\106\062\111\055\112" +
    "\071\113\057\114\053\115\046\116\077\001\002\000\042" +
    "\007\uffd5\011\uffd5\014\uffd5\015\uffd5\051\uffd5\053\uffd5\101" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\111\uffd5\112\uffd5\113\uffd5" +
    "\114\uffd5\115\uffd5\116\uffd5\001\002\000\042\007\uffde\011" +
    "\uffde\014\uffde\015\uffde\051\uffde\053\uffde\101\uffde\104\uffde" +
    "\105\uffde\106\uffde\111\uffde\112\uffde\113\uffde\114\uffde\115" +
    "\uffde\116\uffde\001\002\000\066\007\uffb6\011\uffb6\014\uffb6" +
    "\015\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057" +
    "\220\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\101\uffb6\104\uffb6\105\uffb6\106\uffb6\111\uffb6\112\uffb6\113" +
    "\uffb6\114\uffb6\115\uffb6\116\uffb6\001\002\000\036\007\051" +
    "\053\072\101\056\104\052\105\075\106\062\107\060\110" +
    "\070\111\055\112\071\113\057\114\053\115\046\116\077" +
    "\001\002\000\044\007\ufff6\011\ufff6\014\ufff6\015\ufff6\051" +
    "\ufff6\053\ufff6\072\ufff6\101\ufff6\104\ufff6\105\ufff6\106\ufff6" +
    "\111\ufff6\112\ufff6\113\ufff6\114\ufff6\115\ufff6\116\ufff6\001" +
    "\002\000\004\071\223\001\002\000\006\003\224\050\225" +
    "\001\002\000\042\007\uffd9\011\uffd9\014\uffd9\015\uffd9\051" +
    "\uffd9\053\uffd9\101\uffd9\104\uffd9\105\uffd9\106\uffd9\111\uffd9" +
    "\112\uffd9\113\uffd9\114\uffd9\115\uffd9\116\uffd9\001\002\000" +
    "\040\007\051\011\211\014\202\015\214\053\072\101\056" +
    "\104\217\105\075\106\062\111\055\112\071\113\057\114" +
    "\053\115\046\116\077\001\002\000\004\051\227\001\002" +
    "\000\042\007\uffda\011\uffda\014\uffda\015\uffda\051\uffda\053" +
    "\uffda\101\uffda\104\uffda\105\uffda\106\uffda\111\uffda\112\uffda" +
    "\113\uffda\114\uffda\115\uffda\116\uffda\001\002\000\004\071" +
    "\231\001\002\000\004\050\232\001\002\000\040\007\051" +
    "\011\211\014\202\015\214\053\072\101\056\104\217\105" +
    "\075\106\062\111\055\112\071\113\057\114\053\115\046" +
    "\116\077\001\002\000\004\051\234\001\002\000\044\007" +
    "\uffdb\011\uffdb\012\235\014\uffdb\015\uffdb\051\uffdb\053\uffdb" +
    "\101\uffdb\104\uffdb\105\uffdb\106\uffdb\111\uffdb\112\uffdb\113" +
    "\uffdb\114\uffdb\115\uffdb\116\uffdb\001\002\000\004\071\236" +
    "\001\002\000\004\050\237\001\002\000\040\007\051\011" +
    "\211\014\202\015\214\053\072\101\056\104\217\105\075" +
    "\106\062\111\055\112\071\113\057\114\053\115\046\116" +
    "\077\001\002\000\004\051\241\001\002\000\042\007\uffdc" +
    "\011\uffdc\014\uffdc\015\uffdc\051\uffdc\053\uffdc\101\uffdc\104" +
    "\uffdc\105\uffdc\106\uffdc\111\uffdc\112\uffdc\113\uffdc\114\uffdc" +
    "\115\uffdc\116\uffdc\001\002\000\042\007\uffd4\011\uffd4\014" +
    "\uffd4\015\uffd4\051\uffd4\053\uffd4\101\uffd4\104\uffd4\105\uffd4" +
    "\106\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4\115\uffd4\116" +
    "\uffd4\001\002\000\010\026\uffc4\051\uffc4\104\uffc4\001\002" +
    "\000\010\026\uffc7\051\uffc7\104\uffc7\001\002\000\004\046" +
    "\246\001\002\000\004\047\247\001\002\000\004\101\250" +
    "\001\002\000\006\105\075\106\062\001\002\000\004\102" +
    "\252\001\002\000\004\071\253\001\002\000\006\003\254" +
    "\050\255\001\002\000\042\007\uffd7\011\uffd7\014\uffd7\015" +
    "\uffd7\051\uffd7\053\uffd7\101\uffd7\104\uffd7\105\uffd7\106\uffd7" +
    "\111\uffd7\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\001" +
    "\002\000\040\007\051\011\211\014\202\015\214\053\072" +
    "\101\056\104\217\105\075\106\062\111\055\112\071\113" +
    "\057\114\053\115\046\116\077\001\002\000\004\051\257" +
    "\001\002\000\042\007\uffd8\011\uffd8\014\uffd8\015\uffd8\051" +
    "\uffd8\053\uffd8\101\uffd8\104\uffd8\105\uffd8\106\uffd8\111\uffd8" +
    "\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116\uffd8\001\002\000" +
    "\004\104\261\001\002\000\004\057\262\001\002\000\036" +
    "\007\051\053\072\101\056\104\052\105\075\106\062\107" +
    "\060\110\070\111\055\112\071\113\057\114\053\115\046" +
    "\116\077\001\002\000\044\007\ufff4\011\ufff4\014\ufff4\015" +
    "\ufff4\051\ufff4\053\ufff4\072\ufff4\101\ufff4\104\ufff4\105\ufff4" +
    "\106\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4\115\ufff4\116" +
    "\ufff4\001\002\000\010\003\uffc1\072\uffc1\102\uffc1\001\002" +
    "\000\004\050\266\001\002\000\042\007\051\011\211\014" +
    "\202\015\214\020\270\053\072\101\056\104\217\105\075" +
    "\106\062\111\055\112\071\113\057\114\053\115\046\116" +
    "\077\001\002\000\004\051\272\001\002\000\004\051\271" +
    "\001\002\000\010\026\uffc5\051\uffc5\104\uffc5\001\002\000" +
    "\010\026\uffc6\051\uffc6\104\uffc6\001\002\000\006\002\uffcd" +
    "\032\uffcd\001\002\000\036\007\051\053\072\101\056\104" +
    "\052\105\075\106\062\107\060\110\070\111\055\112\071" +
    "\113\057\114\053\115\046\116\077\001\002\000\006\032" +
    "\ufff0\072\ufff0\001\002\000\004\104\277\001\002\000\004" +
    "\057\300\001\002\000\036\007\051\053\072\101\056\104" +
    "\052\105\075\106\062\107\060\110\070\111\055\112\071" +
    "\113\057\114\053\115\046\116\077\001\002\000\006\032" +
    "\uffee\072\uffee\001\002\000\004\002\001\001\002\000\010" +
    "\032\uffff\067\014\104\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\005\005\066\004\001\001\000\004\013" +
    "\302\001\001\000\002\001\001\000\010\006\020\007\015" +
    "\010\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\022\032\023" +
    "\001\001\000\002\001\001\000\004\032\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\033" +
    "\041\034\037\041\034\042\033\043\032\044\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\034\037\041\043\042\033\043\032\044" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\051\075\052\060\054\073\055\062\056\063\057\046\060" +
    "\053\061\047\062\064\063\072\064\065\065\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\054\145\055\062\056\063\060\053\061\047\063\155" +
    "\065\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\054\153\055\062" +
    "\056\063\060\053\061\047\063\072\064\152\065\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\056\151\061\047\065" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\051" +
    "\075\053\100\054\103\055\062\056\063\060\053\061\047" +
    "\062\101\063\072\064\102\065\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\054\140\055\062\056\063\061\047\065\066\001" +
    "\001\000\014\054\136\055\062\056\063\061\047\065\066" +
    "\001\001\000\014\054\134\055\062\056\063\061\047\065" +
    "\066\001\001\000\014\054\132\055\062\056\063\061\047" +
    "\065\066\001\001\000\012\055\130\056\063\061\047\065" +
    "\066\001\001\000\012\055\123\056\063\061\047\065\066" +
    "\001\001\000\014\054\122\055\062\056\063\061\047\065" +
    "\066\001\001\000\014\054\115\055\062\056\063\061\047" +
    "\065\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\054\117\055\062\056\063\061\047\065\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\056\127\061\047" +
    "\065\066\001\001\000\010\056\126\061\047\065\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\054\145\055\062\056" +
    "\063\060\053\061\047\063\146\065\066\001\001\000\020" +
    "\054\145\055\062\056\063\060\053\061\047\063\143\065" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\051\075\052\161\054\073\055\062" +
    "\056\063\057\046\060\053\061\047\062\064\063\072\064" +
    "\065\065\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\165\040\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\015\203\016\204\017\215\020\211\021\202\022\207\023" +
    "\214\046\206\047\177\050\200\051\075\053\212\054\103" +
    "\055\062\056\063\060\053\061\047\062\101\063\072\064" +
    "\102\065\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\015\203\016\204\017\215\020\211\023\241\046\206\047" +
    "\177\050\200\051\075\053\212\054\103\055\062\056\063" +
    "\060\053\061\047\062\101\063\072\064\102\065\066\001" +
    "\001\000\030\051\075\053\227\054\103\055\062\056\063" +
    "\060\053\061\047\062\101\063\072\064\102\065\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\051\075" +
    "\053\221\054\103\055\062\056\063\060\053\061\047\062" +
    "\101\063\072\064\102\065\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\051\075\052" +
    "\220\054\073\055\062\056\063\057\046\060\053\061\047" +
    "\062\064\063\072\064\065\065\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\015\203\016\204\017\215\020\211\021\225\022" +
    "\207\023\214\046\206\047\177\050\200\051\075\053\212" +
    "\054\103\055\062\056\063\060\053\061\047\062\101\063" +
    "\072\064\102\065\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\015" +
    "\203\016\204\017\215\020\211\021\232\022\207\023\214" +
    "\046\206\047\177\050\200\051\075\053\212\054\103\055" +
    "\062\056\063\060\053\061\047\062\101\063\072\064\102" +
    "\065\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\015\203\016\204" +
    "\017\215\020\211\021\237\022\207\023\214\046\206\047" +
    "\177\050\200\051\075\053\212\054\103\055\062\056\063" +
    "\060\053\061\047\062\101\063\072\064\102\065\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\015\203\016\204\017\215\020\211" +
    "\021\255\022\207\023\214\046\206\047\177\050\200\051" +
    "\075\053\212\054\103\055\062\056\063\060\053\061\047" +
    "\062\101\063\072\064\102\065\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\051\075\052\262\054\073\055\062\056\063\057" +
    "\046\060\053\061\047\062\064\063\072\064\065\065\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\015\203\016\204\017\215\020\211\021\266" +
    "\022\207\023\214\046\206\047\177\050\200\051\075\053" +
    "\212\054\103\055\062\056\063\060\053\061\047\062\101" +
    "\063\072\064\102\065\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\051\075\052\274\054\073\055\062\056" +
    "\063\057\046\060\053\061\047\062\064\063\072\064\065" +
    "\065\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\051\075\052\300\054\073\055\062" +
    "\056\063\057\046\060\053\061\047\062\064\063\072\064" +
    "\065\065\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;
    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }
    public void agregarVariable(String id, String tipo, String valor, String contexto) {
        final String RESET = "\033[0m";
        final String ROJO = "\033[31m";
        final String VERDE = "\033[32m";
        final String AMARILLO = "\033[33m";

        if (tipo.equals("variable")) {
            Simbolo variable_simbolo = tabla.obtenerSimbolo(valor);
            if (variable_simbolo != null) {
                tipo = variable_simbolo.getTipo();
                valor = variable_simbolo.getValor();
                Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
                if (tabla.agregar(id, simbolo)) {
                    System.out.println(VERDE + "--------Variable agregada con referencia--------> "  + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
                    //System.out.println(tabla.mostrar());
                    return;
                }
            } else {
                System.out.println(ROJO + "-------Variable NO agregada, no se encuentra la variable referenciada-------> " + id + RESET);
                return;
            }
        }

        Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
        if (tabla.agregar(id, simbolo)) {
            System.out.println(VERDE + "--------Variable agregada--------> " + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
            //System.out.println(tabla.mostrar());
        } else {
            System.out.println(ROJO + "-------Variable NO agregada-------> " + id + RESET);
        }
    }
    public String[] realizarCasting(String tipoCast, String[] valor) {
        if (valor == null || valor.length < 2) {
            return new String[]{"", ""};
        }

        String tipoOriginal = valor[0];
        String val = valor[1].toString().replaceAll("^['\"]|['\"]$", "");

        try {
            switch (tipoCast) {
                case "int":
                    if (tipoOriginal.equals("int")) {
                        return valor; // No need to cast
                    } else if (tipoOriginal.equals("float")) {
                        return new String[]{"int", String.valueOf((int)Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        // Try to parse string as number
                        return new String[]{"int", String.valueOf(Integer.parseInt(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"int", val.equals("true") ? "1" : "0"};
                    }
                    break;

                case "float":
                    if (tipoOriginal.equals("float")) {
                        return valor;
                    } else if (tipoOriginal.equals("int")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"float", val.equals("true") ? "1.0" : "0.0"};
                    }
                    break;

                case "str":
                    return new String[]{"string", val};


                case "bool":
                    if (tipoOriginal.equals("boolean")) {
                        return valor;
                    } else if (tipoOriginal.equals("int") || tipoOriginal.equals("float")) {
                        boolean isNonZero = tipoOriginal.equals("int") ?
                            Integer.parseInt(val) != 0 : Float.parseFloat(val) != 0.0f;
                        return new String[]{"boolean", String.valueOf(isNonZero)};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"boolean", String.valueOf(!val.isEmpty())};
                    }
                    break;
            }
        } catch (NumberFormatException e) {
            System.err.println("Error de casting: no se puede convertir " + val + " a " + tipoCast);
        }

        return new String[]{"", ""};
    }

     public String[] handleComparison(String[] e1, String[] e2, String operator) {
            if (e1 == null || e2 == null || e1.length < 2 || e2.length < 2) {
                return new String[]{"", ""};
            }

            switch (operator) {
                case "==":
                case "!=":
                    if (e1[0].equals(e2[0])) {
                        boolean result = operator.equals("==") ?
                            e1[1].equals(e2[1]) : !e1[1].equals(e2[1]);
                        System.out.println("Comparación de " + (operator.equals("==") ? "igualdad" : "desigualdad") +
                                         " entre tipos compatibles: " + e1[0]);
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;

                case ">":
                case "<":
                case ">=":
                case "<=":
                    if ((e1[0].equals("int") || e1[0].equals("float")) &&
                        (e2[0].equals("int") || e2[0].equals("float"))) {
                        float val1 = Float.parseFloat(e1[1]);
                        float val2 = Float.parseFloat(e2[1]);
                        boolean result = false;

                        switch (operator) {
                            case ">": result = val1 > val2; break;
                            case "<": result = val1 < val2; break;
                            case ">=": result = val1 >= val2; break;
                            case "<=": result = val1 <= val2; break;
                        }

                        System.out.println("Comparacion " + operator + " entre numeros");
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;
            }

            System.out.println("\033[31mError: No se pueden comparar " + e1[0] + " con " + e2[0] +
                             " usando " + operator + "\033[0m");
            return new String[]{"", ""};
        }

        public String[] handleNotOperation(String[] tl) {
            if (tl != null && tl.length >= 2 && tl[0].equals("boolean")) {
                return new String[]{"boolean", String.valueOf(!Boolean.parseBoolean(tl[1]))};
            }
            System.out.println("\033[31mError: Operador NOT requiere un operando booleano\033[0m");
            return new String[]{"", ""};
        }

         public String[] handleLogicalOperation(String[] el, String[] tl, String operator) {
             if (el == null || tl == null || el.length < 2 || tl.length < 2) {
                 return new String[]{"", ""};
             }

             if (!el[0].equals("boolean") || !tl[0].equals("boolean")) {
                 System.out.println("\033[31mError: Operador " + operator + " requiere operandos booleanos\033[0m");
                 return new String[]{"", ""};
             }

             boolean val1 = Boolean.parseBoolean(el[1]);
             boolean val2 = Boolean.parseBoolean(tl[1]);
             boolean result = false;

             switch (operator) {
                 case "AND":
                     result = val1 && val2;
                     System.out.println("Operacion logica AND entre " + val1 + " y " + val2);
                     break;
                 case "OR":
                     result = val1 || val2;
                     System.out.println("Operacion logica OR entre " + val1 + " y " + val2);
                     break;
             }

             return new String[]{"boolean", String.valueOf(result)};
         }

         public void handleLogicalError(String operator) {
             System.out.println("\033[31mExpresion logica(" + operator + "), ERROR: Se esperaba un termino logico\033[0m");
         }

    public String[] handleArithmeticOperation(String[] e, String[] t, String operator) {
        if (e == null || t == null || e.length < 2 || t.length < 2) {
            return new String[]{"", ""};
        }

        // Checar si ambos son numeros
        boolean eIsNumber = e[0].equals("int") || e[0].equals("float");
        boolean tIsNumber = t[0].equals("int") || t[0].equals("float");

        if (!eIsNumber || !tIsNumber) {
            System.out.println("\033[31mError: Operador " + operator + " requiere operandos numericos\033[0m");
            return new String[]{"", ""};
        }

        // Para division siempre hacer float
        if (operator.equals("/")) {
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            if (val2 == 0) {
                System.out.println("\033[31mError: Division por cero\033[0m");
                return new String[]{"", ""};
            }
            return new String[]{"float", String.valueOf(val1 / val2)};
        }

        if (e[0].equals(t[0])) {
            if (e[0].equals("int")) {
                int val1 = Integer.parseInt(e[1]);
                int val2 = Integer.parseInt(t[1]);
                switch (operator) {
                    case "+": return new String[]{"int", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"int", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"int", String.valueOf(val1 * val2)};
                }
            } else { // float
                float val1 = Float.parseFloat(e[1]);
                float val2 = Float.parseFloat(t[1]);
                switch (operator) {
                    case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"float", String.valueOf(val1 * val2)};
                }
            }
        } else {
            // tipos mezclados int y float convertir a float
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            switch (operator) {
                case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                case "*": return new String[]{"float", String.valueOf(val1 * val2)};
            }
        }

        return new String[]{"", ""};
    }

    public void logArithmeticOperation(String operator, String[] e, String[] t, String[] result) {
        if (result != null && result.length >= 2 && !result[0].isEmpty()) {
            System.out.println("Operacion " + operator + " entre " +
                             e[0] + "(" + e[1] + ") y " +
                             t[0] + "(" + t[1] + ") = " +
                             result[0] + "(" + result[1] + ")");
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino_logico ::= LPAREN expresion_logica RPAREN 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = el; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // termino_logico ::= NOT termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleNotOperation(tl); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "!="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "=="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino_logico ::= booleano 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = b; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",49, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_logica ::= expresion_logica OR error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("OR"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_logica ::= expresion_logica AND error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("AND"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleLogicalOperation(el, tl, "OR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleLogicalOperation(el, tl, "AND"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_logica ::= termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = tl; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",50, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= numero 
            {
              String[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] n = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= MINUS factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        boolean isInt = f instanceof String[] && ((String[])f)[0].equals("int");
        boolean isFloat = f instanceof String[] && ((String[])f)[0].equals("float");
       if (isInt || isFloat) {
           try {
                if (isInt){
                    int val = Integer.parseInt(((String[])f)[1]);
                    RESULT = new String[]{"int", String.valueOf(-val)};
                }else{
                    float val = Float.parseFloat(((String[])f)[1]);
                    RESULT = new String[]{"float", String.valueOf(-val)};
                }
           } catch (NumberFormatException e) {
               RESULT = new String[]{"error", "Invalid number format"};
           }
       } else {
           System.out.println("Error: Cannot apply unary minus to non-numeric value");
           //RESULT = new String[]{"error", "Invalid operand for unary minus"};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= acceso_variable 
            {
              String[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] v = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = v; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino ::= termino DIVIDE factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "/");
      parser.logArithmeticOperation("division", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino ::= termino MULTIPLY factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "*");
      parser.logArithmeticOperation("multiplicacion", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino ::= factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "-");
      parser.logArithmeticOperation("resta", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "+");
      parser.logArithmeticOperation("suma", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_aritmetica ::= termino 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // acceso_variable ::= IDENTIFIER 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
       if(parser.tabla.verificar(id)) {
           Simbolo s = parser.tabla.obtenerSimbolo(id);
           RESULT = new String[]{s.getTipo(), s.getValor()};
       } else {
           System.out.println("Error: Variable '"+id+"' no definida");
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("acceso_variable",51, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // casting_funcion ::= CAST_BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // casting_funcion ::= CAST_STR 
            {
              Object RESULT =null;
		 RESULT = "str"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // casting_funcion ::= CAST_FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // casting_funcion ::= CAST_INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamada_funcion ::= casting_funcion LPAREN expresion RPAREN 
            {
              String[] RESULT =null;
		int castTypeleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).left;
		int castTyperight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).right;
		Object castType = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] exp = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
       if (exp != null) {
           String[] resultado = parser.realizarCasting((String)castType, (String[])exp);
           if (resultado[0].isEmpty()) {
               System.out.println("\033[31m"+"Error: No se pudo realizar el casting de " + exp[1] + " a " + castType + "\033[0m");
           } else {
               System.out.println("Casting realizado: " + exp[1] + " -> " + resultado[1] + " (" + resultado[0] + ")");
           }
           RESULT = resultado;
       } else {
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("llamada_funcion",48, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		RESULT = f; System.out.println("Es una expresion que llama una FUNCION"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion_logica 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = el; System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] ea = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = ea; System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_cuerpo_clase ::= dec_variables_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= dec_variables_metodo 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion en metodo"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // booleano ::= FALSE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano False");
                RESULT = new String[]{"boolean",str.toString()};
            
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",46, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // booleano ::= TRUE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano True");
                RESULT = new String[]{"boolean",str.toString()};
             
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",46, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cadena ::= STRING_SIMPLE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena simple");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cadena ::= STRING 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numero ::= FLOAT 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: float");
        RESULT = new String[]{"float",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",47, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numero ::= INTEGER 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: entero");
        RESULT = new String[]{"int",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",47, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor_asignacion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor_asignacion ::= cadena 
            {
              String[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] c = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor_asignacion ::= expresion_logica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_asignacion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_var_multiple ::= dec_var_multiple COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "global");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_var_multiple ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_var_individual ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "global");
    } else {
        System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_var_multiple_clase ::= dec_var_multiple_clase COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "clase");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_var_multiple_clase ::= dec_var_individual_clase 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_var_individual_clase ::= IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    System.out.println("Asignacion detectada en clase: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "clase");
    } else {
        System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_var_multiple_metodo ::= dec_var_multiple_metodo COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Asignacion detectada en metodo: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_metodo",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_var_multiple_metodo ::= dec_var_individual_metodo 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple_metodo",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_var_individual_metodo ::= IDENTIFIER EQUAL valor_asignacion 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    System.out.println("Asignacion detectada en metodo: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    } else {
        System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual_metodo",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_variables_metodo ::= dec_var_multiple_metodo 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables_metodo",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_variables_clase ::= dec_var_multiple_clase 
            {
              String[] RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_variables ::= 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_variables ::= dec_var_multiple 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_importaciones ::= 
            {
              Object RESULT =null;
		 System.out.println("!!!!!!!!!!!!!!!DECLARACION DE IMPORTACION VACIA!!!!!!!!!!!!!!!"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= FROM IDENTIFIER IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion FROM"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= dec_importaciones dec_variables bloque_clases 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("programa",52, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

