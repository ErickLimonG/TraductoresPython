
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 04 21:55:42 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 04 21:55:42 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\056\004\000\002\005" +
    "\004\000\002\005\006\000\002\005\002\000\002\013\005" +
    "\000\002\013\003\000\002\006\003\000\002\007\005\000" +
    "\002\010\003\000\002\010\007\000\002\011\005\000\002" +
    "\011\005\000\002\012\005\000\002\012\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\052\003\000\002\052\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\015\000\002\016\010\000\002\017\010\000\002\017\006" +
    "\000\002\020\015\000\002\020\013\000\002\021\003\000" +
    "\002\022\003\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\031\003\000\002\031" +
    "\004\000\002\032\010\000\002\032\005\000\002\032\006" +
    "\000\002\033\003\000\002\033\004\000\002\041\003\000" +
    "\002\041\003\000\002\034\013\000\002\034\012\000\002" +
    "\034\012\000\002\034\013\000\002\034\007\000\002\036" +
    "\003\000\002\036\005\000\002\036\004\000\002\040\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\053\006\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\045\003\000\002\045" +
    "\005\000\002\045\005\000\002\046\003\000\002\046\005" +
    "\000\002\046\005\000\002\047\003\000\002\047\003\000" +
    "\002\047\005\000\002\055\003\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\054" +
    "\003\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\004\000\002\054\004\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\032\ufffd\033\004\034\007\001\002\000" +
    "\004\102\013\001\002\000\004\002\256\001\002\000\004" +
    "\032\016\001\002\000\004\102\010\001\002\000\004\033" +
    "\011\001\002\000\004\102\013\001\002\000\006\032\ufffe" +
    "\066\014\001\002\000\006\032\ufffb\066\ufffb\001\002\000" +
    "\004\102\015\001\002\000\006\032\ufffc\066\ufffc\001\002" +
    "\000\006\003\022\102\023\001\002\000\006\002\000\032" +
    "\016\001\002\000\006\002\uffd9\032\uffd9\001\002\000\006" +
    "\002\uffd8\032\uffd8\001\002\000\004\070\255\001\002\000" +
    "\004\070\024\001\002\000\006\003\025\050\026\001\002" +
    "\000\006\002\uffd5\032\uffd5\001\002\000\006\026\031\102" +
    "\034\001\002\000\044\007\ufff8\011\ufff8\014\ufff8\015\ufff8" +
    "\026\ufff8\051\ufff8\071\ufff8\100\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8" +
    "\001\002\000\010\026\uffd4\051\uffd4\102\uffd4\001\002\000" +
    "\004\102\155\001\002\000\044\007\ufffa\011\ufffa\014\ufffa" +
    "\015\ufffa\026\ufffa\051\ufffa\071\151\100\ufffa\102\ufffa\103" +
    "\ufffa\104\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa" +
    "\114\ufffa\001\002\000\010\026\uffd1\051\uffd1\102\uffd1\001" +
    "\002\000\004\056\041\001\002\000\010\026\uffd2\051\uffd2" +
    "\102\uffd2\001\002\000\010\026\031\051\037\102\034\001" +
    "\002\000\006\002\uffd7\032\uffd7\001\002\000\010\026\uffd3" +
    "\051\uffd3\102\uffd3\001\002\000\034\007\045\100\052\102" +
    "\046\103\067\104\056\105\055\106\063\107\051\110\064" +
    "\111\053\112\047\113\042\114\071\001\002\000\004\100" +
    "\uffc1\001\002\000\044\007\ufff0\011\ufff0\014\ufff0\015\ufff0" +
    "\026\ufff0\051\ufff0\071\ufff0\100\ufff0\102\ufff0\103\ufff0\104" +
    "\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\114\ufff0" +
    "\001\002\000\100\005\uffb8\006\uffb8\007\uffb8\011\uffb8\014" +
    "\uffb8\015\uffb8\026\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\070\uffb8\071\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\104\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114" +
    "\uffb8\001\002\000\020\007\045\100\052\102\046\103\067" +
    "\104\056\107\051\110\064\001\002\000\100\005\uffb9\006" +
    "\uffb9\007\uffb9\011\uffb9\014\uffb9\015\uffb9\026\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\070\uffb9\071\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\001\002\000\004\100\uffc2" +
    "\001\002\000\054\005\uffb1\006\uffb1\007\uffb1\011\uffb1\014" +
    "\uffb1\015\uffb1\026\uffb1\051\uffb1\070\uffb1\071\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\107\uffb1\110\uffb1\111" +
    "\uffb1\112\uffb1\113\uffb1\114\uffb1\001\002\000\054\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\014\uffea\015\uffea\026\uffea\051" +
    "\uffea\070\uffea\071\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea\114" +
    "\uffea\001\002\000\020\007\045\100\052\102\046\103\067" +
    "\104\056\107\051\110\064\001\002\000\004\100\uffc3\001" +
    "\002\000\044\007\ufff9\011\ufff9\014\ufff9\015\ufff9\026\ufff9" +
    "\051\ufff9\071\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\001\002" +
    "\000\044\007\uffec\011\uffec\014\uffec\015\uffec\026\uffec\051" +
    "\uffec\071\uffec\100\uffec\102\uffec\103\uffec\104\uffec\107\uffec" +
    "\110\uffec\111\uffec\112\uffec\113\uffec\114\uffec\001\002\000" +
    "\100\005\uffed\006\uffed\007\uffed\011\uffed\014\uffed\015\uffed" +
    "\026\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\070\uffed" +
    "\071\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\107" +
    "\uffed\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\001\002" +
    "\000\100\005\uffbc\006\uffbc\007\uffbc\011\uffbc\014\uffbc\015" +
    "\uffbc\026\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\070" +
    "\uffbc\071\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\001" +
    "\002\000\100\005\uffbf\006\uffbf\007\uffbf\011\uffbf\014\uffbf" +
    "\015\uffbf\026\uffbf\051\uffbf\052\uffbf\053\uffbf\054\120\055" +
    "\117\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\070\uffbf\071\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104" +
    "\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf" +
    "\001\002\000\044\007\uffef\011\uffef\014\uffef\015\uffef\026" +
    "\uffef\051\uffef\071\uffef\100\uffef\102\uffef\103\uffef\104\uffef" +
    "\107\uffef\110\uffef\111\uffef\112\uffef\113\uffef\114\uffef\001" +
    "\002\000\050\005\134\006\135\007\ufff1\011\ufff1\014\ufff1" +
    "\015\ufff1\026\ufff1\051\ufff1\071\ufff1\100\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1" +
    "\114\ufff1\001\002\000\044\007\uffeb\011\uffeb\014\uffeb\015" +
    "\uffeb\026\uffeb\051\uffeb\071\uffeb\100\uffeb\102\uffeb\103\uffeb" +
    "\104\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb\114" +
    "\uffeb\001\002\000\054\005\uffe9\006\uffe9\007\uffe9\011\uffe9" +
    "\014\uffe9\015\uffe9\026\uffe9\051\uffe9\070\uffe9\071\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\107\uffe9\110\uffe9" +
    "\111\uffe9\112\uffe9\113\uffe9\114\uffe9\001\002\000\054\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\014\uffb6\015\uffb6\026\uffb6" +
    "\051\uffb6\070\uffb6\071\uffb6\100\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\001\002\000\064\007\ufff2\011\ufff2\014\ufff2\015" +
    "\ufff2\026\ufff2\051\ufff2\052\101\053\104\057\105\060\077" +
    "\061\100\062\103\063\106\064\102\071\ufff2\100\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2" +
    "\113\ufff2\114\ufff2\001\002\000\100\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\014\uffee\015\uffee\026\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\070\uffee\071\uffee\100\uffee\101\uffee" +
    "\102\uffee\103\uffee\104\uffee\107\uffee\110\uffee\111\uffee\112" +
    "\uffee\113\uffee\114\uffee\001\002\000\004\100\072\001\002" +
    "\000\004\100\uffc0\001\002\000\030\007\045\100\052\102" +
    "\046\103\067\104\056\107\051\110\064\111\053\112\047" +
    "\113\042\114\071\001\002\000\004\101\143\001\002\000" +
    "\044\007\uffc5\011\uffc5\014\uffc5\015\uffc5\051\uffc5\070\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\001\002\000\050" +
    "\005\134\006\135\007\uffc6\011\uffc6\014\uffc6\015\uffc6\051" +
    "\uffc6\070\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\001" +
    "\002\000\064\007\uffc7\011\uffc7\014\uffc7\015\uffc7\051\uffc7" +
    "\052\101\053\104\057\105\060\077\061\100\062\103\063" +
    "\106\064\102\070\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\114" +
    "\uffc7\001\002\000\014\003\132\100\111\102\046\103\067" +
    "\104\056\001\002\000\014\003\130\100\111\102\046\103" +
    "\067\104\056\001\002\000\012\100\111\102\046\103\067" +
    "\104\056\001\002\000\014\003\125\100\111\102\046\103" +
    "\067\104\056\001\002\000\014\003\123\100\111\102\046" +
    "\103\067\104\056\001\002\000\012\100\111\102\046\103" +
    "\067\104\056\001\002\000\014\003\114\100\111\102\046" +
    "\103\067\104\056\001\002\000\014\003\107\100\111\102" +
    "\046\103\067\104\056\001\002\000\054\005\uffa2\006\uffa2" +
    "\007\uffa2\011\uffa2\014\uffa2\015\uffa2\026\uffa2\051\uffa2\070" +
    "\uffa2\071\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2" +
    "\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\001" +
    "\002\000\060\005\uffab\006\uffab\007\uffab\011\uffab\014\uffab" +
    "\015\uffab\026\uffab\051\uffab\052\101\053\104\070\uffab\071" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\107\uffab" +
    "\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001\002\000" +
    "\012\100\111\102\046\103\067\104\056\001\002\000\010" +
    "\052\101\053\104\101\113\001\002\000\100\005\uffb7\006" +
    "\uffb7\007\uffb7\011\uffb7\014\uffb7\015\uffb7\026\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\070\uffb7\071\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\103\uffb7\104\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\114\uffb7\001\002\000\054\005\uffa7" +
    "\006\uffa7\007\uffa7\011\uffa7\014\uffa7\015\uffa7\026\uffa7\051" +
    "\uffa7\070\uffa7\071\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114" +
    "\uffa7\001\002\000\060\005\uffb0\006\uffb0\007\uffb0\011\uffb0" +
    "\014\uffb0\015\uffb0\026\uffb0\051\uffb0\052\101\053\104\070" +
    "\uffb0\071\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\001" +
    "\002\000\100\005\uffbd\006\uffbd\007\uffbd\011\uffbd\014\uffbd" +
    "\015\uffbd\026\uffbd\051\uffbd\052\uffbd\053\uffbd\054\120\055" +
    "\117\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\070\uffbd\071\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd" +
    "\001\002\000\012\100\111\102\046\103\067\104\056\001" +
    "\002\000\012\100\111\102\046\103\067\104\056\001\002" +
    "\000\100\005\uffbb\006\uffbb\007\uffbb\011\uffbb\014\uffbb\015" +
    "\uffbb\026\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\070" +
    "\uffbb\071\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb" +
    "\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\001" +
    "\002\000\100\005\uffba\006\uffba\007\uffba\011\uffba\014\uffba" +
    "\015\uffba\026\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\070\uffba\071\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104" +
    "\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba" +
    "\001\002\000\054\005\uffa5\006\uffa5\007\uffa5\011\uffa5\014" +
    "\uffa5\015\uffa5\026\uffa5\051\uffa5\070\uffa5\071\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\103\uffa5\104\uffa5\107\uffa5\110\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\114\uffa5\001\002\000\060\005\uffae" +
    "\006\uffae\007\uffae\011\uffae\014\uffae\015\uffae\026\uffae\051" +
    "\uffae\052\101\053\104\070\uffae\071\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\113\uffae\114\uffae\001\002\000\054\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\014\uffa3\015\uffa3\026\uffa3\051\uffa3\070" +
    "\uffa3\071\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\001" +
    "\002\000\060\005\uffac\006\uffac\007\uffac\011\uffac\014\uffac" +
    "\015\uffac\026\uffac\051\uffac\052\101\053\104\070\uffac\071" +
    "\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\114\uffac\001\002\000" +
    "\100\005\uffbe\006\uffbe\007\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\026\uffbe\051\uffbe\052\uffbe\053\uffbe\054\120\055\117\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\070\uffbe" +
    "\071\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\107" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\001\002" +
    "\000\054\005\uffa4\006\uffa4\007\uffa4\011\uffa4\014\uffa4\015" +
    "\uffa4\026\uffa4\051\uffa4\070\uffa4\071\uffa4\100\uffa4\101\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\107\uffa4\110\uffa4\111\uffa4\112" +
    "\uffa4\113\uffa4\114\uffa4\001\002\000\060\005\uffad\006\uffad" +
    "\007\uffad\011\uffad\014\uffad\015\uffad\026\uffad\051\uffad\052" +
    "\101\053\104\070\uffad\071\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113" +
    "\uffad\114\uffad\001\002\000\054\005\uffa6\006\uffa6\007\uffa6" +
    "\011\uffa6\014\uffa6\015\uffa6\026\uffa6\051\uffa6\070\uffa6\071" +
    "\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\107\uffa6" +
    "\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\001\002\000" +
    "\060\005\uffaf\006\uffaf\007\uffaf\011\uffaf\014\uffaf\015\uffaf" +
    "\026\uffaf\051\uffaf\052\101\053\104\070\uffaf\071\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\107\uffaf\110\uffaf" +
    "\111\uffaf\112\uffaf\113\uffaf\114\uffaf\001\002\000\022\003" +
    "\142\007\045\100\052\102\046\103\067\104\056\107\051" +
    "\110\064\001\002\000\022\003\137\007\045\100\052\102" +
    "\046\103\067\104\056\107\051\110\064\001\002\000\054" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\026" +
    "\uffb4\051\uffb4\070\uffb4\071\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\103\uffb4\104\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113" +
    "\uffb4\114\uffb4\001\002\000\054\005\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\014\uffb2\015\uffb2\026\uffb2\051\uffb2\070\uffb2\071" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\107\uffb2" +
    "\110\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2\001\002\000" +
    "\022\052\101\053\104\057\105\060\077\061\100\062\103" +
    "\063\106\064\102\001\002\000\054\005\uffb5\006\uffb5\007" +
    "\uffb5\011\uffb5\014\uffb5\015\uffb5\026\uffb5\051\uffb5\070\uffb5" +
    "\071\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\107" +
    "\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\001\002" +
    "\000\054\005\uffb3\006\uffb3\007\uffb3\011\uffb3\014\uffb3\015" +
    "\uffb3\026\uffb3\051\uffb3\070\uffb3\071\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\113\uffb3\114\uffb3\001\002\000\050\007\uffc4\011\uffc4" +
    "\014\uffc4\015\uffc4\026\uffc4\051\uffc4\070\uffc4\071\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\114\uffc4\001\002\000\010\005" +
    "\134\006\135\101\146\001\002\000\024\052\101\053\104" +
    "\057\105\060\077\061\100\062\103\063\106\064\102\101" +
    "\113\001\002\000\054\005\uffa8\006\uffa8\007\uffa8\011\uffa8" +
    "\014\uffa8\015\uffa8\026\uffa8\051\uffa8\070\uffa8\071\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\107\uffa8\110\uffa8" +
    "\111\uffa8\112\uffa8\113\uffa8\114\uffa8\001\002\000\054\005" +
    "\uffaa\006\uffaa\007\uffaa\011\uffaa\014\uffaa\015\uffaa\026\uffaa" +
    "\051\uffaa\070\uffaa\071\uffaa\100\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\001\002\000\100\005\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\014\uffa9\015\uffa9\026\uffa9\051\uffa9\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\070\uffa9\071\uffa9\100\uffa9\101\uffa9\102\uffa9" +
    "\103\uffa9\104\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113" +
    "\uffa9\114\uffa9\001\002\000\004\102\152\001\002\000\004" +
    "\056\153\001\002\000\034\007\045\100\052\102\046\103" +
    "\067\104\056\105\055\106\063\107\051\110\064\111\053" +
    "\112\047\113\042\114\071\001\002\000\044\007\ufff7\011" +
    "\ufff7\014\ufff7\015\ufff7\026\ufff7\051\ufff7\071\ufff7\100\ufff7" +
    "\102\ufff7\103\ufff7\104\ufff7\107\ufff7\110\ufff7\111\ufff7\112" +
    "\ufff7\113\ufff7\114\ufff7\001\002\000\004\100\156\001\002" +
    "\000\010\003\161\101\157\102\163\001\002\000\004\070" +
    "\247\001\002\000\010\003\167\071\165\101\166\001\002" +
    "\000\004\101\164\001\002\000\010\003\uffcb\071\uffcb\101" +
    "\uffcb\001\002\000\010\003\uffc8\071\uffc8\101\uffc8\001\002" +
    "\000\010\026\uffcc\051\uffcc\102\uffcc\001\002\000\004\102" +
    "\163\001\002\000\004\070\170\001\002\000\010\003\uffc9" +
    "\071\uffc9\101\uffc9\001\002\000\004\050\171\001\002\000" +
    "\040\007\045\011\202\014\206\015\173\020\201\100\052" +
    "\102\177\103\067\104\056\107\051\110\064\111\053\112" +
    "\047\113\042\114\071\001\002\000\040\007\uffdb\011\uffdb" +
    "\014\uffdb\015\uffdb\051\uffdb\100\uffdb\102\uffdb\103\uffdb\104" +
    "\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\114\uffdb" +
    "\001\002\000\030\007\045\100\052\102\046\103\067\104" +
    "\056\107\051\110\064\111\053\112\047\113\042\114\071" +
    "\001\002\000\040\007\045\011\202\014\206\015\173\051" +
    "\uffdf\100\052\102\177\103\067\104\056\107\051\110\064" +
    "\111\053\112\047\113\042\114\071\001\002\000\040\007" +
    "\uffdc\011\uffdc\014\uffdc\015\uffdc\051\uffdc\100\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113" +
    "\uffdc\114\uffdc\001\002\000\040\007\uffe8\011\uffe8\014\uffe8" +
    "\015\uffe8\051\uffe8\100\uffe8\102\uffe8\103\uffe8\104\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\001\002" +
    "\000\066\007\uffb9\011\uffb9\014\uffb9\015\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\041\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\100\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9" +
    "\114\uffb9\001\002\000\004\051\236\001\002\000\004\051" +
    "\235\001\002\000\030\007\045\100\052\102\046\103\067" +
    "\104\056\107\051\110\064\111\053\112\047\113\042\114" +
    "\071\001\002\000\040\007\uffde\011\uffde\014\uffde\015\uffde" +
    "\051\uffde\100\uffde\102\uffde\103\uffde\104\uffde\107\uffde\110" +
    "\uffde\111\uffde\112\uffde\113\uffde\114\uffde\001\002\000\040" +
    "\007\uffe6\011\uffe6\014\uffe6\015\uffe6\051\uffe6\100\uffe6\102" +
    "\uffe6\103\uffe6\104\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\113\uffe6\114\uffe6\001\002\000\040\007\uffe7\011\uffe7\014" +
    "\uffe7\015\uffe7\051\uffe7\100\uffe7\102\uffe7\103\uffe7\104\uffe7" +
    "\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\001" +
    "\002\000\004\102\210\001\002\000\040\007\uffda\011\uffda" +
    "\014\uffda\015\uffda\051\uffda\100\uffda\102\uffda\103\uffda\104" +
    "\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\114\uffda" +
    "\001\002\000\004\046\211\001\002\000\004\047\212\001" +
    "\002\000\004\100\213\001\002\000\006\103\067\104\056" +
    "\001\002\000\004\101\215\001\002\000\004\070\216\001" +
    "\002\000\006\003\217\050\220\001\002\000\040\007\uffe0" +
    "\011\uffe0\014\uffe0\015\uffe0\051\uffe0\100\uffe0\102\uffe0\103" +
    "\uffe0\104\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0" +
    "\114\uffe0\001\002\000\036\007\045\011\202\014\206\015" +
    "\173\100\052\102\177\103\067\104\056\107\051\110\064" +
    "\111\053\112\047\113\042\114\071\001\002\000\004\051" +
    "\222\001\002\000\040\007\uffe1\011\uffe1\014\uffe1\015\uffe1" +
    "\051\uffe1\100\uffe1\102\uffe1\103\uffe1\104\uffe1\107\uffe1\110" +
    "\uffe1\111\uffe1\112\uffe1\113\uffe1\114\uffe1\001\002\000\004" +
    "\070\224\001\002\000\004\050\225\001\002\000\036\007" +
    "\045\011\202\014\206\015\173\100\052\102\177\103\067" +
    "\104\056\107\051\110\064\111\053\112\047\113\042\114" +
    "\071\001\002\000\004\051\227\001\002\000\042\007\uffe4" +
    "\011\uffe4\012\230\014\uffe4\015\uffe4\051\uffe4\100\uffe4\102" +
    "\uffe4\103\uffe4\104\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4" +
    "\113\uffe4\114\uffe4\001\002\000\004\070\231\001\002\000" +
    "\004\050\232\001\002\000\036\007\045\011\202\014\206" +
    "\015\173\100\052\102\177\103\067\104\056\107\051\110" +
    "\064\111\053\112\047\113\042\114\071\001\002\000\004" +
    "\051\234\001\002\000\040\007\uffe5\011\uffe5\014\uffe5\015" +
    "\uffe5\051\uffe5\100\uffe5\102\uffe5\103\uffe5\104\uffe5\107\uffe5" +
    "\110\uffe5\111\uffe5\112\uffe5\113\uffe5\114\uffe5\001\002\000" +
    "\010\026\uffcd\051\uffcd\102\uffcd\001\002\000\010\026\uffd0" +
    "\051\uffd0\102\uffd0\001\002\000\040\007\uffdd\011\uffdd\014" +
    "\uffdd\015\uffdd\051\uffdd\100\uffdd\102\uffdd\103\uffdd\104\uffdd" +
    "\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\001" +
    "\002\000\004\070\241\001\002\000\006\003\242\050\243" +
    "\001\002\000\040\007\uffe2\011\uffe2\014\uffe2\015\uffe2\051" +
    "\uffe2\100\uffe2\102\uffe2\103\uffe2\104\uffe2\107\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\113\uffe2\114\uffe2\001\002\000\036\007" +
    "\045\011\202\014\206\015\173\100\052\102\177\103\067" +
    "\104\056\107\051\110\064\111\053\112\047\113\042\114" +
    "\071\001\002\000\004\051\245\001\002\000\040\007\uffe3" +
    "\011\uffe3\014\uffe3\015\uffe3\051\uffe3\100\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3" +
    "\114\uffe3\001\002\000\010\003\uffca\071\uffca\101\uffca\001" +
    "\002\000\004\050\250\001\002\000\040\007\045\011\202" +
    "\014\206\015\173\020\252\100\052\102\177\103\067\104" +
    "\056\107\051\110\064\111\053\112\047\113\042\114\071" +
    "\001\002\000\004\051\254\001\002\000\004\051\253\001" +
    "\002\000\010\026\uffce\051\uffce\102\uffce\001\002\000\010" +
    "\026\uffcf\051\uffcf\102\uffcf\001\002\000\006\002\uffd6\032" +
    "\uffd6\001\002\000\004\002\001\001\002\000\006\032\uffff" +
    "\066\014\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\005\005\056\004\001\001\000\004\013" +
    "\256\001\001\000\002\001\001\000\006\031\016\032\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\034\007\026\010\031\033\035\034\032" +
    "\041\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\034\007\026\010" +
    "\031\034\032\041\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\042\067\043\053\045\065\046\057\047" +
    "\056\050\042\051\047\052\043\053\060\054\064\055\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\045\137\046\057\047\147\051\047\052\043" +
    "\054\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\045\144\046\057" +
    "\047\056\051\047\052\043\054\064\055\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\042\067\044\072" +
    "\045\075\046\057\047\056\051\047\052\043\053\073\054" +
    "\064\055\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\045\132\046" +
    "\057\047\056\052\043\001\001\000\012\045\130\046\057" +
    "\047\056\052\043\001\001\000\010\046\126\047\056\052" +
    "\043\001\001\000\012\045\125\046\057\047\056\052\043" +
    "\001\001\000\012\045\123\046\057\047\056\052\043\001" +
    "\001\000\010\046\115\047\056\052\043\001\001\000\012" +
    "\045\114\046\057\047\056\052\043\001\001\000\012\045" +
    "\107\046\057\047\056\052\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\111\046\057\047\056\052" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\121\052\043\001\001\000\006\047\120\052\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\045\137\046\057\047\056" +
    "\051\047\052\043\054\140\001\001\000\016\045\137\046" +
    "\057\047\056\051\047\052\043\054\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\042\067\043\153\045\065\046\057\047\056\050\042\051" +
    "\047\052\043\053\060\054\064\055\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\157\040\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\006\206\007\026\010\031\015" +
    "\171\016\175\017\204\020\203\021\177\022\173\023\202" +
    "\042\067\044\174\045\075\046\057\047\056\051\047\052" +
    "\043\053\073\054\064\055\074\001\001\000\002\001\001" +
    "\000\026\042\067\044\237\045\075\046\057\047\056\051" +
    "\047\052\043\053\073\054\064\055\074\001\001\000\046" +
    "\006\206\007\026\010\031\015\171\016\175\017\204\020" +
    "\203\023\236\042\067\044\174\045\075\046\057\047\056" +
    "\051\047\052\043\053\073\054\064\055\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\042\067\044\222\045" +
    "\075\046\057\047\056\051\047\052\043\053\073\054\064" +
    "\055\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\206\007\026\010" +
    "\031\015\171\016\175\017\204\020\203\021\220\022\173" +
    "\023\202\042\067\044\174\045\075\046\057\047\056\051" +
    "\047\052\043\053\073\054\064\055\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\206\007\026\010\031\015\171\016\175" +
    "\017\204\020\203\021\225\022\173\023\202\042\067\044" +
    "\174\045\075\046\057\047\056\051\047\052\043\053\073" +
    "\054\064\055\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\006\206" +
    "\007\026\010\031\015\171\016\175\017\204\020\203\021" +
    "\232\022\173\023\202\042\067\044\174\045\075\046\057" +
    "\047\056\051\047\052\043\053\073\054\064\055\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\206\007\026" +
    "\010\031\015\171\016\175\017\204\020\203\021\243\022" +
    "\173\023\202\042\067\044\174\045\075\046\057\047\056" +
    "\051\047\052\043\053\073\054\064\055\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\006\206\007\026\010\031\015\171\016" +
    "\175\017\204\020\203\021\250\022\173\023\202\042\067" +
    "\044\174\045\075\046\057\047\056\051\047\052\043\053" +
    "\073\054\064\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;
    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }
    public void agregarVariable(String id, String tipo, String valor, String contexto) {
        final String RESET = "\033[0m";
        final String ROJO = "\033[31m";
        final String VERDE = "\033[32m";
        final String AMARILLO = "\033[33m";

        if (tipo.equals("variable")) {
            Simbolo variable_simbolo = tabla.obtenerSimbolo(valor);
            if (variable_simbolo != null) {
                tipo = variable_simbolo.getTipo();
                valor = variable_simbolo.getValor();
                Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
                if (tabla.agregar(id, simbolo)) {
                    System.out.println(VERDE + "--------Variable agregada con referencia--------> "  + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
                    System.out.println(tabla.mostrar());
                    return;
                }
            } else {
                System.out.println(ROJO + "-------Variable NO agregada, no se encuentra la variable referenciada-------> " + id + RESET);
                return;
            }
        }

        Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
        if (tabla.agregar(id, simbolo)) {
            System.out.println(VERDE + "--------Variable agregada--------> " + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
            System.out.println(tabla.mostrar());
        } else {
            System.out.println(ROJO + "-------Variable NO agregada-------> " + id + RESET);
        }
    }
    public String[] realizarCasting(String tipoCast, String[] valor) {
        if (valor == null || valor.length < 2) {
            return new String[]{"", ""};
        }

        String tipoOriginal = valor[0];
        String val = valor[1].toString().replaceAll("^['\"]|['\"]$", "");

        try {
            switch (tipoCast) {
                case "int":
                    if (tipoOriginal.equals("int")) {
                        return valor; // No need to cast
                    } else if (tipoOriginal.equals("float")) {
                        return new String[]{"int", String.valueOf((int)Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        // Try to parse string as number
                        return new String[]{"int", String.valueOf(Integer.parseInt(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"int", val.equals("true") ? "1" : "0"};
                    }
                    break;

                case "float":
                    if (tipoOriginal.equals("float")) {
                        return valor;
                    } else if (tipoOriginal.equals("int")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val))};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"float", String.valueOf(Float.parseFloat(val.trim()))};
                    } else if (tipoOriginal.equals("boolean")) {
                        return new String[]{"float", val.equals("true") ? "1.0" : "0.0"};
                    }
                    break;

                case "str":
                    return new String[]{"string", val};


                case "bool":
                    if (tipoOriginal.equals("boolean")) {
                        return valor;
                    } else if (tipoOriginal.equals("int") || tipoOriginal.equals("float")) {
                        boolean isNonZero = tipoOriginal.equals("int") ?
                            Integer.parseInt(val) != 0 : Float.parseFloat(val) != 0.0f;
                        return new String[]{"boolean", String.valueOf(isNonZero)};
                    } else if (tipoOriginal.equals("string")) {
                        return new String[]{"boolean", String.valueOf(!val.isEmpty())};
                    }
                    break;
            }
        } catch (NumberFormatException e) {
            System.err.println("Error de casting: no se puede convertir " + val + " a " + tipoCast);
        }

        return new String[]{"", ""};
    }

     public String[] handleComparison(String[] e1, String[] e2, String operator) {
            if (e1 == null || e2 == null || e1.length < 2 || e2.length < 2) {
                return new String[]{"", ""};
            }

            switch (operator) {
                case "==":
                case "!=":
                    if (e1[0].equals(e2[0])) {
                        boolean result = operator.equals("==") ?
                            e1[1].equals(e2[1]) : !e1[1].equals(e2[1]);
                        System.out.println("Comparación de " + (operator.equals("==") ? "igualdad" : "desigualdad") +
                                         " entre tipos compatibles: " + e1[0]);
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;

                case ">":
                case "<":
                case ">=":
                case "<=":
                    if ((e1[0].equals("int") || e1[0].equals("float")) &&
                        (e2[0].equals("int") || e2[0].equals("float"))) {
                        float val1 = Float.parseFloat(e1[1]);
                        float val2 = Float.parseFloat(e2[1]);
                        boolean result = false;

                        switch (operator) {
                            case ">": result = val1 > val2; break;
                            case "<": result = val1 < val2; break;
                            case ">=": result = val1 >= val2; break;
                            case "<=": result = val1 <= val2; break;
                        }

                        System.out.println("Comparacion " + operator + " entre numeros");
                        return new String[]{"boolean", String.valueOf(result)};
                    }
                    break;
            }

            System.out.println("\033[31mError: No se pueden comparar " + e1[0] + " con " + e2[0] +
                             " usando " + operator + "\033[0m");
            return new String[]{"", ""};
        }

        public String[] handleNotOperation(String[] tl) {
            if (tl != null && tl.length >= 2 && tl[0].equals("boolean")) {
                return new String[]{"boolean", String.valueOf(!Boolean.parseBoolean(tl[1]))};
            }
            System.out.println("\033[31mError: Operador NOT requiere un operando booleano\033[0m");
            return new String[]{"", ""};
        }

         public String[] handleLogicalOperation(String[] el, String[] tl, String operator) {
             if (el == null || tl == null || el.length < 2 || tl.length < 2) {
                 return new String[]{"", ""};
             }

             if (!el[0].equals("boolean") || !tl[0].equals("boolean")) {
                 System.out.println("\033[31mError: Operador " + operator + " requiere operandos booleanos\033[0m");
                 return new String[]{"", ""};
             }

             boolean val1 = Boolean.parseBoolean(el[1]);
             boolean val2 = Boolean.parseBoolean(tl[1]);
             boolean result = false;

             switch (operator) {
                 case "AND":
                     result = val1 && val2;
                     System.out.println("Operacion logica AND entre " + val1 + " y " + val2);
                     break;
                 case "OR":
                     result = val1 || val2;
                     System.out.println("Operacion logica OR entre " + val1 + " y " + val2);
                     break;
             }

             return new String[]{"boolean", String.valueOf(result)};
         }

         public void handleLogicalError(String operator) {
             System.out.println("\033[31mExpresion logica(" + operator + "), ERROR: Se esperaba un termino logico\033[0m");
         }

    public String[] handleArithmeticOperation(String[] e, String[] t, String operator) {
        if (e == null || t == null || e.length < 2 || t.length < 2) {
            return new String[]{"", ""};
        }

        // Checar si ambos son numeros
        boolean eIsNumber = e[0].equals("int") || e[0].equals("float");
        boolean tIsNumber = t[0].equals("int") || t[0].equals("float");

        if (!eIsNumber || !tIsNumber) {
            System.out.println("\033[31mError: Operador " + operator + " requiere operandos numericos\033[0m");
            return new String[]{"", ""};
        }

        // Para division siempre hacer float
        if (operator.equals("/")) {
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            if (val2 == 0) {
                System.out.println("\033[31mError: Division por cero\033[0m");
                return new String[]{"", ""};
            }
            return new String[]{"float", String.valueOf(val1 / val2)};
        }

        if (e[0].equals(t[0])) {
            if (e[0].equals("int")) {
                int val1 = Integer.parseInt(e[1]);
                int val2 = Integer.parseInt(t[1]);
                switch (operator) {
                    case "+": return new String[]{"int", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"int", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"int", String.valueOf(val1 * val2)};
                }
            } else { // float
                float val1 = Float.parseFloat(e[1]);
                float val2 = Float.parseFloat(t[1]);
                switch (operator) {
                    case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                    case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                    case "*": return new String[]{"float", String.valueOf(val1 * val2)};
                }
            }
        } else {
            // tipos mezclados int y float convertir a float
            float val1 = Float.parseFloat(e[1]);
            float val2 = Float.parseFloat(t[1]);
            switch (operator) {
                case "+": return new String[]{"float", String.valueOf(val1 + val2)};
                case "-": return new String[]{"float", String.valueOf(val1 - val2)};
                case "*": return new String[]{"float", String.valueOf(val1 * val2)};
            }
        }

        return new String[]{"", ""};
    }

    public void logArithmeticOperation(String operator, String[] e, String[] t, String[] result) {
        if (result != null && result.length >= 2 && !result[0].isEmpty()) {
            System.out.println("Operacion " + operator + " entre " +
                             e[0] + "(" + e[1] + ") y " +
                             t[0] + "(" + t[1] + ") = " +
                             result[0] + "(" + result[1] + ")");
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              String[] RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino_logico ::= LPAREN expresion_logica RPAREN 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = el; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino_logico ::= NOT factor 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleNotOperation(tl); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino_logico ::= NOT termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleNotOperation(tl); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "<"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, ">"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "!="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              String[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e1 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e2 = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleComparison(e1, e2, "=="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino_logico ::= booleano 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = b; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_logica ::= expresion_logica OR error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("OR"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_logica ::= expresion_logica AND error 
            {
              String[] RESULT =null;
		 parser.handleLogicalError("AND"); RESULT = new String[]{"", ""}; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleLogicalOperation(el, tl, "OR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = parser.handleLogicalOperation(el, tl, "AND"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_logica ::= termino_logico 
            {
              String[] RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] tl = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = tl; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",43, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= numero 
            {
              String[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] n = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= IDENTIFIER 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
       System.out.println("Valor identifier: "+ id);
       if(parser.tabla.verificar(id)){
           RESULT = new String[]{
               parser.tabla.obtenerSimbolo(id).getTipo(),
               parser.tabla.obtenerSimbolo(id).getValor()
           };
       }else{
           System.out.println("Error: Variable '"+id+"' no definida");
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // termino ::= termino DIVIDE factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "/");
      parser.logArithmeticOperation("division", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino ::= termino MULTIPLY factor 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "*");
      parser.logArithmeticOperation("multiplicacion", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "-");
      parser.logArithmeticOperation("resta", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      RESULT = parser.handleArithmeticOperation(e, t, "+");
      parser.logArithmeticOperation("suma", e, t, (String[])RESULT);
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_aritmetica ::= termino 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // casting_funcion ::= CAST_BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // casting_funcion ::= CAST_STR 
            {
              Object RESULT =null;
		 RESULT = "str"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // casting_funcion ::= CAST_FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // casting_funcion ::= CAST_INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("casting_funcion",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamada_funcion ::= casting_funcion LPAREN expresion RPAREN 
            {
              String[] RESULT =null;
		int castTypeleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).left;
		int castTyperight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).right;
		Object castType = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] exp = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		
       if (exp != null) {
           String[] resultado = parser.realizarCasting((String)castType, (String[])exp);
           if (resultado[0].isEmpty()) {
               System.out.println("\033[31m"+"Error: No se pudo realizar el casting de " + exp[1] + " a " + castType + "\033[0m");
           } else {
               System.out.println("Casting realizado: " + exp[1] + " -> " + resultado[1] + " (" + resultado[0] + ")");
           }
           RESULT = resultado;
       } else {
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		RESULT = f; System.out.println("Es una expresion que llama una FUNCION"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion_logica 
            {
              String[] RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] el = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = el; System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] ea = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = ea; System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_cuerpo_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= dec_variables 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleano ::= FALSE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano False");
                RESULT = new String[]{"boolean",str.toString()};
            
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleano ::= TRUE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano True");
                RESULT = new String[]{"boolean",str.toString()};
             
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cadena ::= STRING_SIMPLE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena simple");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cadena ::= STRING 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numero ::= FLOAT 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: float");
        RESULT = new String[]{"float",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numero ::= INTEGER 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: entero");
        RESULT = new String[]{"int",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_asignacion ::= llamada_funcion 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_asignacion ::= cadena 
            {
              String[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] c = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_asignacion ::= expresion_logica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_asignacion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_var_multiple ::= dec_var_multiple COMMA IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_var_multiple ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var_individual ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    System.out.println("Asignacion detectada: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    } else {
        System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_variables ::= dec_var_multiple 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_importaciones ::= 
            {
              Object RESULT =null;
		 System.out.println("!!!!!!!!!!!!!!!DECLARACION DE IMPORTACION VACIA!!!!!!!!!!!!!!!"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= FROM IDENTIFIER IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion FROM"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= dec_importaciones bloque_clases 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("programa",44, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

