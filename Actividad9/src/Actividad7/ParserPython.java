
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 30 20:42:57 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 30 20:42:57 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\017\004\000\002\017" +
    "\003\000\002\054\004\000\002\005\004\000\002\005\006" +
    "\000\002\005\002\000\002\013\005\000\002\013\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\005\000\002" +
    "\011\005\000\002\011\005\000\002\012\005\000\002\012" +
    "\005\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\053\003\000\002\053\003\000\002\051\003\000" +
    "\002\051\003\000\002\052\003\000\002\052\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\015\000\002\021\010\000\002\022\010\000\002\022\006" +
    "\000\002\023\015\000\002\023\013\000\002\024\003\000" +
    "\002\025\003\000\002\025\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\034\003\000\002\034" +
    "\004\000\002\035\010\000\002\035\005\000\002\035\006" +
    "\000\002\036\003\000\002\036\004\000\002\044\003\000" +
    "\002\044\003\000\002\037\013\000\002\037\012\000\002" +
    "\037\012\000\002\037\013\000\002\037\007\000\002\041" +
    "\003\000\002\041\005\000\002\041\004\000\002\043\003" +
    "\000\002\014\003\000\002\014\003\000\002\046\003\000" +
    "\002\046\005\000\002\046\005\000\002\047\003\000\002" +
    "\047\005\000\002\047\005\000\002\050\003\000\002\050" +
    "\003\000\002\050\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\032\ufffb\033\004\034\007\001\002\000" +
    "\004\102\013\001\002\000\004\002\227\001\002\000\004" +
    "\032\016\001\002\000\004\102\010\001\002\000\004\033" +
    "\011\001\002\000\004\102\013\001\002\000\006\032\ufffc" +
    "\066\014\001\002\000\006\032\ufff9\066\ufff9\001\002\000" +
    "\004\102\015\001\002\000\006\032\ufffa\066\ufffa\001\002" +
    "\000\006\003\022\102\023\001\002\000\006\002\ufffe\032" +
    "\016\001\002\000\006\002\uffd9\032\uffd9\001\002\000\006" +
    "\002\uffd8\032\uffd8\001\002\000\004\070\226\001\002\000" +
    "\004\070\024\001\002\000\006\003\025\050\026\001\002" +
    "\000\006\002\uffd5\032\uffd5\001\002\000\006\026\031\102" +
    "\033\001\002\000\024\011\ufff8\014\ufff8\015\ufff8\026\ufff8" +
    "\051\ufff8\100\ufff8\102\ufff8\103\ufff8\104\ufff8\001\002\000" +
    "\010\026\uffd4\051\uffd4\102\uffd4\001\002\000\004\102\072" +
    "\001\002\000\010\026\uffd1\051\uffd1\102\uffd1\001\002\000" +
    "\004\056\040\001\002\000\010\026\uffd2\051\uffd2\102\uffd2" +
    "\001\002\000\010\026\031\051\036\102\033\001\002\000" +
    "\006\002\uffd7\032\uffd7\001\002\000\010\026\uffd3\051\uffd3" +
    "\102\uffd3\001\002\000\022\100\056\102\053\103\042\104" +
    "\057\105\047\106\041\107\046\110\050\001\002\000\024" +
    "\011\uffeb\014\uffeb\015\uffeb\026\uffeb\051\uffeb\100\uffeb\102" +
    "\uffeb\103\uffeb\104\uffeb\001\002\000\060\005\uffee\006\uffee" +
    "\011\uffee\014\uffee\015\uffee\026\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\070\uffee\100\uffee\101\uffee\102\uffee\103" +
    "\uffee\104\uffee\001\002\000\024\011\ufff7\014\ufff7\015\ufff7" +
    "\026\ufff7\051\ufff7\100\ufff7\102\ufff7\103\ufff7\104\ufff7\001" +
    "\002\000\024\011\ufff0\014\ufff0\015\ufff0\026\ufff0\051\ufff0" +
    "\100\ufff0\102\ufff0\103\ufff0\104\ufff0\001\002\000\060\005" +
    "\uffc5\006\uffc5\011\uffc5\014\uffc5\015\uffc5\026\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\066\055\065\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\070\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\001\002\000\024\011\uffea\014" +
    "\uffea\015\uffea\026\uffea\051\uffea\100\uffea\102\uffea\103\uffea" +
    "\104\uffea\001\002\000\024\011\uffec\014\uffec\015\uffec\026" +
    "\uffec\051\uffec\100\uffec\102\uffec\103\uffec\104\uffec\001\002" +
    "\000\024\011\uffe9\014\uffe9\015\uffe9\026\uffe9\051\uffe9\100" +
    "\uffe9\102\uffe9\103\uffe9\104\uffe9\001\002\000\060\005\uffbe" +
    "\006\uffbe\011\uffbe\014\uffbe\015\uffbe\026\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\070\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\001\002\000\060\005\uffc2\006\uffc2" +
    "\011\uffc2\014\uffc2\015\uffc2\026\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\070\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\001\002\000\060\005\uffbf\006\uffbf\011\uffbf" +
    "\014\uffbf\015\uffbf\026\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\070\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104" +
    "\uffbf\001\002\000\030\011\ufff1\014\ufff1\015\ufff1\026\ufff1" +
    "\051\ufff1\052\062\053\063\100\ufff1\102\ufff1\103\ufff1\104" +
    "\ufff1\001\002\000\024\011\uffef\014\uffef\015\uffef\026\uffef" +
    "\051\uffef\100\uffef\102\uffef\103\uffef\104\uffef\001\002\000" +
    "\012\100\056\102\053\103\042\104\057\001\002\000\060" +
    "\005\uffed\006\uffed\011\uffed\014\uffed\015\uffed\026\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\070\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\104\uffed\001\002\000\010\052\062" +
    "\053\063\101\061\001\002\000\060\005\uffbd\006\uffbd\011" +
    "\uffbd\014\uffbd\015\uffbd\026\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\070\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\001\002\000\012\100\056\102\053\103\042\104" +
    "\057\001\002\000\012\100\056\102\053\103\042\104\057" +
    "\001\002\000\060\005\uffc3\006\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\026\uffc3\051\uffc3\052\uffc3\053\uffc3\054\066\055\065" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\070" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\001\002" +
    "\000\012\100\056\102\053\103\042\104\057\001\002\000" +
    "\012\100\056\102\053\103\042\104\057\001\002\000\060" +
    "\005\uffc1\006\uffc1\011\uffc1\014\uffc1\015\uffc1\026\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\070\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\001\002\000\060\005\uffc0" +
    "\006\uffc0\011\uffc0\014\uffc0\015\uffc0\026\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\070\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\001\002\000\060\005\uffc4\006\uffc4" +
    "\011\uffc4\014\uffc4\015\uffc4\026\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\066\055\065\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\070\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\001\002\000\004\100\073\001\002\000\010" +
    "\003\076\101\074\102\100\001\002\000\004\070\220\001" +
    "\002\000\010\003\104\071\102\101\103\001\002\000\004" +
    "\101\101\001\002\000\010\003\uffcb\071\uffcb\101\uffcb\001" +
    "\002\000\010\003\uffc8\071\uffc8\101\uffc8\001\002\000\010" +
    "\026\uffcc\051\uffcc\102\uffcc\001\002\000\004\102\100\001" +
    "\002\000\004\070\105\001\002\000\010\003\uffc9\071\uffc9" +
    "\101\uffc9\001\002\000\004\050\106\001\002\000\022\011" +
    "\117\014\126\015\110\020\116\100\056\102\114\103\042" +
    "\104\057\001\002\000\022\011\uffdb\014\uffdb\015\uffdb\051" +
    "\uffdb\100\uffdb\102\uffdb\103\uffdb\104\uffdb\001\002\000\012" +
    "\100\056\102\053\103\042\104\057\001\002\000\022\011" +
    "\117\014\126\015\110\051\uffdf\100\056\102\114\103\042" +
    "\104\057\001\002\000\022\011\uffdc\014\uffdc\015\uffdc\051" +
    "\uffdc\100\uffdc\102\uffdc\103\uffdc\104\uffdc\001\002\000\022" +
    "\011\uffe8\014\uffe8\015\uffe8\051\uffe8\100\uffe8\102\uffe8\103" +
    "\uffe8\104\uffe8\001\002\000\050\011\uffbf\014\uffbf\015\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\040\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\100\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\001\002\000\004\051\207\001" +
    "\002\000\004\051\206\001\002\000\012\100\056\102\053" +
    "\103\042\104\057\001\002\000\022\011\uffde\014\uffde\015" +
    "\uffde\051\uffde\100\uffde\102\uffde\103\uffde\104\uffde\001\002" +
    "\000\022\011\uffe6\014\uffe6\015\uffe6\051\uffe6\100\uffe6\102" +
    "\uffe6\103\uffe6\104\uffe6\001\002\000\030\005\165\006\166" +
    "\011\uffc6\014\uffc6\015\uffc6\051\uffc6\070\uffc6\100\uffc6\102" +
    "\uffc6\103\uffc6\104\uffc6\001\002\000\030\005\uffbc\006\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\051\uffbc\070\uffbc\100\uffbc\102" +
    "\uffbc\103\uffbc\104\uffbc\001\002\000\022\011\uffe7\014\uffe7" +
    "\015\uffe7\051\uffe7\100\uffe7\102\uffe7\103\uffe7\104\uffe7\001" +
    "\002\000\044\011\uffc7\014\uffc7\015\uffc7\051\uffc7\052\062" +
    "\053\063\057\150\060\143\061\144\062\146\063\147\064" +
    "\145\070\uffc7\100\uffc7\102\uffc7\103\uffc7\104\uffc7\001\002" +
    "\000\004\102\130\001\002\000\022\011\uffda\014\uffda\015" +
    "\uffda\051\uffda\100\uffda\102\uffda\103\uffda\104\uffda\001\002" +
    "\000\004\046\131\001\002\000\004\047\132\001\002\000" +
    "\004\100\133\001\002\000\006\103\042\104\057\001\002" +
    "\000\004\101\135\001\002\000\004\070\136\001\002\000" +
    "\006\003\137\050\140\001\002\000\022\011\uffe0\014\uffe0" +
    "\015\uffe0\051\uffe0\100\uffe0\102\uffe0\103\uffe0\104\uffe0\001" +
    "\002\000\020\011\117\014\126\015\110\100\056\102\114" +
    "\103\042\104\057\001\002\000\004\051\142\001\002\000" +
    "\022\011\uffe1\014\uffe1\015\uffe1\051\uffe1\100\uffe1\102\uffe1" +
    "\103\uffe1\104\uffe1\001\002\000\014\003\163\100\056\102" +
    "\053\103\042\104\057\001\002\000\014\003\161\100\056" +
    "\102\053\103\042\104\057\001\002\000\014\003\157\100" +
    "\056\102\053\103\042\104\057\001\002\000\014\003\155" +
    "\100\056\102\053\103\042\104\057\001\002\000\014\003" +
    "\153\100\056\102\053\103\042\104\057\001\002\000\014" +
    "\003\151\100\056\102\053\103\042\104\057\001\002\000" +
    "\030\005\uffb1\006\uffb1\011\uffb1\014\uffb1\015\uffb1\051\uffb1" +
    "\070\uffb1\100\uffb1\102\uffb1\103\uffb1\104\uffb1\001\002\000" +
    "\034\005\uffb7\006\uffb7\011\uffb7\014\uffb7\015\uffb7\051\uffb7" +
    "\052\062\053\063\070\uffb7\100\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\001\002\000\030\005\uffac\006\uffac\011\uffac\014\uffac" +
    "\015\uffac\051\uffac\070\uffac\100\uffac\102\uffac\103\uffac\104" +
    "\uffac\001\002\000\034\005\uffb2\006\uffb2\011\uffb2\014\uffb2" +
    "\015\uffb2\051\uffb2\052\062\053\063\070\uffb2\100\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\001\002\000\030\005\uffaf\006\uffaf" +
    "\011\uffaf\014\uffaf\015\uffaf\051\uffaf\070\uffaf\100\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\001\002\000\034\005\uffb5\006\uffb5" +
    "\011\uffb5\014\uffb5\015\uffb5\051\uffb5\052\062\053\063\070" +
    "\uffb5\100\uffb5\102\uffb5\103\uffb5\104\uffb5\001\002\000\030" +
    "\005\uffad\006\uffad\011\uffad\014\uffad\015\uffad\051\uffad\070" +
    "\uffad\100\uffad\102\uffad\103\uffad\104\uffad\001\002\000\034" +
    "\005\uffb3\006\uffb3\011\uffb3\014\uffb3\015\uffb3\051\uffb3\052" +
    "\062\053\063\070\uffb3\100\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\001\002\000\030\005\uffae\006\uffae\011\uffae\014\uffae\015" +
    "\uffae\051\uffae\070\uffae\100\uffae\102\uffae\103\uffae\104\uffae" +
    "\001\002\000\034\005\uffb4\006\uffb4\011\uffb4\014\uffb4\015" +
    "\uffb4\051\uffb4\052\062\053\063\070\uffb4\100\uffb4\102\uffb4" +
    "\103\uffb4\104\uffb4\001\002\000\030\005\uffb0\006\uffb0\011" +
    "\uffb0\014\uffb0\015\uffb0\051\uffb0\070\uffb0\100\uffb0\102\uffb0" +
    "\103\uffb0\104\uffb0\001\002\000\034\005\uffb6\006\uffb6\011" +
    "\uffb6\014\uffb6\015\uffb6\051\uffb6\052\062\053\063\070\uffb6" +
    "\100\uffb6\102\uffb6\103\uffb6\104\uffb6\001\002\000\014\003" +
    "\173\100\056\102\053\103\042\104\057\001\002\000\014" +
    "\003\170\100\056\102\053\103\042\104\057\001\002\000" +
    "\030\005\uffba\006\uffba\011\uffba\014\uffba\015\uffba\051\uffba" +
    "\070\uffba\100\uffba\102\uffba\103\uffba\104\uffba\001\002\000" +
    "\030\005\uffb8\006\uffb8\011\uffb8\014\uffb8\015\uffb8\051\uffb8" +
    "\070\uffb8\100\uffb8\102\uffb8\103\uffb8\104\uffb8\001\002\000" +
    "\022\052\062\053\063\057\150\060\143\061\144\062\146" +
    "\063\147\064\145\001\002\000\030\005\uffbb\006\uffbb\011" +
    "\uffbb\014\uffbb\015\uffbb\051\uffbb\070\uffbb\100\uffbb\102\uffbb" +
    "\103\uffbb\104\uffbb\001\002\000\030\005\uffb9\006\uffb9\011" +
    "\uffb9\014\uffb9\015\uffb9\051\uffb9\070\uffb9\100\uffb9\102\uffb9" +
    "\103\uffb9\104\uffb9\001\002\000\004\070\175\001\002\000" +
    "\004\050\176\001\002\000\020\011\117\014\126\015\110" +
    "\100\056\102\114\103\042\104\057\001\002\000\004\051" +
    "\200\001\002\000\024\011\uffe4\012\201\014\uffe4\015\uffe4" +
    "\051\uffe4\100\uffe4\102\uffe4\103\uffe4\104\uffe4\001\002\000" +
    "\004\070\202\001\002\000\004\050\203\001\002\000\020" +
    "\011\117\014\126\015\110\100\056\102\114\103\042\104" +
    "\057\001\002\000\004\051\205\001\002\000\022\011\uffe5" +
    "\014\uffe5\015\uffe5\051\uffe5\100\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\001\002\000\010\026\uffcd\051\uffcd\102\uffcd\001\002" +
    "\000\010\026\uffd0\051\uffd0\102\uffd0\001\002\000\022\011" +
    "\uffdd\014\uffdd\015\uffdd\051\uffdd\100\uffdd\102\uffdd\103\uffdd" +
    "\104\uffdd\001\002\000\004\070\212\001\002\000\006\003" +
    "\213\050\214\001\002\000\022\011\uffe2\014\uffe2\015\uffe2" +
    "\051\uffe2\100\uffe2\102\uffe2\103\uffe2\104\uffe2\001\002\000" +
    "\020\011\117\014\126\015\110\100\056\102\114\103\042" +
    "\104\057\001\002\000\004\051\216\001\002\000\022\011" +
    "\uffe3\014\uffe3\015\uffe3\051\uffe3\100\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\001\002\000\010\003\uffca\071\uffca\101\uffca\001" +
    "\002\000\004\050\221\001\002\000\022\011\117\014\126" +
    "\015\110\020\223\100\056\102\114\103\042\104\057\001" +
    "\002\000\004\051\225\001\002\000\004\051\224\001\002" +
    "\000\010\026\uffce\051\uffce\102\uffce\001\002\000\010\026" +
    "\uffcf\051\uffcf\102\uffcf\001\002\000\006\002\uffd6\032\uffd6" +
    "\001\002\000\004\002\001\001\002\000\006\032\ufffd\066" +
    "\014\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\005\005\054\004\001\001\000\004\013" +
    "\227\001\001\000\002\001\001\000\006\034\016\035\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\033\007\026\036\034\037\031\044\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\033\007\026\037\031\044\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\045\042\046\053" +
    "\047\044\050\051\051\043\052\054\053\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\057\047\044\050\051\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\047" +
    "\070\050\051\053\050\001\001\000\010\047\063\050\051" +
    "\053\050\001\001\000\002\001\001\000\006\050\067\053" +
    "\050\001\001\000\006\050\066\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\074\043\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\126\007\026\014\111\015\121\016\122\020\106" +
    "\021\112\022\123\023\120\024\114\025\110\026\117\046" +
    "\124\047\044\050\051\053\050\001\001\000\002\001\001" +
    "\000\020\014\210\015\121\016\122\046\124\047\044\050" +
    "\051\053\050\001\001\000\036\006\126\007\026\014\111" +
    "\015\121\016\122\020\106\021\112\022\123\023\120\026" +
    "\207\046\124\047\044\050\051\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\173\015\121\016\122" +
    "\046\124\047\044\050\051\053\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\126\007\026\014\111\015\121\016\122\020\106\021" +
    "\112\022\123\023\120\024\140\025\110\026\117\046\124" +
    "\047\044\050\051\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\163\047\044\050\051\053\050" +
    "\001\001\000\012\046\161\047\044\050\051\053\050\001" +
    "\001\000\012\046\157\047\044\050\051\053\050\001\001" +
    "\000\012\046\155\047\044\050\051\053\050\001\001\000" +
    "\012\046\153\047\044\050\051\053\050\001\001\000\012" +
    "\046\151\047\044\050\051\053\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\171\046\170\047" +
    "\044\050\051\053\050\001\001\000\014\016\166\046\170" +
    "\047\044\050\051\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\126\007\026\014\111\015\121\016\122\020\106\021\112" +
    "\022\123\023\120\024\176\025\110\026\117\046\124\047" +
    "\044\050\051\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\126\007\026\014\111\015\121\016\122\020\106\021\112" +
    "\022\123\023\120\024\203\025\110\026\117\046\124\047" +
    "\044\050\051\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\126\007\026\014\111\015\121\016\122\020" +
    "\106\021\112\022\123\023\120\024\214\025\110\026\117" +
    "\046\124\047\044\050\051\053\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\126\007\026\014\111\015\121\016\122\020" +
    "\106\021\112\022\123\023\120\024\221\025\110\026\117" +
    "\046\124\047\044\050\051\053\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;
    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }
    public void agregarVariable(String id, String tipo, String valor, String contexto) {
        final String RESET = "\033[0m";
        final String ROJO = "\033[31m";
        final String VERDE = "\033[32m";
        final String AMARILLO = "\033[33m";

        if (tipo.equals("variable")) {
            Simbolo variable_simbolo = tabla.obtenerSimbolo(valor);
            if (variable_simbolo != null) {
                tipo = variable_simbolo.getTipo();
                valor = variable_simbolo.getValor();
                Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
                if (tabla.agregar(id, simbolo)) {
                    System.out.println(VERDE + "--------Variable agregada con referencia--------> "  + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
                    System.out.println(tabla.mostrar());
                    return;
                }
            } else {
                System.out.println(ROJO + "-------Variable NO agregada, no se encuentra la variable referenciada-------> " + id + RESET);
                return;
            }
        }

        Simbolo simbolo = new Simbolo(id, tipo, valor, contexto);
        if (tabla.agregar(id, simbolo)) {
            System.out.println(VERDE + "--------Variable agregada--------> " + "nombre " + id +",tipo "+ tipo + ", valor " + valor + RESET);
            System.out.println(tabla.mostrar());
        } else {
            System.out.println(ROJO + "-------Variable NO agregada-------> " + id + RESET);
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_logica ::= expresion_logica AND error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= numero 
            {
              String[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] n = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= IDENTIFIER 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
       System.out.println("Valor identifier: "+ id);
       if(parser.tabla.verificar(id)){
           RESULT = new String[]{
               parser.tabla.obtenerSimbolo(id).getTipo(),
               parser.tabla.obtenerSimbolo(id).getValor()
           };
       }else{
           System.out.println("Error: Variable '"+id+"' no definida");
           RESULT = new String[]{"", ""};
       }
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino ::= termino DIVIDE factor 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      // Implementa lógica de división similar a PLUS
      RESULT = new String[]{"", ""};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termino ::= termino MULTIPLY factor 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      // Implementa lógica de multiplicación similar a PLUS
      RESULT = new String[]{"", ""};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // termino ::= factor 
            {
              String[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] f = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      // Similar a PLUS pero con resta
      RESULT = new String[]{"", ""}; // Implementa lógica similar
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
      if (e != null && t != null && e.length >= 2 && t.length >= 2) {
      // Si el tipo es el mismo en ambos
         if (e[0].equals(t[0])) {
            if (e[0].equals("int")) {
               String suma_int = String.valueOf(Integer.parseInt(e[1]) + Integer.parseInt(t[1]));
               RESULT = new String[]{"int", suma_int};
               System.out.println("val1"+e[1]+","+"val2"+"="+suma_int);
            } else if (e[0].equals("float")) {
               RESULT = new String[]{"float", String.valueOf(Float.parseFloat(e[1]) + Float.parseFloat(t[1]))};
            }
         } else {
            System.out.println("\033[31m"+"Error: Type mismatch in arithmetic operation"+"\033[0m");
            RESULT = new String[]{"", ""};
         }
      } else {
         RESULT = new String[]{"", ""};
      }
      System.out.println("Operacion de suma");
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_aritmetica ::= termino 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_cuerpo_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",27, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",27, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",27, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= dec_variables 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleano ::= FALSE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano False");
                RESULT = new String[]{"boolean",str.toString()};
            
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleano ::= TRUE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
                System.out.println("Tipo: Booleano True");
                RESULT = new String[]{"boolean",str.toString()};
             
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("booleano",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cadena ::= STRING_SIMPLE 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena simple");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cadena ::= STRING 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
           System.out.println("Tipo: cadena");
           RESULT = new String[]{"string",str.toString()};
      
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numero ::= FLOAT 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: float");
        RESULT = new String[]{"float",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numero ::= INTEGER 
            {
              String[] RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
        System.out.println("Tipo: entero");
        RESULT = new String[]{"int",str.toString()};
   
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_asignacion ::= booleano 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = b; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_asignacion ::= cadena 
            {
              String[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] c = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_asignacion ::= expresion_aritmetica 
            {
              String[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] e = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_var_multiple ::= lista_identificadores EQUAL lista_valores 
            {
              Object RESULT =null;
		 System.out.println("Es una declaración múltiple de variables"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_var_individual ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String[] valor = (String[])((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		
    System.out.println("Asignación detectada: " + id + " = " + valor[1]);
    if (!valor[0].isEmpty()) {
        parser.agregarVariable(id, valor[0], valor[1], "metodo");
    } else {
        System.out.println("ERROR: Variable '" + id + "' no puede ser asignada porque el valor es indefinido.");
    }

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_variables ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_importaciones ::= 
            {
              Object RESULT =null;
		 System.out.println("!!!!!!!!!!!!!!!DECLARACION DE IMPORTACION VACIA!!!!!!!!!!!!!!!"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_importaciones ::= FROM IDENTIFIER IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion FROM"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= dec_importaciones bloque_clases 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("programa",42, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

