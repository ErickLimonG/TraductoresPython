/* LIMON GUVERA ERICK ANTONIO  */
/* PIEDRA FLORES AXEL JESUS  */
/* RODRIGUEZ MARTINEZ LEONARDO JAVIER  */

package Actividad7;

import java_cup.runtime.*;

parser code{:
   public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
   }
:}

/* Terminales palabras reservadas */
terminal TRUE, FALSE, NONE, AND, OR, NOT, IS, IF, ELSE,
        ELIF, FOR, WHILE, BREAK, CONTINUE, PASS, TRY, EXCEPT, FINALLY,
        RAISE, ASSERT, DEF, RETURN, LAMBDA, YIELD, CLASS, IMPORT, FROM,
        AS, DEL, GLOBAL, WITH, NONLOCAL, ASYNC, AWAIT, PACKAGE, LINE_COMMENT, IN, RANGE;

terminal INDENT, DEDENT;

/* Terminales operadores */
terminal PLUS, MINUS, MULTIPLY, DIVIDE, EQUAL, DOUBLE_EQUAL, NOT_EQUAL,
LESS_THAN, GREATER_THAN, LESS_EQUAL, GREATER_EQUAL, MODULE;


/* Terminales símbolos */
terminal DOT, SEMICOLON, COLON, COMMA, LBRACE, RBRACE, LBRACKET, RBRACKET,
BACK_SLASH, PIPE, LPAREN, RPAREN;


/* Terminales expresiones regulares */
terminal IDENTIFIER, INTEGER, FLOAT, STRING, STRING_SIMPLE, CHAR;


/* Terminales Error */
terminal UNCLOSED_STRING, MALFORMED_NUMBER, MALFORMED_IDENTIFIER;


/* No terminales */
non terminal declaraciones, bloque_importaciones,
            bloque_variables, dec_importaciones,
            dec_variables, dec_var_individual, dec_var_multiple, lista_identificadores, lista_valores,
            lista_identificador_punto,
            valor_asignacion, numero, cadena
            ;


non terminal expresion, expresion_aritmetica,
            termino, factor, expresion_logica,
            termino_logico, lista_expresiones
            ;

non terminal estructura_control, sentencia_if, sentencia_while, sentencia_for,
            bloque, lista_sentencias, sentencia, inicializacion, actualizacion,
            asignacion, bloque_estructuras, bloque_sentencias,
            bloque_clases, clase, cuerpo_clase, dec_metodo, declaracion_variable,
            parametros, cuerpo_metodo, parametro, dec_cuerpo_clase;

start with bloque_clases;

lista_expresiones ::=
                 lista_expresiones expresion |
                 expresion
                 ;
/* -------------------------- */
        /* Importaciones */
/* -------------------------- */
/* Regla para importaciones con múltiples niveles */
dec_importaciones ::=
   IMPORT lista_identificador_punto
   {: System.out.println("Es una declaracion de importacion"); :};

/* Regla auxiliar para manejar múltiples identificadores separados por DOT */
lista_identificador_punto ::=
   lista_identificador_punto DOT IDENTIFIER |
   IDENTIFIER;
/* -------------------------- */
/* Declaracion de variables */
/* -------------------------- */
/* Regla principal para declaraciones de variables */
dec_variables ::=
    dec_var_individual |
    dec_var_multiple
    ;

/* Declaración individual de variable */
dec_var_individual ::=
    IDENTIFIER EQUAL valor_asignacion
    {: System.out.println("Es una declaración de variable individual"); :}
    ;

/* Declaración múltiple de variables con asignación */
dec_var_multiple ::=
    lista_identificadores EQUAL lista_valores
    {: System.out.println("Es una declaración múltiple de variables"); :}
    ;

/* Lista de identificadores (variables separadas por comas) */
lista_identificadores ::=
    IDENTIFIER COMMA IDENTIFIER |
    IDENTIFIER COMMA lista_identificadores
    ;

/* Lista de valores (múltiples valores separados por comas) */
lista_valores ::=
    valor_asignacion COMMA valor_asignacion |
    valor_asignacion COMMA lista_valores
    ;
/* valores de asignaciones, EXPRESION ARTIMETICA CUBRE NUMERO E IDENTIFICADOR */
valor_asignacion ::=
   expresion_aritmetica |
   cadena
   ;

numero ::=
   INTEGER | FLOAT
   ;

cadena ::=
   STRING |
   STRING_SIMPLE
   ;
/* -------------------------- */
        /* Estructuras de control */
/* -------------------------- */
estructura_control ::=
    sentencia_if |
    sentencia_while |
    sentencia_for
    ;

/* Sentencia if con manejo de errores */
sentencia_if ::=
    IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT
    {: System.out.println("=============SENTENCIA IF-ELSE valida============="); :} |
    IF expresion COLON INDENT bloque DEDENT
    {: System.out.println("=============SENTENCIA IF valida============="); :}
    ;

/* Sentencia while con manejo de errores */
sentencia_while ::=
    WHILE expresion COLON INDENT bloque DEDENT
    {: System.out.println("=============SENTENCIA WHILE valida============="); :} |
    WHILE expresion COLON error
    {: System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); :}
    ;

/* Sentencia for con manejo de errores */
sentencia_for ::=
    FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT
    {: System.out.println("=============SENTENCIA FOR valida============="); :} |
    FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error
    {: System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); :}
    ;

/* Bloque con manejo de errores */
bloque ::=
    lista_sentencias
    {: System.out.println("Bloque con sentencias"); :}
    ;

lista_sentencias ::=
    sentencia |
    lista_sentencias sentencia
    ;
/* Sentencia con manejo de errores */
sentencia ::=
    expresion
    {: System.out.println("Sentencia de expresion"); :} |
    estructura_control
    {: System.out.println("Sentencia de control"); :} |
    dec_variables
    {: System.out.println("Sentencia de declaracion"); :}
    ;

/* -------------------------- */
        /* Clases y metodos */
/* -------------------------- */
bloque_clases::= clase |
                 bloque_clases clase
                 ;

clase::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT
         {: System.out.println("=============DEFINICION DE CLASE============="); :} |
         CLASS error COLON
         {: System.out.println("=============ERROR: Clase se esperaba un identificador============="); :} |
         CLASS IDENTIFIER COLON error
         {: System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); :}
         ;

cuerpo_clase::= dec_cuerpo_clase |
                cuerpo_clase dec_cuerpo_clase
               ;

dec_cuerpo_clase::= dec_variables |
                    dec_metodo
                    ;

dec_metodo ::=
    DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT
    {: System.out.println("=============DEFINICION DE METODO============="); :} 
    |
    DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT
    {: System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); :}
    |
    DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT
    {: System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); :}
    |
    DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT
    {: System.out.println("=============DEFINICION DE METODO VACIO============="); :}
    |
    DEF IDENTIFIER LPAREN error RPAREN
    {: System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); :}
    ;

parametros::= parametro |
              parametros COMMA parametro |
              parametros error
              ;

parametro::= IDENTIFIER
             ;
/* -------------------------- */
        /* EXPRESIONES */
/* -------------------------- */
expresion ::=
   expresion_aritmetica {: System.out.println("Es una expresion aritmetica"); :} |
   expresion_logica {: System.out.println("Es una expresion logica"); :}
   ;


expresion_aritmetica ::=
   termino {: System.out.println("Es una expresion aritmetica basica"); :} |
   expresion_aritmetica PLUS termino  {: System.out.println("Operacion de suma "); :} |
   expresion_aritmetica MINUS termino {: System.out.println("Operacion de resta "); :} |
   expresion_aritmetica PLUS error    {: System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); :} |
   expresion_aritmetica MINUS error   {: System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); :}
   ;


termino ::=
   factor                       {: System.out.println("Es un termino "); :} |
   termino MULTIPLY factor      {: System.out.println("Operacion de multiplicacion "); :} |
   termino DIVIDE factor        {: System.out.println("Operacion de division "); :} |
   termino MULTIPLY error       {: System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); :} |
   termino DIVIDE error         {: System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); :}
   ;


factor ::=
   IDENTIFIER |
   numero |
   LPAREN expresion_aritmetica RPAREN {: System.out.println("Expresion aritmetica entre parentesis"); :} |
   LPAREN expresion_aritmetica error {: System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); :}
   ;


expresion_logica ::=
   termino_logico                       {: System.out.println("Es un termino logico "); :} |
   expresion_logica AND termino_logico  {: System.out.println("Expresion logica(AND)"); :} |
   expresion_logica OR termino_logico   {: System.out.println("Expresion logica(OR)"); :} |
   expresion_logica AND error  {: System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); :} |
   expresion_logica OR  error   {: System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); :}
   ;


termino_logico ::=
   TRUE |
   FALSE |
   expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica {: System.out.println("Comparacion de igualdad"); :} |
   expresion_aritmetica NOT_EQUAL expresion_aritmetica {: System.out.println("Comparacion de desigualdad"); :} |
   expresion_aritmetica GREATER_THAN expresion_aritmetica {: System.out.println("Comparacion de mayor que"); :} |
   expresion_aritmetica LESS_THAN expresion_aritmetica {: System.out.println("Comparacion de menor que"); :} |
   expresion_aritmetica GREATER_EQUAL expresion_aritmetica {: System.out.println("Comparacion de mayor o igual"); :} |
   expresion_aritmetica LESS_EQUAL expresion_aritmetica {: System.out.println("Comparacion de menor o igual"); :} |
   expresion_aritmetica DOUBLE_EQUAL error {: System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); :} |
   expresion_aritmetica NOT_EQUAL error {: System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); :} |
   expresion_aritmetica GREATER_THAN error {: System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); :} |
   expresion_aritmetica LESS_THAN error {: System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); :} |
   expresion_aritmetica GREATER_EQUAL error {: System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); :} |
   expresion_aritmetica LESS_EQUAL error {: System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); :}
   ;