
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 29 18:34:28 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 29 18:34:28 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\025\004\000\002\025" +
    "\003\000\002\005\004\000\002\013\005\000\002\013\003" +
    "\000\002\006\003\000\002\006\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\010\005\000\002\011" +
    "\005\000\002\011\005\000\002\012\005\000\002\012\005" +
    "\000\002\014\003\000\002\014\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\015\000\002\027\010\000\002\030\010\000\002\030\006" +
    "\000\002\031\015\000\002\031\013\000\002\032\003\000" +
    "\002\033\003\000\002\033\004\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\042\003\000\002\042" +
    "\004\000\002\043\010\000\002\043\005\000\002\043\006" +
    "\000\002\044\003\000\002\044\004\000\002\052\003\000" +
    "\002\052\003\000\002\045\013\000\002\045\012\000\002" +
    "\045\012\000\002\045\013\000\002\045\007\000\002\047" +
    "\003\000\002\047\005\000\002\047\004\000\002\051\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\004\104\005\001\002\000\006\002\ufffb\104" +
    "\ufffb\001\002\000\004\060\011\001\002\000\006\002\010" +
    "\104\005\001\002\000\006\002\ufffa\104\ufffa\001\002\000" +
    "\004\002\001\001\002\000\016\004\015\005\016\105\012" +
    "\106\017\107\013\110\014\001\002\000\006\002\ufff9\104" +
    "\ufff9\001\002\000\006\002\ufff7\104\ufff7\001\002\000\006" +
    "\002\ufff6\104\ufff6\001\002\000\006\002\ufff5\104\ufff5\001" +
    "\002\000\006\002\ufff4\104\ufff4\001\002\000\006\002\ufff8" +
    "\104\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\006\006\005\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;
    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino_logico ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino_logico ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_logica ::= expresion_logica AND error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_cuerpo_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= dec_variables 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_var_multiple ::= lista_identificadores EQUAL lista_valores 
            {
              Object RESULT =null;
		 System.out.println("Es una declaración múltiple de variables"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_var_individual ::= IDENTIFIER EQUAL FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: BOOLEAN****************");
                            parser.simbolo=new Simbolo(id, "boolean", ""+bool, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_var_individual ::= IDENTIFIER EQUAL TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: BOOLEAN****************");
                            parser.simbolo=new Simbolo(id, "boolean", ""+bool, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_var_individual ::= IDENTIFIER EQUAL STRING_SIMPLE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: SIMPLE STRING****************");
                            parser.simbolo=new Simbolo(id, "string", ""+cadena, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_var_individual ::= IDENTIFIER EQUAL STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: STRING****************");
                            parser.simbolo=new Simbolo(id, "string", ""+cadena, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_var_individual ::= IDENTIFIER EQUAL FLOAT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String flotante = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: FLOAT****************");
                            parser.simbolo=new Simbolo(id, "float", ""+flotante, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var_individual ::= IDENTIFIER EQUAL INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: INTEGER****************");
                            parser.simbolo=new Simbolo(id, "int", ""+entero, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_variables ::= dec_variables dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_variables ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dec_variables EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

