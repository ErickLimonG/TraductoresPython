
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 30 10:16:12 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 30 10:16:12 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\025\004\000\002\025" +
    "\003\000\002\053\004\000\002\005\004\000\002\005\006" +
    "\000\002\005\002\000\002\013\005\000\002\013\003\000" +
    "\002\006\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\005\000\002\011\005\000\002\011\005" +
    "\000\002\012\005\000\002\012\005\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\015\000\002\027\010" +
    "\000\002\030\010\000\002\030\006\000\002\031\015\000" +
    "\002\031\013\000\002\032\003\000\002\033\003\000\002" +
    "\033\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\042\003\000\002\042\004\000\002\043\010" +
    "\000\002\043\005\000\002\043\006\000\002\044\003\000" +
    "\002\044\004\000\002\052\003\000\002\052\003\000\002" +
    "\045\013\000\002\045\012\000\002\045\012\000\002\045" +
    "\013\000\002\045\007\000\002\047\003\000\002\047\005" +
    "\000\002\047\004\000\002\051\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\021" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\034\ufffb\035\004\036\007\001\002\000" +
    "\004\104\013\001\002\000\004\002\234\001\002\000\004" +
    "\034\016\001\002\000\004\104\010\001\002\000\004\035" +
    "\011\001\002\000\004\104\013\001\002\000\006\034\ufffc" +
    "\070\014\001\002\000\006\034\ufff9\070\ufff9\001\002\000" +
    "\004\104\015\001\002\000\006\034\ufffa\070\ufffa\001\002" +
    "\000\006\003\022\104\023\001\002\000\006\002\ufffe\034" +
    "\016\001\002\000\006\002\uffd7\034\uffd7\001\002\000\006" +
    "\002\uffd6\034\uffd6\001\002\000\004\072\233\001\002\000" +
    "\004\072\024\001\002\000\006\003\025\052\026\001\002" +
    "\000\006\002\uffd3\034\uffd3\001\002\000\006\030\031\104" +
    "\033\001\002\000\030\004\ufff8\005\ufff8\013\ufff8\016\ufff8" +
    "\017\ufff8\030\ufff8\053\ufff8\102\ufff8\104\ufff8\105\ufff8\106" +
    "\ufff8\001\002\000\010\030\uffd2\053\uffd2\104\uffd2\001\002" +
    "\000\004\104\047\001\002\000\010\030\uffcf\053\uffcf\104" +
    "\uffcf\001\002\000\004\060\040\001\002\000\010\030\uffd0" +
    "\053\uffd0\104\uffd0\001\002\000\010\030\031\053\036\104" +
    "\033\001\002\000\006\002\uffd5\034\uffd5\001\002\000\010" +
    "\030\uffd1\053\uffd1\104\uffd1\001\002\000\016\004\044\005" +
    "\045\105\041\106\046\107\042\110\043\001\002\000\030" +
    "\004\ufff7\005\ufff7\013\ufff7\016\ufff7\017\ufff7\030\ufff7\053" +
    "\ufff7\102\ufff7\104\ufff7\105\ufff7\106\ufff7\001\002\000\030" +
    "\004\ufff5\005\ufff5\013\ufff5\016\ufff5\017\ufff5\030\ufff5\053" +
    "\ufff5\102\ufff5\104\ufff5\105\ufff5\106\ufff5\001\002\000\030" +
    "\004\ufff4\005\ufff4\013\ufff4\016\ufff4\017\ufff4\030\ufff4\053" +
    "\ufff4\102\ufff4\104\ufff4\105\ufff4\106\ufff4\001\002\000\030" +
    "\004\ufff3\005\ufff3\013\ufff3\016\ufff3\017\ufff3\030\ufff3\053" +
    "\ufff3\102\ufff3\104\ufff3\105\ufff3\106\ufff3\001\002\000\030" +
    "\004\ufff2\005\ufff2\013\ufff2\016\ufff2\017\ufff2\030\ufff2\053" +
    "\ufff2\102\ufff2\104\ufff2\105\ufff2\106\ufff2\001\002\000\030" +
    "\004\ufff6\005\ufff6\013\ufff6\016\ufff6\017\ufff6\030\ufff6\053" +
    "\ufff6\102\ufff6\104\ufff6\105\ufff6\106\ufff6\001\002\000\004" +
    "\102\050\001\002\000\010\003\052\103\051\104\055\001" +
    "\002\000\004\072\225\001\002\000\004\103\224\001\002" +
    "\000\010\003\060\073\056\103\057\001\002\000\010\003" +
    "\uffc9\073\uffc9\103\uffc9\001\002\000\010\003\uffc6\073\uffc6" +
    "\103\uffc6\001\002\000\004\104\055\001\002\000\004\072" +
    "\061\001\002\000\010\003\uffc7\073\uffc7\103\uffc7\001\002" +
    "\000\004\052\062\001\002\000\026\004\073\005\105\013" +
    "\075\016\112\017\064\022\074\102\076\104\071\105\111" +
    "\106\100\001\002\000\026\004\uffd9\005\uffd9\013\uffd9\016" +
    "\uffd9\017\uffd9\053\uffd9\102\uffd9\104\uffd9\105\uffd9\106\uffd9" +
    "\001\002\000\016\004\073\005\105\102\076\104\140\105" +
    "\111\106\100\001\002\000\026\004\uffda\005\uffda\013\uffda" +
    "\016\uffda\017\uffda\053\uffda\102\uffda\104\uffda\105\uffda\106" +
    "\uffda\001\002\000\026\004\073\005\105\013\075\016\112" +
    "\017\064\053\uffdd\102\076\104\071\105\111\106\100\001" +
    "\002\000\064\003\uffb8\004\uffb8\005\uffb8\007\uffb8\010\uffb8" +
    "\013\uffb8\016\uffb8\017\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\072\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106" +
    "\uffb8\001\002\000\026\004\uffe6\005\uffe6\013\uffe6\016\uffe6" +
    "\017\uffe6\053\uffe6\102\uffe6\104\uffe6\105\uffe6\106\uffe6\001" +
    "\002\000\054\004\uffb9\005\uffb9\013\uffb9\016\uffb9\017\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\040\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\102\uffb9" +
    "\104\uffb9\105\uffb9\106\uffb9\001\002\000\004\053\213\001" +
    "\002\000\034\004\uffb0\005\uffb0\007\uffb0\010\uffb0\013\uffb0" +
    "\016\uffb0\017\uffb0\053\uffb0\072\uffb0\102\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\001\002\000\004\053\212\001\002\000\016" +
    "\004\073\005\105\102\076\104\140\105\111\106\100\001" +
    "\002\000\012\102\076\104\140\105\111\106\100\001\002" +
    "\000\026\004\uffdc\005\uffdc\013\uffdc\016\uffdc\017\uffdc\053" +
    "\uffdc\102\uffdc\104\uffdc\105\uffdc\106\uffdc\001\002\000\064" +
    "\003\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffe9\013\uffe9\016" +
    "\uffe9\017\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\072" +
    "\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\001\002" +
    "\000\064\003\uffbe\004\uffbe\005\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\016\uffbe\017\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\072\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\001\002\000\026\004\uffe4\005\uffe4\013\uffe4\016\uffe4\017" +
    "\uffe4\053\uffe4\102\uffe4\104\uffe4\105\uffe4\106\uffe4\001\002" +
    "\000\064\003\uffc3\004\uffc3\005\uffc3\007\uffc3\010\uffc3\013" +
    "\uffc3\016\uffc3\017\uffc3\053\uffc3\054\uffc3\055\uffc3\056\147" +
    "\057\146\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\072\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\001\002\000\034\004\uffc4\005\uffc4\007\166\010\167\013" +
    "\uffc4\016\uffc4\017\uffc4\053\uffc4\072\uffc4\102\uffc4\104\uffc4" +
    "\105\uffc4\106\uffc4\001\002\000\034\004\uffaf\005\uffaf\007" +
    "\uffaf\010\uffaf\013\uffaf\016\uffaf\017\uffaf\053\uffaf\072\uffaf" +
    "\102\uffaf\104\uffaf\105\uffaf\106\uffaf\001\002\000\034\004" +
    "\uffb5\005\uffb5\007\uffb5\010\uffb5\013\uffb5\016\uffb5\017\uffb5" +
    "\053\uffb5\072\uffb5\102\uffb5\104\uffb5\105\uffb5\106\uffb5\001" +
    "\002\000\026\004\uffe5\005\uffe5\013\uffe5\016\uffe5\017\uffe5" +
    "\053\uffe5\102\uffe5\104\uffe5\105\uffe5\106\uffe5\001\002\000" +
    "\050\004\uffc5\005\uffc5\013\uffc5\016\uffc5\017\uffc5\053\uffc5" +
    "\054\133\055\134\061\136\062\127\063\130\064\132\065" +
    "\135\066\131\072\uffc5\102\uffc5\104\uffc5\105\uffc5\106\uffc5" +
    "\001\002\000\064\003\uffea\004\uffea\005\uffea\007\uffea\010" +
    "\uffea\013\uffea\016\uffea\017\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\072\uffea\102\uffea\103\uffea\104\uffea\105\uffea" +
    "\106\uffea\001\002\000\004\104\114\001\002\000\026\004" +
    "\uffd8\005\uffd8\013\uffd8\016\uffd8\017\uffd8\053\uffd8\102\uffd8" +
    "\104\uffd8\105\uffd8\106\uffd8\001\002\000\004\050\115\001" +
    "\002\000\004\051\116\001\002\000\004\102\117\001\002" +
    "\000\006\105\111\106\100\001\002\000\004\103\121\001" +
    "\002\000\004\072\122\001\002\000\006\003\123\052\124" +
    "\001\002\000\026\004\uffde\005\uffde\013\uffde\016\uffde\017" +
    "\uffde\053\uffde\102\uffde\104\uffde\105\uffde\106\uffde\001\002" +
    "\000\024\004\073\005\105\013\075\016\112\017\064\102" +
    "\076\104\071\105\111\106\100\001\002\000\004\053\126" +
    "\001\002\000\026\004\uffdf\005\uffdf\013\uffdf\016\uffdf\017" +
    "\uffdf\053\uffdf\102\uffdf\104\uffdf\105\uffdf\106\uffdf\001\002" +
    "\000\014\003\164\102\076\104\140\105\111\106\100\001" +
    "\002\000\014\003\162\102\076\104\140\105\111\106\100" +
    "\001\002\000\014\003\160\102\076\104\140\105\111\106" +
    "\100\001\002\000\014\003\156\102\076\104\140\105\111" +
    "\106\100\001\002\000\014\003\154\102\076\104\140\105" +
    "\111\106\100\001\002\000\014\003\144\102\076\104\140" +
    "\105\111\106\100\001\002\000\014\003\142\102\076\104" +
    "\140\105\111\106\100\001\002\000\014\003\137\102\076" +
    "\104\140\105\111\106\100\001\002\000\034\004\uffa8\005" +
    "\uffa8\007\uffa8\010\uffa8\013\uffa8\016\uffa8\017\uffa8\053\uffa8" +
    "\072\uffa8\102\uffa8\104\uffa8\105\uffa8\106\uffa8\001\002\000" +
    "\064\003\uffb9\004\uffb9\005\uffb9\007\uffb9\010\uffb9\013\uffb9" +
    "\016\uffb9\017\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\072\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\001" +
    "\002\000\040\004\uffae\005\uffae\007\uffae\010\uffae\013\uffae" +
    "\016\uffae\017\uffae\053\uffae\054\133\055\134\072\uffae\102" +
    "\uffae\104\uffae\105\uffae\106\uffae\001\002\000\034\004\uffa3" +
    "\005\uffa3\007\uffa3\010\uffa3\013\uffa3\016\uffa3\017\uffa3\053" +
    "\uffa3\072\uffa3\102\uffa3\104\uffa3\105\uffa3\106\uffa3\001\002" +
    "\000\040\004\uffa9\005\uffa9\007\uffa9\010\uffa9\013\uffa9\016" +
    "\uffa9\017\uffa9\053\uffa9\054\133\055\134\072\uffa9\102\uffa9" +
    "\104\uffa9\105\uffa9\106\uffa9\001\002\000\060\003\uffbf\004" +
    "\uffbf\005\uffbf\007\uffbf\010\uffbf\013\uffbf\016\uffbf\017\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\072\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\001\002\000\064\003\uffc1\004\uffc1\005" +
    "\uffc1\007\uffc1\010\uffc1\013\uffc1\016\uffc1\017\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\147\057\146\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\072\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\106\uffc1\001\002\000\014\003\152\102" +
    "\076\104\140\105\111\106\100\001\002\000\014\003\150" +
    "\102\076\104\140\105\111\106\100\001\002\000\064\003" +
    "\uffbb\004\uffbb\005\uffbb\007\uffbb\010\uffbb\013\uffbb\016\uffbb" +
    "\017\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\072\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\001\002\000" +
    "\064\003\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd\013\uffbd" +
    "\016\uffbd\017\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\072\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\001" +
    "\002\000\064\003\uffba\004\uffba\005\uffba\007\uffba\010\uffba" +
    "\013\uffba\016\uffba\017\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\072\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106" +
    "\uffba\001\002\000\064\003\uffbc\004\uffbc\005\uffbc\007\uffbc" +
    "\010\uffbc\013\uffbc\016\uffbc\017\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\072\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\001\002\000\060\003\uffc0\004\uffc0\005\uffc0" +
    "\007\uffc0\010\uffc0\013\uffc0\016\uffc0\017\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\072\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\001\002\000\064\003\uffc2\004\uffc2\005\uffc2\007\uffc2" +
    "\010\uffc2\013\uffc2\016\uffc2\017\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\147\057\146\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\072\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\001\002\000\034\004\uffa6\005\uffa6\007\uffa6" +
    "\010\uffa6\013\uffa6\016\uffa6\017\uffa6\053\uffa6\072\uffa6\102" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000\040\004\uffac" +
    "\005\uffac\007\uffac\010\uffac\013\uffac\016\uffac\017\uffac\053" +
    "\uffac\054\133\055\134\072\uffac\102\uffac\104\uffac\105\uffac" +
    "\106\uffac\001\002\000\034\004\uffa4\005\uffa4\007\uffa4\010" +
    "\uffa4\013\uffa4\016\uffa4\017\uffa4\053\uffa4\072\uffa4\102\uffa4" +
    "\104\uffa4\105\uffa4\106\uffa4\001\002\000\040\004\uffaa\005" +
    "\uffaa\007\uffaa\010\uffaa\013\uffaa\016\uffaa\017\uffaa\053\uffaa" +
    "\054\133\055\134\072\uffaa\102\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\001\002\000\034\004\uffa5\005\uffa5\007\uffa5\010\uffa5" +
    "\013\uffa5\016\uffa5\017\uffa5\053\uffa5\072\uffa5\102\uffa5\104" +
    "\uffa5\105\uffa5\106\uffa5\001\002\000\040\004\uffab\005\uffab" +
    "\007\uffab\010\uffab\013\uffab\016\uffab\017\uffab\053\uffab\054" +
    "\133\055\134\072\uffab\102\uffab\104\uffab\105\uffab\106\uffab" +
    "\001\002\000\034\004\uffa7\005\uffa7\007\uffa7\010\uffa7\013" +
    "\uffa7\016\uffa7\017\uffa7\053\uffa7\072\uffa7\102\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\001\002\000\040\004\uffad\005\uffad\007" +
    "\uffad\010\uffad\013\uffad\016\uffad\017\uffad\053\uffad\054\133" +
    "\055\134\072\uffad\102\uffad\104\uffad\105\uffad\106\uffad\001" +
    "\002\000\020\003\174\004\073\005\105\102\076\104\140" +
    "\105\111\106\100\001\002\000\020\003\171\004\073\005" +
    "\105\102\076\104\140\105\111\106\100\001\002\000\034" +
    "\004\uffb3\005\uffb3\007\uffb3\010\uffb3\013\uffb3\016\uffb3\017" +
    "\uffb3\053\uffb3\072\uffb3\102\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\001\002\000\034\004\uffb1\005\uffb1\007\uffb1\010\uffb1\013" +
    "\uffb1\016\uffb1\017\uffb1\053\uffb1\072\uffb1\102\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\001\002\000\022\054\133\055\134\061" +
    "\136\062\127\063\130\064\132\065\135\066\131\001\002" +
    "\000\034\004\uffb4\005\uffb4\007\uffb4\010\uffb4\013\uffb4\016" +
    "\uffb4\017\uffb4\053\uffb4\072\uffb4\102\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\001\002\000\034\004\uffb2\005\uffb2\007\uffb2\010" +
    "\uffb2\013\uffb2\016\uffb2\017\uffb2\053\uffb2\072\uffb2\102\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\001\002\000\012\003\177\054" +
    "\133\055\134\103\176\001\002\000\064\003\uffb7\004\uffb7" +
    "\005\uffb7\007\uffb7\010\uffb7\013\uffb7\016\uffb7\017\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\072\uffb7\102\uffb7\103" +
    "\uffb7\104\uffb7\105\uffb7\106\uffb7\001\002\000\064\003\uffb6" +
    "\004\uffb6\005\uffb6\007\uffb6\010\uffb6\013\uffb6\016\uffb6\017" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\072\uffb6\102" +
    "\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\001\002\000\004" +
    "\072\201\001\002\000\004\052\202\001\002\000\024\004" +
    "\073\005\105\013\075\016\112\017\064\102\076\104\071" +
    "\105\111\106\100\001\002\000\004\053\204\001\002\000" +
    "\030\004\uffe2\005\uffe2\013\uffe2\014\205\016\uffe2\017\uffe2" +
    "\053\uffe2\102\uffe2\104\uffe2\105\uffe2\106\uffe2\001\002\000" +
    "\004\072\206\001\002\000\004\052\207\001\002\000\024" +
    "\004\073\005\105\013\075\016\112\017\064\102\076\104" +
    "\071\105\111\106\100\001\002\000\004\053\211\001\002" +
    "\000\026\004\uffe3\005\uffe3\013\uffe3\016\uffe3\017\uffe3\053" +
    "\uffe3\102\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000\010" +
    "\030\uffcb\053\uffcb\104\uffcb\001\002\000\010\030\uffce\053" +
    "\uffce\104\uffce\001\002\000\026\004\uffdb\005\uffdb\013\uffdb" +
    "\016\uffdb\017\uffdb\053\uffdb\102\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\001\002\000\004\072\216\001\002\000\006\003\217" +
    "\052\220\001\002\000\026\004\uffe0\005\uffe0\013\uffe0\016" +
    "\uffe0\017\uffe0\053\uffe0\102\uffe0\104\uffe0\105\uffe0\106\uffe0" +
    "\001\002\000\024\004\073\005\105\013\075\016\112\017" +
    "\064\102\076\104\071\105\111\106\100\001\002\000\004" +
    "\053\222\001\002\000\026\004\uffe1\005\uffe1\013\uffe1\016" +
    "\uffe1\017\uffe1\053\uffe1\102\uffe1\104\uffe1\105\uffe1\106\uffe1" +
    "\001\002\000\010\003\uffc8\073\uffc8\103\uffc8\001\002\000" +
    "\010\030\uffca\053\uffca\104\uffca\001\002\000\004\052\226" +
    "\001\002\000\026\004\073\005\105\013\075\016\112\017" +
    "\064\022\230\102\076\104\071\105\111\106\100\001\002" +
    "\000\004\053\232\001\002\000\004\053\231\001\002\000" +
    "\010\030\uffcc\053\uffcc\104\uffcc\001\002\000\010\030\uffcd" +
    "\053\uffcd\104\uffcd\001\002\000\006\002\uffd4\034\uffd4\001" +
    "\002\000\004\002\001\001\002\000\006\034\ufffd\070\014" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\005\005\053\004\001\001\000\004\013" +
    "\234\001\001\000\002\001\001\000\006\042\016\043\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\033\007\026\044\034\045\031\052\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\033\007\026\045\031\052\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\052\051\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\112\007\026" +
    "\015\066\017\064\020\107\021\102\022\100\023\103\024" +
    "\105\026\062\027\067\030\106\031\101\032\071\033\065" +
    "\034\076\001\001\000\002\001\001\000\020\015\066\017" +
    "\214\020\107\021\102\022\100\023\103\024\105\001\001" +
    "\000\002\001\001\000\036\006\112\007\026\015\066\017" +
    "\064\020\107\021\102\022\100\023\103\024\105\026\062" +
    "\027\067\030\106\031\101\034\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\066\017" +
    "\177\020\107\021\102\022\100\023\103\024\105\001\001" +
    "\000\012\015\066\020\174\021\102\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\112\007\026" +
    "\015\066\017\064\020\107\021\102\022\100\023\103\024" +
    "\105\026\062\027\067\030\106\031\101\032\124\033\065" +
    "\034\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\066\020\164\021\102\022\100\001\001\000\012" +
    "\015\066\020\162\021\102\022\100\001\001\000\012\015" +
    "\066\020\160\021\102\022\100\001\001\000\012\015\066" +
    "\020\156\021\102\022\100\001\001\000\010\015\066\021" +
    "\154\022\100\001\001\000\010\015\066\021\144\022\100" +
    "\001\001\000\012\015\066\020\142\021\102\022\100\001" +
    "\001\000\012\015\066\020\140\021\102\022\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\066\022\152\001\001\000\006\015" +
    "\066\022\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\066" +
    "\020\171\021\102\022\100\024\172\001\001\000\014\015" +
    "\066\020\171\021\102\022\100\024\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\112\007\026\015\066\017\064\020\107\021\102" +
    "\022\100\023\103\024\105\026\062\027\067\030\106\031" +
    "\101\032\202\033\065\034\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\112\007\026\015\066\017\064\020\107\021\102" +
    "\022\100\023\103\024\105\026\062\027\067\030\106\031" +
    "\101\032\207\033\065\034\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\112\007\026\015\066\017\064\020" +
    "\107\021\102\022\100\023\103\024\105\026\062\027\067" +
    "\030\106\031\101\032\220\033\065\034\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\006\112\007\026\015" +
    "\066\017\064\020\107\021\102\022\100\023\103\024\105" +
    "\026\062\027\067\030\106\031\101\032\226\033\065\034" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;
    public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_logico ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_logico ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_logica ::= expresion_logica AND error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_cuerpo_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= dec_variables 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_var_multiple ::= lista_identificadores EQUAL lista_valores 
            {
              Object RESULT =null;
		 System.out.println("Es una declaración múltiple de variables"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_var_individual ::= IDENTIFIER EQUAL FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: BOOLEAN****************");
                            parser.simbolo=new Simbolo(id, "boolean", ""+bool, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_var_individual ::= IDENTIFIER EQUAL TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: BOOLEAN****************");
                            parser.simbolo=new Simbolo(id, "boolean", ""+bool, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_var_individual ::= IDENTIFIER EQUAL STRING_SIMPLE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: SIMPLE STRING****************");
                            parser.simbolo=new Simbolo(id, "string", ""+cadena, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_var_individual ::= IDENTIFIER EQUAL STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: STRING****************");
                            parser.simbolo=new Simbolo(id, "string", ""+cadena, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_var_individual ::= IDENTIFIER EQUAL FLOAT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String flotante = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: FLOAT****************");
                            parser.simbolo=new Simbolo(id, "float", ""+flotante, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_var_individual ::= IDENTIFIER EQUAL INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$ParserPython$stack.peek()).value;
		  System.out.println("****************DECLARACION: INTEGER****************");
                            parser.simbolo=new Simbolo(id, "int", ""+entero, "metodo");
                            if(parser.tabla.agregar(id,parser.simbolo)){
                                System.out.println("--------Variable agregada-------->"+id);
                                System.out.println(parser.tabla.mostrar());
                            }else{
                                System.out.println("-------Variable NO agregada------->"+id);
                            }
                        
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_variables ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_importaciones ::= 
            {
              Object RESULT =null;
		 System.out.println("!!!!!!!!!!!!!!!DECLARACION DE IMPORTACION VACIA!!!!!!!!!!!!!!!"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_importaciones ::= FROM IDENTIFIER IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion FROM"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= dec_importaciones bloque_clases 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("programa",41, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

