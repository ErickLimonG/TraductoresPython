
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 29 16:01:01 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 29 16:01:01 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\025\004\000\002\025" +
    "\003\000\002\005\004\000\002\013\005\000\002\013\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\005\000" +
    "\002\010\005\000\002\011\005\000\002\011\005\000\002" +
    "\012\005\000\002\012\005\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\015\000\002\027\010\000\002" +
    "\030\010\000\002\030\006\000\002\031\015\000\002\031" +
    "\013\000\002\032\003\000\002\033\003\000\002\033\004" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\042\003\000\002\042\004\000\002\043\010\000\002" +
    "\043\005\000\002\043\006\000\002\044\003\000\002\044" +
    "\004\000\002\052\003\000\002\052\003\000\002\045\013" +
    "\000\002\045\012\000\002\045\012\000\002\045\013\000" +
    "\002\045\007\000\002\047\003\000\002\047\005\000\002" +
    "\047\004\000\002\051\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\034\004\001\002\000\006\003\011\104" +
    "\012\001\002\000\006\002\007\034\004\001\002\000\006" +
    "\002\uffde\034\uffde\001\002\000\004\002\001\001\002\000" +
    "\006\002\uffdd\034\uffdd\001\002\000\004\072\234\001\002" +
    "\000\004\072\013\001\002\000\006\003\014\052\015\001" +
    "\002\000\006\002\uffda\034\uffda\001\002\000\006\030\023" +
    "\104\024\001\002\000\030\004\ufffa\005\ufffa\013\ufffa\016" +
    "\ufffa\017\ufffa\030\ufffa\053\ufffa\102\ufffa\104\ufffa\105\ufffa" +
    "\106\ufffa\001\002\000\010\030\uffd9\053\uffd9\104\uffd9\001" +
    "\002\000\010\030\uffd6\053\uffd6\104\uffd6\001\002\000\030" +
    "\004\ufffb\005\ufffb\013\ufffb\016\ufffb\017\ufffb\030\ufffb\053" +
    "\ufffb\102\ufffb\104\ufffb\105\ufffb\106\ufffb\001\002\000\010" +
    "\030\uffd7\053\uffd7\104\uffd7\001\002\000\004\104\076\001" +
    "\002\000\006\060\072\073\071\001\002\000\010\030\023" +
    "\053\067\104\024\001\002\000\004\060\027\001\002\000" +
    "\016\102\043\104\041\105\031\106\044\107\036\110\030" +
    "\001\002\000\032\004\uffee\005\uffee\013\uffee\016\uffee\017" +
    "\uffee\030\uffee\053\uffee\073\uffee\102\uffee\104\uffee\105\uffee" +
    "\106\uffee\001\002\000\070\003\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\013\ufff1\016\ufff1\017\ufff1\030\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\072\ufff1\073\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\105\ufff1\106\ufff1\001\002\000\030\004" +
    "\ufff8\005\ufff8\013\ufff8\016\ufff8\017\ufff8\030\ufff8\053\ufff8" +
    "\102\ufff8\104\ufff8\105\ufff8\106\ufff8\001\002\000\070\003" +
    "\uffca\004\uffca\005\uffca\007\uffca\010\uffca\013\uffca\016\uffca" +
    "\017\uffca\030\uffca\053\uffca\054\uffca\055\uffca\056\055\057" +
    "\054\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\072\uffca\073\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106" +
    "\uffca\001\002\000\032\004\ufff2\005\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\030\ufff2\053\ufff2\073\ufff2\102\ufff2\104\ufff2\105" +
    "\ufff2\106\ufff2\001\002\000\004\073\064\001\002\000\032" +
    "\004\uffef\005\uffef\013\uffef\016\uffef\017\uffef\030\uffef\053" +
    "\uffef\073\uffef\102\uffef\104\uffef\105\uffef\106\uffef\001\002" +
    "\000\070\003\uffbf\004\uffbf\005\uffbf\007\uffbf\010\uffbf\013" +
    "\uffbf\016\uffbf\017\uffbf\030\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\072\uffbf\073\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\001\002\000\070\003\uffc5\004\uffc5\005" +
    "\uffc5\007\uffc5\010\uffc5\013\uffc5\016\uffc5\017\uffc5\030\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\072\uffc5\073\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\001\002\000" +
    "\070\003\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0\013\uffc0" +
    "\016\uffc0\017\uffc0\030\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\072\uffc0\073\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\uffc0\106\uffc0\001\002\000\036\004\ufff3\005\ufff3\013\ufff3" +
    "\016\ufff3\017\ufff3\030\ufff3\053\ufff3\054\050\055\051\073" +
    "\ufff3\102\ufff3\104\ufff3\105\ufff3\106\ufff3\001\002\000\012" +
    "\102\043\104\041\105\031\106\044\001\002\000\070\003" +
    "\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\013\ufff0\016\ufff0" +
    "\017\ufff0\030\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\072\ufff0\073\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106" +
    "\ufff0\001\002\000\012\003\047\054\050\055\051\103\046" +
    "\001\002\000\070\003\uffbe\004\uffbe\005\uffbe\007\uffbe\010" +
    "\uffbe\013\uffbe\016\uffbe\017\uffbe\030\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\072\uffbe\073\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\001\002\000\070\003\uffbd\004" +
    "\uffbd\005\uffbd\007\uffbd\010\uffbd\013\uffbd\016\uffbd\017\uffbd" +
    "\030\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\072\uffbd" +
    "\073\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\001" +
    "\002\000\014\003\062\102\043\104\041\105\031\106\044" +
    "\001\002\000\014\003\052\102\043\104\041\105\031\106" +
    "\044\001\002\000\064\003\uffc6\004\uffc6\005\uffc6\007\uffc6" +
    "\010\uffc6\013\uffc6\016\uffc6\017\uffc6\030\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\072\uffc6\073\uffc6\102\uffc6\103\uffc6\104\uffc6\105" +
    "\uffc6\106\uffc6\001\002\000\070\003\uffc8\004\uffc8\005\uffc8" +
    "\007\uffc8\010\uffc8\013\uffc8\016\uffc8\017\uffc8\030\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\055\057\054\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\072\uffc8\073\uffc8\102" +
    "\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\001\002\000\014" +
    "\003\060\102\043\104\041\105\031\106\044\001\002\000" +
    "\014\003\056\102\043\104\041\105\031\106\044\001\002" +
    "\000\070\003\uffc2\004\uffc2\005\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\016\uffc2\017\uffc2\030\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\072\uffc2\073\uffc2\102\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\001\002\000\070\003\uffc4\004\uffc4\005" +
    "\uffc4\007\uffc4\010\uffc4\013\uffc4\016\uffc4\017\uffc4\030\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\072\uffc4\073\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002\000" +
    "\070\003\uffc1\004\uffc1\005\uffc1\007\uffc1\010\uffc1\013\uffc1" +
    "\016\uffc1\017\uffc1\030\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\072\uffc1\073\uffc1\102\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\106\uffc1\001\002\000\070\003\uffc3\004\uffc3\005\uffc3" +
    "\007\uffc3\010\uffc3\013\uffc3\016\uffc3\017\uffc3\030\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\072\uffc3\073\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\001\002\000\064" +
    "\003\uffc7\004\uffc7\005\uffc7\007\uffc7\010\uffc7\013\uffc7\016" +
    "\uffc7\017\uffc7\030\uffc7\053\uffc7\054\uffc7\055\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\072\uffc7\073" +
    "\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\001\002" +
    "\000\070\003\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9\013" +
    "\uffc9\016\uffc9\017\uffc9\030\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\055\057\054\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\072\uffc9\073\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\001\002\000\016\102\043\104\041\105" +
    "\031\106\044\107\036\110\030\001\002\000\030\004\ufff4" +
    "\005\ufff4\013\ufff4\016\ufff4\017\ufff4\030\ufff4\053\ufff4\102" +
    "\ufff4\104\ufff4\105\ufff4\106\ufff4\001\002\000\032\004\ufff5" +
    "\005\ufff5\013\ufff5\016\ufff5\017\ufff5\030\ufff5\053\ufff5\073" +
    "\064\102\ufff5\104\ufff5\105\ufff5\106\ufff5\001\002\000\006" +
    "\002\uffdc\034\uffdc\001\002\000\010\030\uffd8\053\uffd8\104" +
    "\uffd8\001\002\000\004\104\075\001\002\000\016\102\043" +
    "\104\041\105\031\106\044\107\036\110\030\001\002\000" +
    "\030\004\ufff9\005\ufff9\013\ufff9\016\ufff9\017\ufff9\030\ufff9" +
    "\053\ufff9\102\ufff9\104\ufff9\105\ufff9\106\ufff9\001\002\000" +
    "\004\060\ufff6\001\002\000\006\060\ufff7\073\071\001\002" +
    "\000\004\102\077\001\002\000\010\003\102\103\100\104" +
    "\104\001\002\000\004\072\226\001\002\000\010\003\110" +
    "\073\106\103\107\001\002\000\004\103\105\001\002\000" +
    "\010\003\uffd0\073\uffd0\103\uffd0\001\002\000\010\003\uffcd" +
    "\073\uffcd\103\uffcd\001\002\000\010\030\uffd1\053\uffd1\104" +
    "\uffd1\001\002\000\004\104\104\001\002\000\004\072\111" +
    "\001\002\000\010\003\uffce\073\uffce\103\uffce\001\002\000" +
    "\004\052\112\001\002\000\026\004\122\005\130\013\124" +
    "\016\134\017\114\022\123\102\043\104\120\105\031\106" +
    "\044\001\002\000\026\004\uffe0\005\uffe0\013\uffe0\016\uffe0" +
    "\017\uffe0\053\uffe0\102\uffe0\104\uffe0\105\uffe0\106\uffe0\001" +
    "\002\000\016\004\122\005\130\102\043\104\041\105\031" +
    "\106\044\001\002\000\026\004\122\005\130\013\124\016" +
    "\134\017\114\053\uffe4\102\043\104\120\105\031\106\044" +
    "\001\002\000\026\004\uffe1\005\uffe1\013\uffe1\016\uffe1\017" +
    "\uffe1\053\uffe1\102\uffe1\104\uffe1\105\uffe1\106\uffe1\001\002" +
    "\000\026\004\uffed\005\uffed\013\uffed\016\uffed\017\uffed\053" +
    "\uffed\102\uffed\104\uffed\105\uffed\106\uffed\001\002\000\056" +
    "\004\uffc0\005\uffc0\013\uffc0\016\uffc0\017\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\072\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\073\071\102\uffc0\104" +
    "\uffc0\105\uffc0\106\uffc0\001\002\000\004\053\215\001\002" +
    "\000\034\004\uffb7\005\uffb7\007\uffb7\010\uffb7\013\uffb7\016" +
    "\uffb7\017\uffb7\053\uffb7\072\uffb7\102\uffb7\104\uffb7\105\uffb7" +
    "\106\uffb7\001\002\000\004\053\214\001\002\000\016\004" +
    "\122\005\130\102\043\104\041\105\031\106\044\001\002" +
    "\000\026\004\uffe3\005\uffe3\013\uffe3\016\uffe3\017\uffe3\053" +
    "\uffe3\102\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000\026" +
    "\004\uffeb\005\uffeb\013\uffeb\016\uffeb\017\uffeb\053\uffeb\102" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\001\002\000\034\004\uffcb" +
    "\005\uffcb\007\173\010\174\013\uffcb\016\uffcb\017\uffcb\053" +
    "\uffcb\072\uffcb\102\uffcb\104\uffcb\105\uffcb\106\uffcb\001\002" +
    "\000\034\004\uffb6\005\uffb6\007\uffb6\010\uffb6\013\uffb6\016" +
    "\uffb6\017\uffb6\053\uffb6\072\uffb6\102\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\001\002\000\034\004\uffbc\005\uffbc\007\uffbc\010" +
    "\uffbc\013\uffbc\016\uffbc\017\uffbc\053\uffbc\072\uffbc\102\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\001\002\000\026\004\uffec\005" +
    "\uffec\013\uffec\016\uffec\017\uffec\053\uffec\102\uffec\104\uffec" +
    "\105\uffec\106\uffec\001\002\000\050\004\uffcc\005\uffcc\013" +
    "\uffcc\016\uffcc\017\uffcc\053\uffcc\054\050\055\051\061\156" +
    "\062\151\063\152\064\153\065\155\066\154\072\uffcc\102" +
    "\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000\004\104\136" +
    "\001\002\000\026\004\uffdf\005\uffdf\013\uffdf\016\uffdf\017" +
    "\uffdf\053\uffdf\102\uffdf\104\uffdf\105\uffdf\106\uffdf\001\002" +
    "\000\004\050\137\001\002\000\004\051\140\001\002\000" +
    "\004\102\141\001\002\000\006\105\031\106\044\001\002" +
    "\000\004\103\143\001\002\000\004\072\144\001\002\000" +
    "\006\003\145\052\146\001\002\000\026\004\uffe5\005\uffe5" +
    "\013\uffe5\016\uffe5\017\uffe5\053\uffe5\102\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\001\002\000\024\004\122\005\130\013\124" +
    "\016\134\017\114\102\043\104\120\105\031\106\044\001" +
    "\002\000\004\053\150\001\002\000\026\004\uffe6\005\uffe6" +
    "\013\uffe6\016\uffe6\017\uffe6\053\uffe6\102\uffe6\104\uffe6\105" +
    "\uffe6\106\uffe6\001\002\000\014\003\171\102\043\104\041" +
    "\105\031\106\044\001\002\000\014\003\167\102\043\104" +
    "\041\105\031\106\044\001\002\000\014\003\165\102\043" +
    "\104\041\105\031\106\044\001\002\000\014\003\163\102" +
    "\043\104\041\105\031\106\044\001\002\000\014\003\161" +
    "\102\043\104\041\105\031\106\044\001\002\000\014\003" +
    "\157\102\043\104\041\105\031\106\044\001\002\000\034" +
    "\004\uffaf\005\uffaf\007\uffaf\010\uffaf\013\uffaf\016\uffaf\017" +
    "\uffaf\053\uffaf\072\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\001\002\000\040\004\uffb5\005\uffb5\007\uffb5\010\uffb5\013" +
    "\uffb5\016\uffb5\017\uffb5\053\uffb5\054\050\055\051\072\uffb5" +
    "\102\uffb5\104\uffb5\105\uffb5\106\uffb5\001\002\000\034\004" +
    "\uffaa\005\uffaa\007\uffaa\010\uffaa\013\uffaa\016\uffaa\017\uffaa" +
    "\053\uffaa\072\uffaa\102\uffaa\104\uffaa\105\uffaa\106\uffaa\001" +
    "\002\000\040\004\uffb0\005\uffb0\007\uffb0\010\uffb0\013\uffb0" +
    "\016\uffb0\017\uffb0\053\uffb0\054\050\055\051\072\uffb0\102" +
    "\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000\034\004\uffab" +
    "\005\uffab\007\uffab\010\uffab\013\uffab\016\uffab\017\uffab\053" +
    "\uffab\072\uffab\102\uffab\104\uffab\105\uffab\106\uffab\001\002" +
    "\000\040\004\uffb1\005\uffb1\007\uffb1\010\uffb1\013\uffb1\016" +
    "\uffb1\017\uffb1\053\uffb1\054\050\055\051\072\uffb1\102\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\001\002\000\034\004\uffad\005" +
    "\uffad\007\uffad\010\uffad\013\uffad\016\uffad\017\uffad\053\uffad" +
    "\072\uffad\102\uffad\104\uffad\105\uffad\106\uffad\001\002\000" +
    "\040\004\uffb3\005\uffb3\007\uffb3\010\uffb3\013\uffb3\016\uffb3" +
    "\017\uffb3\053\uffb3\054\050\055\051\072\uffb3\102\uffb3\104" +
    "\uffb3\105\uffb3\106\uffb3\001\002\000\034\004\uffac\005\uffac" +
    "\007\uffac\010\uffac\013\uffac\016\uffac\017\uffac\053\uffac\072" +
    "\uffac\102\uffac\104\uffac\105\uffac\106\uffac\001\002\000\040" +
    "\004\uffb2\005\uffb2\007\uffb2\010\uffb2\013\uffb2\016\uffb2\017" +
    "\uffb2\053\uffb2\054\050\055\051\072\uffb2\102\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\001\002\000\034\004\uffae\005\uffae\007" +
    "\uffae\010\uffae\013\uffae\016\uffae\017\uffae\053\uffae\072\uffae" +
    "\102\uffae\104\uffae\105\uffae\106\uffae\001\002\000\040\004" +
    "\uffb4\005\uffb4\007\uffb4\010\uffb4\013\uffb4\016\uffb4\017\uffb4" +
    "\053\uffb4\054\050\055\051\072\uffb4\102\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\001\002\000\020\003\201\004\122\005\130" +
    "\102\043\104\041\105\031\106\044\001\002\000\020\003" +
    "\176\004\122\005\130\102\043\104\041\105\031\106\044" +
    "\001\002\000\034\004\uffba\005\uffba\007\uffba\010\uffba\013" +
    "\uffba\016\uffba\017\uffba\053\uffba\072\uffba\102\uffba\104\uffba" +
    "\105\uffba\106\uffba\001\002\000\034\004\uffb8\005\uffb8\007" +
    "\uffb8\010\uffb8\013\uffb8\016\uffb8\017\uffb8\053\uffb8\072\uffb8" +
    "\102\uffb8\104\uffb8\105\uffb8\106\uffb8\001\002\000\022\054" +
    "\050\055\051\061\156\062\151\063\152\064\153\065\155" +
    "\066\154\001\002\000\034\004\uffbb\005\uffbb\007\uffbb\010" +
    "\uffbb\013\uffbb\016\uffbb\017\uffbb\053\uffbb\072\uffbb\102\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\001\002\000\034\004\uffb9\005" +
    "\uffb9\007\uffb9\010\uffb9\013\uffb9\016\uffb9\017\uffb9\053\uffb9" +
    "\072\uffb9\102\uffb9\104\uffb9\105\uffb9\106\uffb9\001\002\000" +
    "\004\072\203\001\002\000\004\052\204\001\002\000\024" +
    "\004\122\005\130\013\124\016\134\017\114\102\043\104" +
    "\120\105\031\106\044\001\002\000\004\053\206\001\002" +
    "\000\030\004\uffe9\005\uffe9\013\uffe9\014\207\016\uffe9\017" +
    "\uffe9\053\uffe9\102\uffe9\104\uffe9\105\uffe9\106\uffe9\001\002" +
    "\000\004\072\210\001\002\000\004\052\211\001\002\000" +
    "\024\004\122\005\130\013\124\016\134\017\114\102\043" +
    "\104\120\105\031\106\044\001\002\000\004\053\213\001" +
    "\002\000\026\004\uffea\005\uffea\013\uffea\016\uffea\017\uffea" +
    "\053\uffea\102\uffea\104\uffea\105\uffea\106\uffea\001\002\000" +
    "\010\030\uffd2\053\uffd2\104\uffd2\001\002\000\010\030\uffd5" +
    "\053\uffd5\104\uffd5\001\002\000\026\004\uffe2\005\uffe2\013" +
    "\uffe2\016\uffe2\017\uffe2\053\uffe2\102\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\001\002\000\004\072\220\001\002\000\006\003" +
    "\221\052\222\001\002\000\026\004\uffe7\005\uffe7\013\uffe7" +
    "\016\uffe7\017\uffe7\053\uffe7\102\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\001\002\000\024\004\122\005\130\013\124\016\134" +
    "\017\114\102\043\104\120\105\031\106\044\001\002\000" +
    "\004\053\224\001\002\000\026\004\uffe8\005\uffe8\013\uffe8" +
    "\016\uffe8\017\uffe8\053\uffe8\102\uffe8\104\uffe8\105\uffe8\106" +
    "\uffe8\001\002\000\010\003\uffcf\073\uffcf\103\uffcf\001\002" +
    "\000\004\052\227\001\002\000\026\004\122\005\130\013" +
    "\124\016\134\017\114\022\231\102\043\104\120\105\031" +
    "\106\044\001\002\000\004\053\233\001\002\000\004\053" +
    "\232\001\002\000\010\030\uffd3\053\uffd3\104\uffd3\001\002" +
    "\000\010\030\uffd4\053\uffd4\104\uffd4\001\002\000\006\002" +
    "\uffdb\034\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\042\004\043\005\001\001\000\002\001" +
    "\001\000\004\043\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\021" +
    "\007\020\010\015\011\025\044\024\045\017\052\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\021\007\020\010\015\011\025" +
    "\045\017\052\067\001\001\000\002\001\001\000\020\012" +
    "\031\014\034\015\036\016\033\020\041\021\032\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\036\020\044" +
    "\021\032\022\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\036" +
    "\021\062\022\037\001\001\000\010\015\036\021\052\022" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\036\022\060\001\001\000\006\015\036\022\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\064\014\065\015\036\016\033\020\041\021\032" +
    "\022\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\073\001\001" +
    "\000\016\014\072\015\036\016\033\020\041\021\032\022" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\100\051\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\006\134\007\020\010\015\011" +
    "\025\015\036\017\115\020\132\021\032\022\037\023\126" +
    "\024\130\026\112\027\116\030\131\031\125\032\120\033" +
    "\114\034\124\001\001\000\002\001\001\000\020\015\036" +
    "\017\216\020\132\021\032\022\037\023\126\024\130\001" +
    "\001\000\042\006\134\007\020\010\015\011\025\015\036" +
    "\017\115\020\132\021\032\022\037\023\126\024\130\026" +
    "\112\027\116\030\131\031\125\034\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\036" +
    "\017\201\020\132\021\032\022\037\023\126\024\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\134\007\020\010" +
    "\015\011\025\015\036\017\115\020\132\021\032\022\037" +
    "\023\126\024\130\026\112\027\116\030\131\031\125\032" +
    "\146\033\114\034\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\036\020\171\021\032\022\037\001" +
    "\001\000\012\015\036\020\167\021\032\022\037\001\001" +
    "\000\012\015\036\020\165\021\032\022\037\001\001\000" +
    "\012\015\036\020\163\021\032\022\037\001\001\000\012" +
    "\015\036\020\161\021\032\022\037\001\001\000\012\015" +
    "\036\020\157\021\032\022\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\036\020\176\021\032" +
    "\022\037\024\177\001\001\000\014\015\036\020\176\021" +
    "\032\022\037\024\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\134" +
    "\007\020\010\015\011\025\015\036\017\115\020\132\021" +
    "\032\022\037\023\126\024\130\026\112\027\116\030\131" +
    "\031\125\032\204\033\114\034\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\006\134\007\020\010\015\011\025\015\036\017" +
    "\115\020\132\021\032\022\037\023\126\024\130\026\112" +
    "\027\116\030\131\031\125\032\211\033\114\034\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\134\007\020" +
    "\010\015\011\025\015\036\017\115\020\132\021\032\022" +
    "\037\023\126\024\130\026\112\027\116\030\131\031\125" +
    "\032\222\033\114\034\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\006\134\007\020\010\015\011\025\015\036\017\115\020" +
    "\132\021\032\022\037\023\126\024\130\026\112\027\116" +
    "\030\131\031\125\032\227\033\114\034\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termino_logico ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino_logico ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_logica ::= expresion_logica AND error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_logica ::= expresion_logica OR termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",39, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_metodo",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_cuerpo_clase ::= dec_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_cuerpo_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",40, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",34, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clase ::= CLASS IDENTIFIER COLON error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Se esperaba un INDENT despues de CLASS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // clase ::= CLASS error COLON 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= dec_variables 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_sentencias",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;
		 System.out.println("Bloque con sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",24, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de FOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un INDENT despues de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_while ::= WHILE expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_if ::= IF expresion COLON INDENT bloque DEDENT ELSE COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= valor_asignacion COMMA lista_valores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_valores ::= valor_asignacion COMMA valor_asignacion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_identificadores ::= IDENTIFIER COMMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_identificadores ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificadores",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_var_multiple ::= lista_identificadores EQUAL lista_valores 
            {
              Object RESULT =null;
		 System.out.println("Es una declaración múltiple de variables"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_multiple",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var_individual ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		 System.out.println("Es una declaración de variable individual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_var_individual",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_variables ::= dec_var_multiple 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_variables ::= dec_var_individual 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_variables",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloque_clases EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

