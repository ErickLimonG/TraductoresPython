
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 08 18:52:09 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 08 18:52:09 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\021\004\000\002\021" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\007\005\000\002" +
    "\007\003\000\002\006\005\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\017\003\000\002\017\005\000\002" +
    "\041\002\000\002\017\011\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\040\004\000\002\040" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\006\000\002\023\006\000\002\024\006\000" +
    "\002\024\007\000\002\025\005\000\002\026\004\000\002" +
    "\030\013\000\002\031\003\000\002\031\004\000\002\033" +
    "\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\013\012\016\006\001\002\000\010\002" +
    "\uffcb\013\uffcb\016\uffcb\001\002\000\010\002\141\013\012" +
    "\016\006\001\002\000\004\102\130\001\002\000\012\002" +
    "\uffca\013\uffca\014\uffca\016\uffca\001\002\000\004\014\125" +
    "\001\002\000\012\002\uffc8\013\uffc8\014\uffc8\016\uffc8\001" +
    "\002\000\014\003\022\100\025\102\023\103\015\104\026" +
    "\001\002\000\012\002\uffc9\013\uffc9\014\uffc9\016\uffc9\001" +
    "\002\000\010\007\102\010\103\070\122\001\002\000\060" +
    "\002\ufff1\003\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\070\ufff1\100\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\104\ufff1\001\002\000\060\002\uffeb" +
    "\003\uffeb\007\uffeb\010\uffeb\013\uffeb\014\uffeb\016\uffeb\052" +
    "\uffeb\053\uffeb\054\037\055\036\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\070\uffeb\100\uffeb\101\uffeb\102" +
    "\uffeb\103\uffeb\104\uffeb\001\002\000\020\002\uffdd\007\uffdd" +
    "\010\uffdd\013\uffdd\014\uffdd\016\uffdd\070\uffdd\001\002\000" +
    "\060\002\uffe0\003\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\070\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\103\uffe0\104\uffe0\001\002\000\060\002" +
    "\uffe6\003\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\070\uffe6\100\uffe6\101\uffe6" +
    "\102\uffe6\103\uffe6\104\uffe6\001\002\000\004\070\070\001" +
    "\002\000\060\002\uffe1\003\uffe1\007\uffe1\010\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\070\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\001\002\000" +
    "\022\052\032\053\033\057\053\060\046\061\047\062\050" +
    "\063\052\064\051\001\002\000\012\100\025\102\023\103" +
    "\015\104\026\001\002\000\060\002\ufff0\003\ufff0\007\ufff0" +
    "\010\ufff0\013\ufff0\014\ufff0\016\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\070\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104" +
    "\ufff0\001\002\000\012\003\031\052\032\053\033\101\030" +
    "\001\002\000\060\002\uffdf\003\uffdf\007\uffdf\010\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\070" +
    "\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\001\002" +
    "\000\060\002\uffde\003\uffde\007\uffde\010\uffde\013\uffde\014" +
    "\uffde\016\uffde\052\uffde\053\uffde\054\uffde\055\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\070\uffde\100" +
    "\uffde\101\uffde\102\uffde\103\uffde\104\uffde\001\002\000\014" +
    "\003\044\100\025\102\023\103\015\104\026\001\002\000" +
    "\014\003\034\100\025\102\023\103\015\104\026\001\002" +
    "\000\054\002\uffe7\003\uffe7\007\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\052\uffe7\053\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\070\uffe7\100\uffe7\101\uffe7\102" +
    "\uffe7\103\uffe7\104\uffe7\001\002\000\060\002\uffe9\003\uffe9" +
    "\007\uffe9\010\uffe9\013\uffe9\014\uffe9\016\uffe9\052\uffe9\053" +
    "\uffe9\054\037\055\036\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\070\uffe9\100\uffe9\101\uffe9\102\uffe9\103" +
    "\uffe9\104\uffe9\001\002\000\014\003\042\100\025\102\023" +
    "\103\015\104\026\001\002\000\014\003\040\100\025\102" +
    "\023\103\015\104\026\001\002\000\060\002\uffe3\003\uffe3" +
    "\007\uffe3\010\uffe3\013\uffe3\014\uffe3\016\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\070\uffe3\100\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\001\002\000\060\002\uffe5\003\uffe5\007\uffe5" +
    "\010\uffe5\013\uffe5\014\uffe5\016\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\070\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\001\002\000\060\002\uffe2\003\uffe2\007\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\016\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\070\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\001" +
    "\002\000\060\002\uffe4\003\uffe4\007\uffe4\010\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\070\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\001\002\000" +
    "\054\002\uffe8\003\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8" +
    "\016\uffe8\052\uffe8\053\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\070\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\103\uffe8\104\uffe8\001\002\000\060\002\uffea\003\uffea\007" +
    "\uffea\010\uffea\013\uffea\014\uffea\016\uffea\052\uffea\053\uffea" +
    "\054\037\055\036\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\070\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\001\002\000\014\003\066\100\025\102\023\103" +
    "\015\104\026\001\002\000\014\003\064\100\025\102\023" +
    "\103\015\104\026\001\002\000\014\003\062\100\025\102" +
    "\023\103\015\104\026\001\002\000\014\003\060\100\025" +
    "\102\023\103\015\104\026\001\002\000\014\003\056\100" +
    "\025\102\023\103\015\104\026\001\002\000\014\003\054" +
    "\100\025\102\023\103\015\104\026\001\002\000\030\002" +
    "\uffd2\007\uffd2\010\uffd2\013\uffd2\014\uffd2\016\uffd2\070\uffd2" +
    "\100\uffd2\102\uffd2\103\uffd2\104\uffd2\001\002\000\034\002" +
    "\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\016\uffd8\052\032" +
    "\053\033\070\uffd8\100\uffd8\102\uffd8\103\uffd8\104\uffd8\001" +
    "\002\000\030\002\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd" +
    "\016\uffcd\070\uffcd\100\uffcd\102\uffcd\103\uffcd\104\uffcd\001" +
    "\002\000\034\002\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\052\032\053\033\070\uffd3\100\uffd3\102\uffd3\103" +
    "\uffd3\104\uffd3\001\002\000\030\002\uffce\007\uffce\010\uffce" +
    "\013\uffce\014\uffce\016\uffce\070\uffce\100\uffce\102\uffce\103" +
    "\uffce\104\uffce\001\002\000\034\002\uffd4\007\uffd4\010\uffd4" +
    "\013\uffd4\014\uffd4\016\uffd4\052\032\053\033\070\uffd4\100" +
    "\uffd4\102\uffd4\103\uffd4\104\uffd4\001\002\000\030\002\uffd0" +
    "\007\uffd0\010\uffd0\013\uffd0\014\uffd0\016\uffd0\070\uffd0\100" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\001\002\000\034\002\uffd6" +
    "\007\uffd6\010\uffd6\013\uffd6\014\uffd6\016\uffd6\052\032\053" +
    "\033\070\uffd6\100\uffd6\102\uffd6\103\uffd6\104\uffd6\001\002" +
    "\000\030\002\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\070\uffcf\100\uffcf\102\uffcf\103\uffcf\104\uffcf\001\002" +
    "\000\034\002\uffd5\007\uffd5\010\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\052\032\053\033\070\uffd5\100\uffd5\102\uffd5\103\uffd5" +
    "\104\uffd5\001\002\000\030\002\uffd1\007\uffd1\010\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\070\uffd1\100\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\001\002\000\034\002\uffd7\007\uffd7\010\uffd7\013" +
    "\uffd7\014\uffd7\016\uffd7\052\032\053\033\070\uffd7\100\uffd7" +
    "\102\uffd7\103\uffd7\104\uffd7\001\002\000\016\013\012\016" +
    "\006\100\025\102\074\103\015\104\026\001\002\000\012" +
    "\002\uffbd\013\uffbd\014\uffbd\016\uffbd\001\002\000\012\002" +
    "\uffbe\013\uffbe\014\uffbe\016\uffbe\001\002\000\016\013\012" +
    "\016\006\100\025\102\074\103\015\104\026\001\002\000" +
    "\040\002\uffe1\013\uffe1\014\uffe1\016\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\113\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\001\002\000\004\014\uffc7\001\002" +
    "\000\012\002\uffbc\013\uffbc\014\uffbc\016\uffbc\001\002\000" +
    "\012\002\uffc0\013\uffc0\014\uffc0\016\uffc0\001\002\000\016" +
    "\002\uffec\007\102\010\103\013\uffec\014\uffec\016\uffec\001" +
    "\002\000\032\002\uffed\013\uffed\014\uffed\016\uffed\052\032" +
    "\053\033\057\053\060\046\061\047\062\050\063\052\064" +
    "\051\001\002\000\012\100\025\102\023\103\015\104\026" +
    "\001\002\000\014\003\105\100\025\102\023\103\015\104" +
    "\026\001\002\000\012\100\uffdb\102\uffdb\103\uffdb\104\uffdb" +
    "\001\002\000\020\002\uffd9\007\uffd9\010\uffd9\013\uffd9\014" +
    "\uffd9\016\uffd9\070\uffd9\001\002\000\012\100\025\102\023" +
    "\103\015\104\026\001\002\000\006\007\110\010\103\001" +
    "\002\000\014\003\112\100\025\102\023\103\015\104\026" +
    "\001\002\000\020\002\uffdc\007\uffdc\010\uffdc\013\uffdc\014" +
    "\uffdc\016\uffdc\070\uffdc\001\002\000\020\002\uffda\007\uffda" +
    "\010\uffda\013\uffda\014\uffda\016\uffda\070\uffda\001\002\000" +
    "\016\100\025\102\023\103\015\104\026\105\117\106\114" +
    "\001\002\000\012\002\uffee\013\uffee\014\uffee\016\uffee\001" +
    "\002\000\012\002\ufff2\013\ufff2\014\ufff2\016\ufff2\001\002" +
    "\000\012\002\ufff4\013\ufff4\014\ufff4\016\ufff4\001\002\000" +
    "\012\002\uffef\013\uffef\014\uffef\016\uffef\001\002\000\016" +
    "\002\ufff3\013\ufff3\014\ufff3\016\ufff3\052\032\053\033\001" +
    "\002\000\012\002\uffbf\013\uffbf\014\uffbf\016\uffbf\001\002" +
    "\000\016\013\012\016\006\100\025\102\074\103\015\104" +
    "\026\001\002\000\004\014\uffc6\001\002\000\012\002\uffc2" +
    "\013\uffc2\014\uffc2\016\uffc2\001\002\000\004\070\126\001" +
    "\002\000\016\013\012\016\006\100\025\102\074\103\015" +
    "\104\026\001\002\000\012\002\uffc3\013\uffc3\014\uffc3\016" +
    "\uffc3\001\002\000\004\050\131\001\002\000\004\051\132" +
    "\001\002\000\004\100\133\001\002\000\006\103\015\104" +
    "\026\001\002\000\004\101\135\001\002\000\004\070\136" +
    "\001\002\000\016\013\012\016\006\100\025\102\074\103" +
    "\015\104\026\001\002\000\012\002\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\001\002\000\010\002\uffcc\013\uffcc\016\uffcc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\016\022\003\023\007\026\006\027\012\030" +
    "\010\040\004\001\001\000\002\001\001\000\014\022\137" +
    "\023\007\026\006\027\012\030\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\123\001\001\000\002" +
    "\001\001\000\016\011\017\014\023\015\015\016\020\017" +
    "\013\020\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\017\014\026\015" +
    "\015\016\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\017\015" +
    "\044\016\020\001\001\000\010\011\017\015\034\016\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\017\016\042\001\001\000\006\011\017\016\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\017\014\066\015\015\016\020\001\001\000\012\011" +
    "\017\014\064\015\015\016\020\001\001\000\012\011\017" +
    "\014\062\015\015\016\020\001\001\000\012\011\017\014" +
    "\060\015\015\016\020\001\001\000\012\011\017\014\056" +
    "\015\015\016\020\001\001\000\012\011\017\014\054\015" +
    "\015\016\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\075\011\017\013\071\014\100\015\015" +
    "\016\020\017\077\020\016\022\070\023\007\026\006\027" +
    "\012\030\010\031\074\032\072\033\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\075\011\017\013" +
    "\071\014\100\015\015\016\020\017\077\020\016\022\070" +
    "\023\007\026\006\027\012\030\010\033\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\017\014\023\015\015\016\020\020\110\001\001\000\014" +
    "\011\017\014\023\015\015\016\020\020\103\001\001\000" +
    "\004\041\105\001\001\000\002\001\001\000\016\011\017" +
    "\014\023\015\015\016\020\017\106\020\016\001\001\000" +
    "\002\001\001\000\014\011\017\014\023\015\015\016\020" +
    "\020\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\115\011\017\012\114\014\117\015\015\016\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\075\011\017\013\071\014\100\015\015\016" +
    "\020\017\077\020\016\022\070\023\007\026\006\027\012" +
    "\030\010\031\122\032\072\033\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\006\075" +
    "\011\017\013\071\014\100\015\015\016\020\017\077\020" +
    "\016\022\070\023\007\026\006\027\012\030\010\031\126" +
    "\032\072\033\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\075\011\017\013\071\014\100\015\015\016\020\017\077" +
    "\020\016\022\070\023\007\026\006\027\012\030\010\031" +
    "\136\032\072\033\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque ::= lista_sentencias sentencia 
            {
              Object RESULT =null;
		 System.out.println("Bloque con múltiples sentencias"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("Bloque con una sentencia"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",23, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_condicional_if ::= sentencia_if sentencia_else 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_condicional_if",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_else ::= ELSE COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_else",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_else_if ::= sentencia_else_if ELIF expresion_logica COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else if adicional"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_else_if ::= ELIF expresion_logica COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else if"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_if ::= IF expresion_logica COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_if ::= IF error COLON bloque 
            {
              Object RESULT =null;
		 System.err.println("Sentencia if mal formada"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estructura_control ::= sentencia_condicional_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque_sentencias ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_sentencias ::= bloque_sentencias estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_logica ::= expresion_logica OR termino_logico NT$0 expresion_logica AND error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de variable"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_variables ::= declaracion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_variables",2, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_variables ::= bloque_variables declaracion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_variables",2, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_importaciones ::= dec_importaciones 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_importaciones",1, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_importaciones ::= bloque_importaciones dec_importaciones 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_importaciones",1, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= bloque_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= bloque_importaciones 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= bloque_importaciones bloque_variables 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloque_sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

