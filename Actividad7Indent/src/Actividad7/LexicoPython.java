/* The following code was generated by JFlex 1.6.1 */

package Actividad7;

/* Las importaciones necesarias */
import java_cup.runtime.*;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Actividad7/lexico.flex</tt>
 */
public class LexicoPython implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\3\1\3\1\1\22\0\1\4\1\51\1\67"+
    "\1\36\1\0\1\54\1\0\1\70\1\56\1\57\1\45\1\43\1\64"+
    "\1\44\1\42\1\46\12\40\1\66\1\65\1\52\1\50\1\53\2\0"+
    "\5\37\1\14\7\37\1\17\5\37\1\12\6\37\1\62\1\47\1\63"+
    "\1\0\1\37\1\0\1\6\1\27\1\31\1\21\1\11\1\24\1\10"+
    "\1\26\1\23\1\37\1\30\1\15\1\35\1\7\1\20\1\32\1\37"+
    "\1\5\1\16\1\22\1\13\1\37\1\25\1\34\1\33\1\37\1\60"+
    "\1\55\1\61\7\0\1\3\u05da\0\12\41\206\0\12\41\306\0\12\41"+
    "\u019c\0\12\41\166\0\12\41\166\0\12\41\166\0\12\41\166\0\12\41"+
    "\166\0\12\41\166\0\12\41\166\0\12\41\166\0\12\41\166\0\12\41"+
    "\140\0\12\41\166\0\12\41\106\0\12\41\u0116\0\12\41\106\0\12\41"+
    "\u0746\0\12\41\46\0\12\41\u012c\0\12\41\200\0\12\41\246\0\12\41"+
    "\6\0\12\41\266\0\12\41\126\0\12\41\206\0\12\41\6\0\12\41"+
    "\u03ce\0\1\3\1\3\u85f6\0\12\41\u02a6\0\12\41\46\0\12\41\306\0"+
    "\12\41\26\0\12\41\126\0\12\41\u0196\0\12\41\u5316\0\12\41\u0586\0"+
    "\12\41\u0bbc\0\12\41\200\0\12\41\74\0\12\41\220\0\12\41\u0116\0"+
    "\12\41\u01d6\0\12\41\u0176\0\12\41\146\0\12\41\u0216\0\12\41\u5176\0"+
    "\12\41\346\0\12\41\u6c74\0\62\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\21\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\3\4"+
    "\1\36\6\4\1\37\2\4\1\40\1\41\1\42\11\4"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\33\1\0"+
    "\1\50\1\34\1\0\1\51\3\4\1\52\1\53\6\4"+
    "\1\54\1\55\2\4\1\56\6\4\1\57\3\0\1\51"+
    "\3\4\1\60\1\61\1\4\1\62\1\4\1\63\1\4"+
    "\1\64\5\4\1\65\1\0\1\66\1\67\2\4\1\70"+
    "\2\4\1\71\1\72\1\73\1\4\1\74\1\75\1\76"+
    "\1\77\2\4\1\100\1\4\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\162\0\162\0\162\0\162\0\162\0\162\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\162\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u01c8\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u01c8\0\u0921\0\u095a\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\162\0\162\0\162\0\162"+
    "\0\u0c06\0\u0c3f\0\162\0\u0c78\0\u0cb1\0\162\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u01c8\0\u01c8\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u01c8\0\u01c8\0\u0eeb\0\u0f24\0\u01c8\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u0c78\0\u1197\0\u11d0\0\u1209\0\u01c8\0\u01c8\0\u1242\0\u01c8"+
    "\0\u127b\0\u01c8\0\u12b4\0\u01c8\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u01c8\0\u140a\0\u01c8\0\u01c8\0\u1443\0\u147c\0\u01c8"+
    "\0\u14b5\0\u14ee\0\u01c8\0\u01c8\0\u01c8\0\u1527\0\u140a\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u1560\0\u1599\0\u01c8\0\u15d2\0\u01c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\11\1\14\2\11\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\11\1\24\1\11\1\25"+
    "\1\26\3\11\1\27\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\3\2\4\1\0"+
    "\1\61\1\6\1\7\1\10\1\11\1\12\1\13\1\11"+
    "\1\14\2\11\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\11\1\24\1\11\1\25\1\26\3\11\1\27"+
    "\1\11\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\72\0\2\4\72\0\1\5\71\0\1\11"+
    "\1\62\2\11\1\63\24\11\1\0\2\11\35\0\2\11"+
    "\1\64\6\11\1\65\17\11\1\0\2\11\35\0\13\11"+
    "\1\66\15\11\1\0\2\11\35\0\31\11\1\0\2\11"+
    "\35\0\10\11\1\67\16\11\1\70\1\11\1\0\2\11"+
    "\35\0\1\71\30\11\1\0\2\11\35\0\1\11\1\72"+
    "\27\11\1\0\2\11\35\0\13\11\1\73\15\11\1\0"+
    "\2\11\35\0\1\74\30\11\1\0\2\11\35\0\4\11"+
    "\1\75\24\11\1\0\2\11\35\0\1\76\30\11\1\0"+
    "\2\11\35\0\2\11\1\77\6\11\1\100\5\11\1\101"+
    "\10\11\1\102\1\0\2\11\35\0\1\103\12\11\1\104"+
    "\2\11\1\105\12\11\1\0\2\11\35\0\21\11\1\106"+
    "\7\11\1\0\2\11\35\0\1\107\30\11\1\0\2\11"+
    "\35\0\10\11\1\110\2\11\1\111\15\11\1\0\2\11"+
    "\35\0\1\11\1\112\27\11\1\0\2\11\30\0\1\27"+
    "\3\0\65\27\5\0\31\113\1\0\1\113\1\30\1\31"+
    "\1\114\66\0\2\31\1\114\76\0\1\115\70\0\1\116"+
    "\70\0\1\117\70\0\1\120\20\0\1\57\2\121\44\57"+
    "\1\122\17\57\1\123\1\57\2\60\1\124\44\60\1\125"+
    "\20\60\1\126\4\0\1\61\71\0\2\11\1\127\13\11"+
    "\1\130\12\11\1\0\2\11\35\0\15\11\1\131\13\11"+
    "\1\0\2\11\35\0\14\11\1\132\14\11\1\0\2\11"+
    "\35\0\15\11\1\133\13\11\1\0\2\11\35\0\11\11"+
    "\1\134\4\11\1\135\12\11\1\0\2\11\35\0\24\11"+
    "\1\136\4\11\1\0\2\11\35\0\6\11\1\137\22\11"+
    "\1\0\2\11\35\0\10\11\1\140\20\11\1\0\2\11"+
    "\35\0\2\11\1\141\26\11\1\0\2\11\35\0\17\11"+
    "\1\142\11\11\1\0\2\11\35\0\26\11\1\143\2\11"+
    "\1\0\2\11\35\0\25\11\1\144\3\11\1\0\2\11"+
    "\35\0\13\11\1\145\15\11\1\0\2\11\35\0\1\146"+
    "\30\11\1\0\2\11\35\0\2\11\1\147\26\11\1\0"+
    "\2\11\35\0\16\11\1\150\12\11\1\0\2\11\35\0"+
    "\4\11\1\151\24\11\1\0\2\11\35\0\1\11\1\152"+
    "\27\11\1\0\2\11\35\0\2\11\1\153\26\11\1\0"+
    "\2\11\35\0\11\11\1\154\17\11\1\0\2\11\35\0"+
    "\31\113\1\0\1\113\71\0\2\155\27\0\47\121\1\156"+
    "\17\121\1\0\1\121\1\57\3\0\65\57\47\124\1\157"+
    "\20\124\1\0\1\60\1\160\1\0\1\160\64\60\1\161"+
    "\5\0\3\11\1\162\25\11\1\0\2\11\35\0\11\11"+
    "\1\163\17\11\1\0\2\11\35\0\6\11\1\164\22\11"+
    "\1\0\2\11\35\0\4\11\1\165\24\11\1\0\2\11"+
    "\35\0\17\11\1\166\11\11\1\0\2\11\35\0\4\11"+
    "\1\167\24\11\1\0\2\11\35\0\4\11\1\170\24\11"+
    "\1\0\2\11\35\0\11\11\1\171\17\11\1\0\2\11"+
    "\35\0\4\11\1\172\24\11\1\0\2\11\35\0\13\11"+
    "\1\173\15\11\1\0\2\11\35\0\30\11\1\174\1\0"+
    "\2\11\35\0\1\11\1\175\27\11\1\0\2\11\35\0"+
    "\10\11\1\176\20\11\1\0\2\11\35\0\1\11\1\177"+
    "\27\11\1\0\2\11\35\0\11\11\1\200\17\11\1\0"+
    "\2\11\35\0\15\11\1\201\13\11\1\0\2\11\35\0"+
    "\11\11\1\202\17\11\1\0\2\11\70\0\2\155\1\203"+
    "\26\0\1\121\3\0\65\121\1\124\3\0\65\124\2\160"+
    "\1\0\65\160\1\126\5\0\4\11\1\204\24\11\1\0"+
    "\2\11\35\0\4\11\1\205\24\11\1\0\2\11\35\0"+
    "\1\206\30\11\1\0\2\11\35\0\25\11\1\207\3\11"+
    "\1\0\2\11\35\0\4\11\1\210\24\11\1\0\2\11"+
    "\35\0\1\211\30\11\1\0\2\11\35\0\10\11\1\212"+
    "\20\11\1\0\2\11\35\0\4\11\1\213\24\11\1\0"+
    "\2\11\35\0\23\11\1\214\5\11\1\0\2\11\35\0"+
    "\11\11\1\215\17\11\1\0\2\11\35\0\16\11\1\216"+
    "\12\11\1\0\2\11\70\0\2\217\34\0\2\11\1\220"+
    "\26\11\1\0\2\11\35\0\15\11\1\221\13\11\1\0"+
    "\2\11\35\0\15\11\1\222\13\11\1\0\2\11\35\0"+
    "\10\11\1\223\20\11\1\0\2\11\35\0\2\11\1\224"+
    "\26\11\1\0\2\11\35\0\26\11\1\225\2\11\1\0"+
    "\2\11\35\0\6\11\1\226\22\11\1\0\2\11\35\0"+
    "\4\11\1\227\24\11\1\0\2\11\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5643];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\26\1\6\11\4\1\13\11\35\1\1\0"+
    "\4\11\1\1\1\0\1\11\1\1\1\0\1\11\27\1"+
    "\3\0\22\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // Stack to keep track of indentation levels
    private Stack<Integer> indentationStack = new Stack<>();
    private int currentIndentation = 0;

    // Función para reportar errores léxicos
    private void reportarError(String tipoError, String textoError, int linea, int columna, String descripcion) {
        System.out.println(
            tipoError + " '" + textoError + "' en la linea " + linea + ", columna " + columna +
            ". Descripcion: " + descripcion
        );
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    // Convert tabs to spaces (assuming 1 tab = 4 spaces)
    private String normalizeIndentation(String text) {
        return text.replace("\t", "    ");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoPython(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                // Generate DEDENT tokens for all remaining indentation levels
    while (!indentationStack.isEmpty()) {
        indentationStack.pop();
        System.out.println("DEDENT (EOF)");
        return symbol(sym.DEDENT, "");
    }
    return symbol(sym.EOF, "");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportarError("Caracter no reconocido", yytext(), yyline + 1, yycolumn + 1, 
                  "El caracter no es valido en el lenguaje.");
            }
          case 66: break;
          case 2: 
            { //System.out.println("NEWLINE=" + yytext());
            }
          case 67: break;
          case 3: 
            { System.out.println("Non-leading spaces/tabs: '" + yytext() + "'");
            }
          case 68: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 69: break;
          case 5: 
            { /*System.out.println("LINE_COMMENT=" + yytext());*/
            }
          case 70: break;
          case 6: 
            { return symbol(sym.INTEGER, yytext());
            }
          case 71: break;
          case 7: 
            { return symbol(sym.DOT, yytext());
            }
          case 72: break;
          case 8: 
            { return symbol(sym.PLUS, yytext());
            }
          case 73: break;
          case 9: 
            { return symbol(sym.MINUS, yytext());
            }
          case 74: break;
          case 10: 
            { return symbol(sym.MULTIPLY, yytext());
            }
          case 75: break;
          case 11: 
            { return symbol(sym.DIVIDE, yytext());
            }
          case 76: break;
          case 12: 
            { return symbol(sym.BACK_SLASH, yytext());
            }
          case 77: break;
          case 13: 
            { return symbol(sym.EQUAL, yytext());
            }
          case 78: break;
          case 14: 
            { return symbol(sym.LESS_THAN, yytext());
            }
          case 79: break;
          case 15: 
            { return symbol(sym.GREATER_THAN, yytext());
            }
          case 80: break;
          case 16: 
            { return symbol(sym.MODULE, yytext());
            }
          case 81: break;
          case 17: 
            { return symbol(sym.PIPE, yytext());
            }
          case 82: break;
          case 18: 
            { return symbol(sym.LPAREN, yytext());
            }
          case 83: break;
          case 19: 
            { return symbol(sym.RPAREN, yytext());
            }
          case 84: break;
          case 20: 
            { return symbol(sym.LBRACE, yytext());
            }
          case 85: break;
          case 21: 
            { return symbol(sym.RBRACE, yytext());
            }
          case 86: break;
          case 22: 
            { return symbol(sym.LBRACKET, yytext());
            }
          case 87: break;
          case 23: 
            { return symbol(sym.RBRACKET, yytext());
            }
          case 88: break;
          case 24: 
            { return symbol(sym.COMMA, yytext());
            }
          case 89: break;
          case 25: 
            { return symbol(sym.SEMICOLON, yytext());
            }
          case 90: break;
          case 26: 
            { return symbol(sym.COLON, yytext());
            }
          case 91: break;
          case 27: 
            { reportarError("Cadena sin cerrar", yytext(), yyline + 1, yycolumn + 1, 
                  "La cadena de texto no se cerró correctamente. Falta la comilla doble de cierre (\").");
    return symbol(sym.UNCLOSED_STRING, yytext());
            }
          case 92: break;
          case 28: 
            { reportarError("Cadena simple sin cerrar", yytext(), yyline + 1, yycolumn + 1, 
                  "La cadena de texto no se cerró correctamente. Falta la comilla simple de cierre (').");
    return symbol(sym.UNCLOSED_STRING, yytext());
            }
          case 93: break;
          case 29: 
            { int newIndentation = yytext().length();
    System.out.println("Handling indentation: newIndentation=" + newIndentation + ", currentIndentation=" + currentIndentation);

    if (newIndentation > currentIndentation) {
        // Increase indentation level
        currentIndentation = newIndentation;
        indentationStack.push(currentIndentation);
        System.out.println("INDENT");
        return symbol(sym.INDENT, yytext());
    } else if (newIndentation < currentIndentation) {
        // Decrease indentation level
        currentIndentation = newIndentation;
        // Generate DEDENT tokens for each level of indentation removed
        while (!indentationStack.isEmpty() && indentationStack.peek() > currentIndentation) {
            indentationStack.pop();
            System.out.println("DEDENT");
            // Return a DEDENT token for each level
            return symbol(sym.DEDENT, yytext());
        }
    }
            }
          case 94: break;
          case 30: 
            { return symbol(sym.AS, yytext());
            }
          case 95: break;
          case 31: 
            { return symbol(sym.OR, yytext());
            }
          case 96: break;
          case 32: 
            { return symbol(sym.IN, yytext());
            }
          case 97: break;
          case 33: 
            { return symbol(sym.IS, yytext());
            }
          case 98: break;
          case 34: 
            { return symbol(sym.IF, yytext());
            }
          case 99: break;
          case 35: 
            { reportarError("Identificador mal formado", yytext(), yyline + 1, yycolumn + 1, 
                  "Los identificadores no pueden comenzar con un numero.");
    return symbol(sym.MALFORMED_IDENTIFIER, yytext());
            }
          case 100: break;
          case 36: 
            { return symbol(sym.DOUBLE_EQUAL, yytext());
            }
          case 101: break;
          case 37: 
            { return symbol(sym.NOT_EQUAL, yytext());
            }
          case 102: break;
          case 38: 
            { return symbol(sym.LESS_EQUAL, yytext());
            }
          case 103: break;
          case 39: 
            { return symbol(sym.GREATER_EQUAL, yytext());
            }
          case 104: break;
          case 40: 
            { return symbol(sym.STRING, yytext());
            }
          case 105: break;
          case 41: 
            { return symbol(sym.STRING_SIMPLE, yytext());
            }
          case 106: break;
          case 42: 
            { return symbol(sym.AND, yytext());
            }
          case 107: break;
          case 43: 
            { return symbol(sym.NOT, yytext());
            }
          case 108: break;
          case 44: 
            { return symbol(sym.DEF, yytext());
            }
          case 109: break;
          case 45: 
            { return symbol(sym.TRY, yytext());
            }
          case 110: break;
          case 46: 
            { return symbol(sym.FOR, yytext());
            }
          case 111: break;
          case 47: 
            { return symbol(sym.FLOAT, yytext());
            }
          case 112: break;
          case 48: 
            { return symbol(sym.ELSE, yytext());
            }
          case 113: break;
          case 49: 
            { return symbol(sym.ELIF, yytext());
            }
          case 114: break;
          case 50: 
            { return symbol(sym.TRUE, yytext());
            }
          case 115: break;
          case 51: 
            { return symbol(sym.NONE, yytext());
            }
          case 116: break;
          case 52: 
            { return symbol(sym.FROM, yytext());
            }
          case 117: break;
          case 53: 
            { return symbol(sym.PASS, yytext());
            }
          case 118: break;
          case 54: 
            { return symbol(sym.RANGE, yytext());
            }
          case 119: break;
          case 55: 
            { return symbol(sym.RAISE, yytext());
            }
          case 120: break;
          case 56: 
            { return symbol(sym.FALSE, yytext());
            }
          case 121: break;
          case 57: 
            { return symbol(sym.WHILE, yytext());
            }
          case 122: break;
          case 58: 
            { return symbol(sym.BREAK, yytext());
            }
          case 123: break;
          case 59: 
            { return symbol(sym.CLASS, yytext());
            }
          case 124: break;
          case 60: 
            { reportarError("Numero mal formado", yytext(), yyline + 1, yycolumn + 1, 
                  "Los numeros no pueden tener multiples puntos decimales.");
    return symbol(sym.MALFORMED_NUMBER, yytext());
            }
          case 125: break;
          case 61: 
            { return symbol(sym.RETURN, yytext());
            }
          case 126: break;
          case 62: 
            { return symbol(sym.EXCEPT, yytext());
            }
          case 127: break;
          case 63: 
            { return symbol(sym.IMPORT, yytext());
            }
          case 128: break;
          case 64: 
            { return symbol(sym.FINALLY, yytext());
            }
          case 129: break;
          case 65: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
