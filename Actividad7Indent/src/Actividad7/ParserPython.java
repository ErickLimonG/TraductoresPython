
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 14 15:41:37 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 14 15:41:37 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\021\004\000\002\021" +
    "\003\000\002\005\004\000\002\007\005\000\002\007\003" +
    "\000\002\006\005\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\011\000\002\023\010\000\002\024\006" +
    "\000\002\024\006\000\002\025\013\000\002\026\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\036\003\000\002\036\004\000\002\037\010\000\002\037" +
    "\004\000\002\040\003\000\002\040\004\000\002\046\003" +
    "\000\002\046\003\000\002\041\013\000\002\041\012\000" +
    "\002\041\012\000\002\041\013\000\002\041\007\000\002" +
    "\043\003\000\002\043\005\000\002\043\004\000\002\045" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\047\002\000" +
    "\002\017\011\000\002\017\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\034\004\001\002\000\006\003\011\104" +
    "\012\001\002\000\006\002\007\034\004\001\002\000\006" +
    "\002\uffe8\034\uffe8\001\002\000\004\002\001\001\002\000" +
    "\006\002\uffe7\034\uffe7\001\002\000\006\002\uffe5\034\uffe5" +
    "\001\002\000\004\072\013\001\002\000\004\052\014\001" +
    "\002\000\006\030\017\104\020\001\002\000\010\030\uffe1" +
    "\053\uffe1\104\uffe1\001\002\000\010\030\uffe4\053\uffe4\104" +
    "\uffe4\001\002\000\004\104\061\001\002\000\004\060\025" +
    "\001\002\000\010\030\uffe2\053\uffe2\104\uffe2\001\002\000" +
    "\010\030\017\053\023\104\020\001\002\000\006\002\uffe6" +
    "\034\uffe6\001\002\000\010\030\uffe3\053\uffe3\104\uffe3\001" +
    "\002\000\016\102\040\104\036\105\027\106\041\107\033" +
    "\110\026\001\002\000\012\014\ufff5\030\ufff5\053\ufff5\104" +
    "\ufff5\001\002\000\056\003\ufff8\007\ufff8\010\ufff8\014\ufff8" +
    "\030\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\072\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\001\002\000" +
    "\056\003\uffd5\007\uffd5\010\uffd5\014\uffd5\030\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\052\057\051\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\102\uffd5\103\uffd5" +
    "\104\uffd5\105\uffd5\106\uffd5\001\002\000\012\014\ufff9\030" +
    "\ufff9\053\ufff9\104\ufff9\001\002\000\012\014\ufffb\030\ufffb" +
    "\053\ufffb\104\ufffb\001\002\000\012\014\ufff6\030\ufff6\053" +
    "\ufff6\104\ufff6\001\002\000\056\003\uffca\007\uffca\010\uffca" +
    "\014\uffca\030\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\072\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001" +
    "\002\000\056\003\uffd0\007\uffd0\010\uffd0\014\uffd0\030\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\072\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\105\uffd0\106\uffd0\001\002\000\056\003" +
    "\uffcb\007\uffcb\010\uffcb\014\uffcb\030\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\072\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\105\uffcb\106\uffcb\001\002\000\016\014\ufffa\030\ufffa\053" +
    "\ufffa\054\045\055\046\104\ufffa\001\002\000\012\102\040" +
    "\104\036\105\027\106\041\001\002\000\056\003\ufff7\007" +
    "\ufff7\010\ufff7\014\ufff7\030\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\072\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7" +
    "\106\ufff7\001\002\000\012\003\044\054\045\055\046\103" +
    "\043\001\002\000\056\003\uffc9\007\uffc9\010\uffc9\014\uffc9" +
    "\030\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\072\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\001\002\000" +
    "\056\003\uffc8\007\uffc8\010\uffc8\014\uffc8\030\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\072\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\001\002\000\014\003\057\102" +
    "\040\104\036\105\027\106\041\001\002\000\014\003\047" +
    "\102\040\104\036\105\027\106\041\001\002\000\052\003" +
    "\uffd1\007\uffd1\010\uffd1\014\uffd1\030\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\072\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1" +
    "\001\002\000\056\003\uffd3\007\uffd3\010\uffd3\014\uffd3\030" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\052\057\051\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\072\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\001\002\000\014" +
    "\003\055\102\040\104\036\105\027\106\041\001\002\000" +
    "\014\003\053\102\040\104\036\105\027\106\041\001\002" +
    "\000\056\003\uffcd\007\uffcd\010\uffcd\014\uffcd\030\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\066\uffcd\072\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\106\uffcd\001\002\000\056\003\uffcf" +
    "\007\uffcf\010\uffcf\014\uffcf\030\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\072\uffcf\102\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\001\002\000\056\003\uffcc\007\uffcc\010\uffcc" +
    "\014\uffcc\030\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\072\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\001" +
    "\002\000\056\003\uffce\007\uffce\010\uffce\014\uffce\030\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\072\uffce\102\uffce" +
    "\103\uffce\104\uffce\105\uffce\106\uffce\001\002\000\052\003" +
    "\uffd2\007\uffd2\010\uffd2\014\uffd2\030\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\072\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\001\002\000\056\003\uffd4\007\uffd4\010\uffd4\014\uffd4\030" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\052\057\051\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\001\002\000\004" +
    "\102\062\001\002\000\010\003\064\103\063\104\067\001" +
    "\002\000\004\072\200\001\002\000\004\103\177\001\002" +
    "\000\010\003\072\073\070\103\071\001\002\000\010\003" +
    "\uffdb\073\uffdb\103\uffdb\001\002\000\010\003\uffd8\073\uffd8" +
    "\103\uffd8\001\002\000\004\104\067\001\002\000\004\072" +
    "\073\001\002\000\010\003\uffd9\073\uffd9\103\uffd9\001\002" +
    "\000\004\052\074\001\002\000\022\013\104\016\114\017" +
    "\076\022\103\102\040\104\101\105\027\106\041\001\002" +
    "\000\006\014\uffea\053\uffea\001\002\000\012\102\040\104" +
    "\036\105\027\106\041\001\002\000\006\014\uffeb\053\uffeb" +
    "\001\002\000\006\014\ufff4\053\ufff4\001\002\000\034\014" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\025" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001" +
    "\002\000\004\053\171\001\002\000\004\053\170\001\002" +
    "\000\012\102\040\104\036\105\027\106\041\001\002\000" +
    "\006\014\uffe9\053\uffe9\001\002\000\006\014\uffec\053\uffec" +
    "\001\002\000\006\014\ufff2\053\ufff2\001\002\000\014\007" +
    "\147\010\150\014\uffd6\053\uffd6\072\uffd6\001\002\000\014" +
    "\007\uffc7\010\uffc7\014\uffc7\053\uffc7\072\uffc7\001\002\000" +
    "\006\014\ufff3\053\ufff3\001\002\000\030\014\uffd7\053\uffd7" +
    "\054\045\055\046\061\132\062\125\063\126\064\130\065" +
    "\131\066\127\072\uffd7\001\002\000\004\104\115\001\002" +
    "\000\004\050\116\001\002\000\004\051\117\001\002\000" +
    "\004\102\120\001\002\000\006\105\027\106\041\001\002" +
    "\000\004\103\122\001\002\000\004\072\123\001\002\000" +
    "\020\013\104\016\114\017\076\102\040\104\101\105\027" +
    "\106\041\001\002\000\006\014\uffed\053\uffed\001\002\000" +
    "\014\003\145\102\040\104\036\105\027\106\041\001\002" +
    "\000\014\003\143\102\040\104\036\105\027\106\041\001" +
    "\002\000\014\003\141\102\040\104\036\105\027\106\041" +
    "\001\002\000\014\003\137\102\040\104\036\105\027\106" +
    "\041\001\002\000\014\003\135\102\040\104\036\105\027" +
    "\106\041\001\002\000\014\003\133\102\040\104\036\105" +
    "\027\106\041\001\002\000\024\007\uffbc\010\uffbc\014\uffbc" +
    "\053\uffbc\072\uffbc\102\uffbc\104\uffbc\105\uffbc\106\uffbc\001" +
    "\002\000\030\007\uffc2\010\uffc2\014\uffc2\053\uffc2\054\045" +
    "\055\046\072\uffc2\102\uffc2\104\uffc2\105\uffc2\106\uffc2\001" +
    "\002\000\024\007\uffb7\010\uffb7\014\uffb7\053\uffb7\072\uffb7" +
    "\102\uffb7\104\uffb7\105\uffb7\106\uffb7\001\002\000\030\007" +
    "\uffbd\010\uffbd\014\uffbd\053\uffbd\054\045\055\046\072\uffbd" +
    "\102\uffbd\104\uffbd\105\uffbd\106\uffbd\001\002\000\024\007" +
    "\uffba\010\uffba\014\uffba\053\uffba\072\uffba\102\uffba\104\uffba" +
    "\105\uffba\106\uffba\001\002\000\030\007\uffc0\010\uffc0\014" +
    "\uffc0\053\uffc0\054\045\055\046\072\uffc0\102\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\001\002\000\024\007\uffb8\010\uffb8\014" +
    "\uffb8\053\uffb8\072\uffb8\102\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\001\002\000\030\007\uffbe\010\uffbe\014\uffbe\053\uffbe\054" +
    "\045\055\046\072\uffbe\102\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\001\002\000\024\007\uffb9\010\uffb9\014\uffb9\053\uffb9\072" +
    "\uffb9\102\uffb9\104\uffb9\105\uffb9\106\uffb9\001\002\000\030" +
    "\007\uffbf\010\uffbf\014\uffbf\053\uffbf\054\045\055\046\072" +
    "\uffbf\102\uffbf\104\uffbf\105\uffbf\106\uffbf\001\002\000\024" +
    "\007\uffbb\010\uffbb\014\uffbb\053\uffbb\072\uffbb\102\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\001\002\000\030\007\uffc1\010\uffc1" +
    "\014\uffc1\053\uffc1\054\045\055\046\072\uffc1\102\uffc1\104" +
    "\uffc1\105\uffc1\106\uffc1\001\002\000\012\102\040\104\036" +
    "\105\027\106\041\001\002\000\014\003\152\102\040\104" +
    "\036\105\027\106\041\001\002\000\012\102\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\001\002\000\014\007\uffc3\010\uffc3\014" +
    "\uffc3\053\uffc3\072\uffc3\001\002\000\022\054\045\055\046" +
    "\061\132\062\125\063\126\064\130\065\131\066\127\001" +
    "\002\000\012\102\040\104\036\105\027\106\041\001\002" +
    "\000\006\007\156\010\150\001\002\000\014\003\160\102" +
    "\040\104\036\105\027\106\041\001\002\000\014\007\uffc6" +
    "\010\uffc6\014\uffc6\053\uffc6\072\uffc6\001\002\000\014\007" +
    "\uffc4\010\uffc4\014\uffc4\053\uffc4\072\uffc4\001\002\000\004" +
    "\072\162\001\002\000\020\013\104\016\114\017\076\102" +
    "\040\104\101\105\027\106\041\001\002\000\004\014\164" +
    "\001\002\000\006\003\165\072\166\001\002\000\006\014" +
    "\ufff0\053\ufff0\001\002\000\020\013\104\016\114\017\076" +
    "\102\040\104\101\105\027\106\041\001\002\000\006\014" +
    "\ufff1\053\ufff1\001\002\000\010\030\uffdd\053\uffdd\104\uffdd" +
    "\001\002\000\010\030\uffe0\053\uffe0\104\uffe0\001\002\000" +
    "\004\072\173\001\002\000\022\003\175\013\104\016\114" +
    "\017\076\102\040\104\101\105\027\106\041\001\002\000" +
    "\006\014\uffef\053\uffef\001\002\000\006\014\uffee\053\uffee" +
    "\001\002\000\010\003\uffda\073\uffda\103\uffda\001\002\000" +
    "\010\030\uffdc\053\uffdc\104\uffdc\001\002\000\004\052\201" +
    "\001\002\000\022\013\104\016\114\017\076\022\203\102" +
    "\040\104\101\105\027\106\041\001\002\000\004\053\205" +
    "\001\002\000\004\053\204\001\002\000\010\030\uffde\053" +
    "\uffde\104\uffde\001\002\000\010\030\uffdf\053\uffdf\104\uffdf" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\036\004\037\005\001\001\000\002\001" +
    "\001\000\004\037\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\020\040\021\041\014" +
    "\046\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\020\041\014\046\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\031\011\033\012\030\014\036" +
    "\015\027\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\033\014\041" +
    "\015\027\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\033" +
    "\015\057\016\034\001\001\000\010\011\033\015\047\016" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\033\016\055\001\001\000\006\011\033\016\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\064\045\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\104\011\033\013\076\014\112\015\027\016\034\017\107" +
    "\020\110\022\074\023\077\024\111\025\106\026\101\030" +
    "\105\001\001\000\002\001\001\000\020\011\033\013\171" +
    "\014\112\015\027\016\034\017\107\020\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\033\013\160\014" +
    "\112\015\027\016\034\017\107\020\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\104\011\033\013\076\014" +
    "\112\015\027\016\034\017\107\020\110\022\074\023\077" +
    "\024\111\025\106\026\123\030\105\001\001\000\002\001" +
    "\001\000\012\011\033\014\145\015\027\016\034\001\001" +
    "\000\012\011\033\014\143\015\027\016\034\001\001\000" +
    "\012\011\033\014\141\015\027\016\034\001\001\000\012" +
    "\011\033\014\137\015\027\016\034\001\001\000\012\011" +
    "\033\014\135\015\027\016\034\001\001\000\012\011\033" +
    "\014\133\015\027\016\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\033\014\152\015\027\016" +
    "\034\020\156\001\001\000\014\011\033\014\152\015\027" +
    "\016\034\020\150\001\001\000\004\047\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\033\014\152" +
    "\015\027\016\034\017\154\020\110\001\001\000\002\001" +
    "\001\000\014\011\033\014\152\015\027\016\034\020\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\104\011\033\013\076\014\112\015\027" +
    "\016\034\017\107\020\110\022\074\023\077\024\111\025" +
    "\106\026\162\030\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\104\011\033\013" +
    "\076\014\112\015\027\016\034\017\107\020\110\022\074" +
    "\023\077\024\111\025\106\026\166\030\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\104\011\033\013\076\014\112\015" +
    "\027\016\034\017\107\020\110\022\074\023\077\024\111" +
    "\025\106\026\173\030\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\104\011\033\013\076\014\112\015" +
    "\027\016\034\017\107\020\110\022\074\023\077\024\111" +
    "\025\106\026\201\030\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_logica ::= expresion_logica OR termino_logico NT$0 expresion_logica AND error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT PASS DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON INDENT bloque DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_cuerpo_clase ::= declaracion_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_cuerpo_clase ::= declaracion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // clase ::= CLASS error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // clase ::= CLASS IDENTIFIER COLON INDENT cuerpo_clase DEDENT 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("Bloque con una sentencia"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un bloque después de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_while ::= WHILE expresion COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_if ::= IF expresion COLON bloque ELSE error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_if ::= IF expresion COLON bloque ELSE COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de variable"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloque_clases EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

