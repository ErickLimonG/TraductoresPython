
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 09 22:37:07 CST 2025
//----------------------------------------------------

package Actividad7;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 09 22:37:07 CST 2025
  */
public class ParserPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPython() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\021\004\000\002\021" +
    "\003\000\002\005\004\000\002\007\005\000\002\007\003" +
    "\000\002\006\005\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\011\000\002\023\010\000\002\024\006" +
    "\000\002\024\006\000\002\025\013\000\002\026\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\036\003\000\002\036\004\000\002\037\006\000\002\037" +
    "\004\000\002\040\003\000\002\040\004\000\002\046\003" +
    "\000\002\046\003\000\002\041\011\000\002\041\010\000" +
    "\002\041\010\000\002\041\011\000\002\041\007\000\002" +
    "\043\003\000\002\043\005\000\002\043\004\000\002\045" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\047\002\000" +
    "\002\017\011\000\002\017\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\034\004\001\002\000\006\003\011\102" +
    "\012\001\002\000\006\002\007\034\004\001\002\000\006" +
    "\002\uffe8\034\uffe8\001\002\000\004\002\001\001\002\000" +
    "\006\002\uffe7\034\uffe7\001\002\000\006\002\uffe5\034\uffe5" +
    "\001\002\000\004\070\013\001\002\000\006\030\016\102" +
    "\017\001\002\000\012\002\uffe1\030\uffe1\034\uffe1\102\uffe1" +
    "\001\002\000\012\002\uffe4\030\uffe4\034\uffe4\102\uffe4\001" +
    "\002\000\004\102\057\001\002\000\004\056\023\001\002" +
    "\000\012\002\uffe2\030\uffe2\034\uffe2\102\uffe2\001\002\000" +
    "\012\002\uffe6\030\016\034\uffe6\102\017\001\002\000\012" +
    "\002\uffe3\030\uffe3\034\uffe3\102\uffe3\001\002\000\016\100" +
    "\036\102\034\103\025\104\037\105\031\106\024\001\002" +
    "\000\014\002\ufff5\014\ufff5\030\ufff5\034\ufff5\102\ufff5\001" +
    "\002\000\060\002\ufff8\003\ufff8\007\ufff8\010\ufff8\014\ufff8" +
    "\030\ufff8\034\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\070\ufff8" +
    "\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\001\002\000" +
    "\060\002\uffd5\003\uffd5\007\uffd5\010\uffd5\014\uffd5\030\uffd5" +
    "\034\uffd5\052\uffd5\053\uffd5\054\050\055\047\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\070\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\103\uffd5\104\uffd5\001\002\000\014\002" +
    "\ufff9\014\ufff9\030\ufff9\034\ufff9\102\ufff9\001\002\000\014" +
    "\002\ufffb\014\ufffb\030\ufffb\034\ufffb\102\ufffb\001\002\000" +
    "\014\002\ufff6\014\ufff6\030\ufff6\034\ufff6\102\ufff6\001\002" +
    "\000\060\002\uffca\003\uffca\007\uffca\010\uffca\014\uffca\030" +
    "\uffca\034\uffca\052\uffca\053\uffca\054\uffca\055\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\070\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\104\uffca\001\002\000\060" +
    "\002\uffd0\003\uffd0\007\uffd0\010\uffd0\014\uffd0\030\uffd0\034" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\070\uffd0\100\uffd0\101" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\001\002\000\060\002\uffcb" +
    "\003\uffcb\007\uffcb\010\uffcb\014\uffcb\030\uffcb\034\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\070\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\104\uffcb\001\002\000\020\002\ufffa\014\ufffa" +
    "\030\ufffa\034\ufffa\052\043\053\044\102\ufffa\001\002\000" +
    "\012\100\036\102\034\103\025\104\037\001\002\000\060" +
    "\002\ufff7\003\ufff7\007\ufff7\010\ufff7\014\ufff7\030\ufff7\034" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\070\ufff7\100\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\104\ufff7\001\002\000\012\003\042" +
    "\052\043\053\044\101\041\001\002\000\060\002\uffc9\003" +
    "\uffc9\007\uffc9\010\uffc9\014\uffc9\030\uffc9\034\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\070\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\001\002\000\060\002\uffc8\003\uffc8\007" +
    "\uffc8\010\uffc8\014\uffc8\030\uffc8\034\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\070\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\001\002\000\014\003\055\100\036\102\034\103" +
    "\025\104\037\001\002\000\014\003\045\100\036\102\034" +
    "\103\025\104\037\001\002\000\054\002\uffd1\003\uffd1\007" +
    "\uffd1\010\uffd1\014\uffd1\030\uffd1\034\uffd1\052\uffd1\053\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\070" +
    "\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\001\002" +
    "\000\060\002\uffd3\003\uffd3\007\uffd3\010\uffd3\014\uffd3\030" +
    "\uffd3\034\uffd3\052\uffd3\053\uffd3\054\050\055\047\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\070\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\001\002\000\014" +
    "\003\053\100\036\102\034\103\025\104\037\001\002\000" +
    "\014\003\051\100\036\102\034\103\025\104\037\001\002" +
    "\000\060\002\uffcd\003\uffcd\007\uffcd\010\uffcd\014\uffcd\030" +
    "\uffcd\034\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\070\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\001\002\000\060" +
    "\002\uffcf\003\uffcf\007\uffcf\010\uffcf\014\uffcf\030\uffcf\034" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\070\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\001\002\000\060\002\uffcc" +
    "\003\uffcc\007\uffcc\010\uffcc\014\uffcc\030\uffcc\034\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\070\uffcc\100\uffcc\101\uffcc\102" +
    "\uffcc\103\uffcc\104\uffcc\001\002\000\060\002\uffce\003\uffce" +
    "\007\uffce\010\uffce\014\uffce\030\uffce\034\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\070\uffce\100\uffce\101\uffce\102\uffce\103" +
    "\uffce\104\uffce\001\002\000\054\002\uffd2\003\uffd2\007\uffd2" +
    "\010\uffd2\014\uffd2\030\uffd2\034\uffd2\052\uffd2\053\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\070\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\001\002\000" +
    "\060\002\uffd4\003\uffd4\007\uffd4\010\uffd4\014\uffd4\030\uffd4" +
    "\034\uffd4\052\uffd4\053\uffd4\054\050\055\047\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\070\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\104\uffd4\001\002\000\004\100" +
    "\060\001\002\000\010\003\062\101\061\102\065\001\002" +
    "\000\004\070\173\001\002\000\004\101\172\001\002\000" +
    "\010\003\070\071\066\101\067\001\002\000\010\003\uffdb" +
    "\071\uffdb\101\uffdb\001\002\000\010\003\uffd8\071\uffd8\101" +
    "\uffd8\001\002\000\004\102\065\001\002\000\004\070\071" +
    "\001\002\000\010\003\uffd9\071\uffd9\101\uffd9\001\002\000" +
    "\022\013\101\016\111\017\073\022\100\100\036\102\076" +
    "\103\025\104\037\001\002\000\014\002\uffea\014\uffea\030" +
    "\uffea\034\uffea\102\uffea\001\002\000\012\100\036\102\034" +
    "\103\025\104\037\001\002\000\014\002\uffeb\014\uffeb\030" +
    "\uffeb\034\uffeb\102\uffeb\001\002\000\014\002\ufff4\014\ufff4" +
    "\030\ufff4\034\ufff4\102\ufff4\001\002\000\042\002\uffcb\014" +
    "\uffcb\030\uffcb\034\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\023\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\102\uffcb\001\002\000\012\002\uffe0\030\uffe0\034\uffe0" +
    "\102\uffe0\001\002\000\012\002\uffdd\030\uffdd\034\uffdd\102" +
    "\uffdd\001\002\000\012\100\036\102\034\103\025\104\037" +
    "\001\002\000\014\002\uffe9\014\uffe9\030\uffe9\034\uffe9\102" +
    "\uffe9\001\002\000\014\002\uffec\014\uffec\030\uffec\034\uffec" +
    "\102\uffec\001\002\000\014\002\ufff2\014\ufff2\030\ufff2\034" +
    "\ufff2\102\ufff2\001\002\000\022\002\uffd6\007\144\010\145" +
    "\014\uffd6\030\uffd6\034\uffd6\070\uffd6\102\uffd6\001\002\000" +
    "\022\002\uffc7\007\uffc7\010\uffc7\014\uffc7\030\uffc7\034\uffc7" +
    "\070\uffc7\102\uffc7\001\002\000\014\002\ufff3\014\ufff3\030" +
    "\ufff3\034\ufff3\102\ufff3\001\002\000\036\002\uffd7\014\uffd7" +
    "\030\uffd7\034\uffd7\052\043\053\044\057\127\060\122\061" +
    "\123\062\125\063\126\064\124\070\uffd7\102\uffd7\001\002" +
    "\000\004\102\112\001\002\000\004\050\113\001\002\000" +
    "\004\051\114\001\002\000\004\100\115\001\002\000\006" +
    "\103\025\104\037\001\002\000\004\101\117\001\002\000" +
    "\004\070\120\001\002\000\020\013\101\016\111\017\073" +
    "\100\036\102\076\103\025\104\037\001\002\000\014\002" +
    "\uffed\014\uffed\030\uffed\034\uffed\102\uffed\001\002\000\014" +
    "\003\142\100\036\102\034\103\025\104\037\001\002\000" +
    "\014\003\140\100\036\102\034\103\025\104\037\001\002" +
    "\000\014\003\136\100\036\102\034\103\025\104\037\001" +
    "\002\000\014\003\134\100\036\102\034\103\025\104\037" +
    "\001\002\000\014\003\132\100\036\102\034\103\025\104" +
    "\037\001\002\000\014\003\130\100\036\102\034\103\025" +
    "\104\037\001\002\000\030\002\uffbc\007\uffbc\010\uffbc\014" +
    "\uffbc\030\uffbc\034\uffbc\070\uffbc\100\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\001\002\000\034\002\uffc2\007\uffc2\010\uffc2\014" +
    "\uffc2\030\uffc2\034\uffc2\052\043\053\044\070\uffc2\100\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\001\002\000\030\002\uffb7\007" +
    "\uffb7\010\uffb7\014\uffb7\030\uffb7\034\uffb7\070\uffb7\100\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\001\002\000\034\002\uffbd\007" +
    "\uffbd\010\uffbd\014\uffbd\030\uffbd\034\uffbd\052\043\053\044" +
    "\070\uffbd\100\uffbd\102\uffbd\103\uffbd\104\uffbd\001\002\000" +
    "\030\002\uffba\007\uffba\010\uffba\014\uffba\030\uffba\034\uffba" +
    "\070\uffba\100\uffba\102\uffba\103\uffba\104\uffba\001\002\000" +
    "\034\002\uffc0\007\uffc0\010\uffc0\014\uffc0\030\uffc0\034\uffc0" +
    "\052\043\053\044\070\uffc0\100\uffc0\102\uffc0\103\uffc0\104" +
    "\uffc0\001\002\000\030\002\uffb8\007\uffb8\010\uffb8\014\uffb8" +
    "\030\uffb8\034\uffb8\070\uffb8\100\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\001\002\000\034\002\uffbe\007\uffbe\010\uffbe\014\uffbe" +
    "\030\uffbe\034\uffbe\052\043\053\044\070\uffbe\100\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\001\002\000\030\002\uffb9\007\uffb9" +
    "\010\uffb9\014\uffb9\030\uffb9\034\uffb9\070\uffb9\100\uffb9\102" +
    "\uffb9\103\uffb9\104\uffb9\001\002\000\034\002\uffbf\007\uffbf" +
    "\010\uffbf\014\uffbf\030\uffbf\034\uffbf\052\043\053\044\070" +
    "\uffbf\100\uffbf\102\uffbf\103\uffbf\104\uffbf\001\002\000\030" +
    "\002\uffbb\007\uffbb\010\uffbb\014\uffbb\030\uffbb\034\uffbb\070" +
    "\uffbb\100\uffbb\102\uffbb\103\uffbb\104\uffbb\001\002\000\034" +
    "\002\uffc1\007\uffc1\010\uffc1\014\uffc1\030\uffc1\034\uffc1\052" +
    "\043\053\044\070\uffc1\100\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\001\002\000\012\100\036\102\034\103\025\104\037\001" +
    "\002\000\014\003\147\100\036\102\034\103\025\104\037" +
    "\001\002\000\012\100\uffc5\102\uffc5\103\uffc5\104\uffc5\001" +
    "\002\000\022\002\uffc3\007\uffc3\010\uffc3\014\uffc3\030\uffc3" +
    "\034\uffc3\070\uffc3\102\uffc3\001\002\000\022\052\043\053" +
    "\044\057\127\060\122\061\123\062\125\063\126\064\124" +
    "\001\002\000\012\100\036\102\034\103\025\104\037\001" +
    "\002\000\006\007\153\010\145\001\002\000\014\003\155" +
    "\100\036\102\034\103\025\104\037\001\002\000\022\002" +
    "\uffc6\007\uffc6\010\uffc6\014\uffc6\030\uffc6\034\uffc6\070\uffc6" +
    "\102\uffc6\001\002\000\022\002\uffc4\007\uffc4\010\uffc4\014" +
    "\uffc4\030\uffc4\034\uffc4\070\uffc4\102\uffc4\001\002\000\004" +
    "\070\157\001\002\000\020\013\101\016\111\017\073\100" +
    "\036\102\076\103\025\104\037\001\002\000\004\014\161" +
    "\001\002\000\006\003\162\070\163\001\002\000\014\002" +
    "\ufff0\014\ufff0\030\ufff0\034\ufff0\102\ufff0\001\002\000\020" +
    "\013\101\016\111\017\073\100\036\102\076\103\025\104" +
    "\037\001\002\000\014\002\ufff1\014\ufff1\030\ufff1\034\ufff1" +
    "\102\ufff1\001\002\000\004\070\166\001\002\000\022\003" +
    "\170\013\101\016\111\017\073\100\036\102\076\103\025" +
    "\104\037\001\002\000\014\002\uffef\014\uffef\030\uffef\034" +
    "\uffef\102\uffef\001\002\000\014\002\uffee\014\uffee\030\uffee" +
    "\034\uffee\102\uffee\001\002\000\010\003\uffda\071\uffda\101" +
    "\uffda\001\002\000\012\002\uffdc\030\uffdc\034\uffdc\102\uffdc" +
    "\001\002\000\022\013\101\016\111\017\073\022\175\100" +
    "\036\102\076\103\025\104\037\001\002\000\012\002\uffdf" +
    "\030\uffdf\034\uffdf\102\uffdf\001\002\000\012\002\uffde\030" +
    "\uffde\034\uffde\102\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\036\004\037\005\001\001\000\002\001" +
    "\001\000\004\037\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\017\040\020\041\013\046\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\017\041\013" +
    "\046\021\001\001\000\002\001\001\000\016\010\027\011" +
    "\031\012\026\014\034\015\025\016\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\031\014\037\015\025\016\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\031\015\055\016\032\001\001\000\010" +
    "\011\031\015\045\016\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\031\016\053\001\001\000\006" +
    "\011\031\016\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\062\045" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\101\011\031\013\073\014\107\015\025\016\032\017" +
    "\104\020\105\022\071\023\074\024\106\025\103\026\076" +
    "\030\102\001\001\000\002\001\001\000\020\011\031\013" +
    "\164\014\107\015\025\016\032\017\104\020\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\031\013\155" +
    "\014\107\015\025\016\032\017\104\020\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\101\011\031\013\073" +
    "\014\107\015\025\016\032\017\104\020\105\022\071\023" +
    "\074\024\106\025\103\026\120\030\102\001\001\000\002" +
    "\001\001\000\012\011\031\014\142\015\025\016\032\001" +
    "\001\000\012\011\031\014\140\015\025\016\032\001\001" +
    "\000\012\011\031\014\136\015\025\016\032\001\001\000" +
    "\012\011\031\014\134\015\025\016\032\001\001\000\012" +
    "\011\031\014\132\015\025\016\032\001\001\000\012\011" +
    "\031\014\130\015\025\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\031\014\147\015\025" +
    "\016\032\020\153\001\001\000\014\011\031\014\147\015" +
    "\025\016\032\020\145\001\001\000\004\047\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\031\014" +
    "\147\015\025\016\032\017\151\020\105\001\001\000\002" +
    "\001\001\000\014\011\031\014\147\015\025\016\032\020" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\101\011\031\013\073\014\107\015" +
    "\025\016\032\017\104\020\105\022\071\023\074\024\106" +
    "\025\103\026\157\030\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\101\011\031" +
    "\013\073\014\107\015\025\016\032\017\104\020\105\022" +
    "\071\023\074\024\106\025\103\026\163\030\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\101\011" +
    "\031\013\073\014\107\015\025\016\032\017\104\020\105" +
    "\022\071\023\074\024\106\025\103\026\166\030\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\101\011\031\013\073\014" +
    "\107\015\025\016\032\017\104\020\105\022\071\023\074" +
    "\024\106\025\103\026\173\030\102\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void syntax_error(Symbol s){
       System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPython$actions {
  private final ParserPython parser;

  /** Constructor */
  CUP$ParserPython$actions(ParserPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPython$do_action(
    int                        CUP$ParserPython$act_num,
    java_cup.runtime.lr_parser CUP$ParserPython$parser,
    java.util.Stack            CUP$ParserPython$stack,
    int                        CUP$ParserPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPython$result;

      /* select the action based on the action number */
      switch (CUP$ParserPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino_logico ::= expresion_aritmetica LESS_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // termino_logico ::= expresion_aritmetica GREATER_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor o igual, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // termino_logico ::= expresion_aritmetica LESS_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de menor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // termino_logico ::= expresion_aritmetica GREATER_THAN error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de mayor que, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino_logico ::= expresion_aritmetica NOT_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de desigualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO LOGICO->Comparacion de igualdad, ERROR: Se esperaba una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino_logico ::= expresion_aritmetica LESS_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino_logico ::= expresion_aritmetica GREATER_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor o igual"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termino_logico ::= expresion_aritmetica LESS_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de menor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino_logico ::= expresion_aritmetica GREATER_THAN expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de mayor que"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termino_logico ::= expresion_aritmetica NOT_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de desigualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // termino_logico ::= expresion_aritmetica DOUBLE_EQUAL expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Comparacion de igualdad"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_logica ::= expresion_logica OR error 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(OR), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_logica ::= expresion_logica OR termino_logico NT$0 expresion_logica AND error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)).value;
		 System.out.println("Expresion logica(AND), ERROR: SE ESPERABA UN TERMINO LOGICO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Expresion logica(OR)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_logica ::= expresion_logica AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Expresion logica(AND)"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Es un termino logico "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= LPAREN expresion_aritmetica error 
            {
              Object RESULT =null;
		 System.out.println("Factor->Expresion aritmetica entre parentesis, ERROR: PARENTESIS DESBALANCEADOS"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN expresion_aritmetica RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica entre parentesis"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= numero 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino DIVIDE error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->DIVISION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino MULTIPLY error 
            {
              Object RESULT =null;
		 System.out.println("TERMINO->MULTIPLICACION,ERROR: SE ESPERABA UN FACTOR"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de division "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino ::= termino MULTIPLY factor 
            {
              Object RESULT =null;
		 System.out.println("Operacion de multiplicacion "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Es un termino "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_aritmetica ::= expresion_aritmetica MINUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->MINUS,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_aritmetica ::= expresion_aritmetica PLUS error 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION ARITMETICA->SUM,ERROR: SE ESPERABA UN TERMINO"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_aritmetica ::= expresion_aritmetica MINUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de resta "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_aritmetica ::= expresion_aritmetica PLUS termino 
            {
              Object RESULT =null;
		 System.out.println("Operacion de suma "); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_aritmetica ::= termino 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica basica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion logica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Es una expresion aritmetica"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametro",35, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("parametros",33, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_metodo ::= DEF IDENTIFIER LPAREN error RPAREN 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: DEFINICION DE METODO, Se esperaban parametros============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON PASS 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON PASS 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS VACIO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_metodo ::= DEF IDENTIFIER LPAREN RPAREN COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO SIN PARAMETROS============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_metodo ::= DEF IDENTIFIER LPAREN parametros RPAREN COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE METODO============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",31, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_cuerpo_clase ::= declaracion_metodo 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_cuerpo_clase ::= declaracion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_cuerpo_clase",36, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_clase ::= cuerpo_clase dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_clase ::= dec_cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",30, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // clase ::= CLASS error 
            {
              Object RESULT =null;
		 System.out.println("=============ERROR: Clase se esperaba un identificador============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // clase ::= CLASS IDENTIFIER COLON cuerpo_clase 
            {
              Object RESULT =null;
		 System.out.println("=============DEFINICION DE CLASE============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_clases ::= bloque_clases clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_clases ::= clase 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque_clases",28, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de declaracion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de control"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Sentencia de expresion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia",22, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("Bloque con una sentencia"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("bloque",20, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_for ::= FOR IDENTIFIER IN RANGE LPAREN numero RPAREN COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA FOR valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_for",19, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_while ::= WHILE expresion COLON error 
            {
              Object RESULT =null;
		 System.out.println("ERROR: Se esperaba un bloque después de WHILE"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_while ::= WHILE expresion COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA WHILE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_while",18, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_if ::= IF expresion COLON bloque ELSE error 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_if ::= IF expresion COLON bloque ELSE COLON bloque 
            {
              Object RESULT =null;
		 System.out.println("=============SENTENCIA IF-ELSE valida============="); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("sentencia_if",17, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("estructura_control",16, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cadena ::= STRING_SIMPLE 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // numero ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor_asignacion ::= cadena 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valor_asignacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("valor_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= IDENTIFIER EQUAL valor_asignacion 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de variable"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_identificador_punto ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_identificador_punto ::= lista_identificador_punto DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_identificador_punto",5, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_importaciones ::= IMPORT lista_identificador_punto 
            {
              Object RESULT =null;
		 System.out.println("Es una declaracion de importacion"); 
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("dec_importaciones",3, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_expresiones ::= lista_expresiones expresion 
            {
              Object RESULT =null;

              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("lista_expresiones",15, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          return CUP$ParserPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloque_clases EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)).value;
		RESULT = start_val;
              CUP$ParserPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPython$stack.elementAt(CUP$ParserPython$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPython$parser.done_parsing();
          return CUP$ParserPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

