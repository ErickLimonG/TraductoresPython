/* LIMON GUVERA ERICK ANTONIO  */
/* PIEDRA FLORES AXEL JESUS  */
/* RODRIGUEZ MARTINEZ LEONARDO JAVIER  */

package practica4;

import java_cup.runtime.*;

parser code{:
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }
:}

/* Terminales palabras reservadas */
terminal TRUE, FALSE, NONE, AND, OR, NOT, IS, IF, ELSE,
         ELIF, FOR, WHILE, BREAK, CONTINUE, PASS, TRY, EXCEPT, FINALLY,
         RAISE, ASSERT, DEF, RETURN, LAMBDA, YIELD, CLASS, IMPORT, FROM,
         AS, DEL, GLOBAL, WITH, NONLOCAL, ASYNC, AWAIT, PACKAGE, LINE_COMMENT, IN;

/* Terminales operadores */
terminal PLUS, MINUS, MULTIPLY, DIVIDE, EQUAL, DOUBLE_EQUAL, NOT_EQUAL, 
LESS_THAN, GREATER_THAN, LESS_EQUAL, GREATER_EQUAL, MODULE;

/* Terminales símbolos */
terminal DOT, SEMICOLON, COLON, COMMA, LBRACE, RBRACE, LBRACKET, RBRACKET, 
BACK_SLASH, PIPE, LPAREN, RPAREN;

/* Terminales expresiones regulares */
terminal IDENTIFIER, INTEGER, FLOAT, STRING, STRING_SIMPLE, CHAR;

/* Terminales Error */
terminal UNCLOSED_STRING, MALFORMED_NUMBER, MALFORMED_IDENTIFIER;

/* No terminales */
non terminal declaraciones, bloque_importaciones,
             bloque_variables, dec_importaciones,
             dec_variable, expresion, lista_identificador_punto
             ;

start with declaraciones;

/* Reglas de la gramática */
declaraciones ::= 
    bloque_importaciones bloque_variables |
    bloque_importaciones |
    bloque_variables
    ;

/* Bloque de importaciones */
bloque_importaciones ::= 
    bloque_importaciones dec_importaciones |
    dec_importaciones
    ;

/* Bloque de variables */
bloque_variables ::= 
    bloque_variables dec_variable |
    dec_variable
    ;

/* Regla para importaciones con múltiples niveles */
dec_importaciones ::=
    IMPORT lista_identificador_punto
    {: System.out.println("Es una declaracion de importacion"); :};

/* Regla auxiliar para manejar múltiples identificadores separados por DOT */
lista_identificador_punto ::=
    lista_identificador_punto DOT IDENTIFIER |
    IDENTIFIER;

/* Regla para declaraciones de variables */
dec_variable ::= 
    IDENTIFIER EQUAL expresion
    {: System.out.println("Es una declaracion de variable"); :};

/* Expresiones permitidas en asignaciones */
expresion ::= 
    INTEGER |
    FLOAT |
    STRING |
    STRING_SIMPLE |
    IDENTIFIER |
    UNCLOSED_STRING  {: System.out.println("Error: Cadena mal formada"); :} |
    MALFORMED_NUMBER  {: System.out.println("Error: Numero mal formado"); :} |
    MALFORMED_IDENTIFIER {: System.out.println("Error: Identificador mal formado"); :}
    ;
